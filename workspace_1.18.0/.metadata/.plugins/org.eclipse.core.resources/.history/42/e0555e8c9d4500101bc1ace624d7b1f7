/*
 * stepper_driver.c
 *
 *  Created on: Jun 2, 2025
 *      Author: kyle
 */

#include "stepper_driver.h"
#include <math.h>

/**
 * @brief  Plan a trapezoidal move (compute accel_steps/decel_steps), set DIR pin, etc.
 * @param  motor: Pointer to StepperMotor object
 * @note   Called internally by MoveTo().
 */
static void StepperMotor_PlanMotion(StepperMotor *motor)
{
    int32_t delta = motor->target_position - motor->current_position;
    if (delta == 0) {
        motor->moving = false;
        return;
    }

    int8_t new_direction = (delta > 0) ? +1 : -1;
    bool direction_changed = (new_direction != motor->direction);
    float initial_speed = motor->current_speed;

    // Save previous state if already moving
    bool was_moving = motor->moving;
    
    // Update direction
    motor->direction = new_direction;
    
    // Drive DIR pin high or low
    if (motor->direction > 0) {
        HAL_GPIO_WritePin(motor->dir_port, motor->dir_pin, GPIO_PIN_SET);
    } else {
        HAL_GPIO_WritePin(motor->dir_port, motor->dir_pin, GPIO_PIN_RESET);
    }

    motor->total_steps = abs(delta);
    motor->step_count = 0;

    // If direction changed or wasn't moving, reset speed to zero
    if (direction_changed || !was_moving) {
        initial_speed = 0.0f;
    }

    // Compute how many steps to accelerate and decelerate:
    // Starting from initial_speed (not zero if continuing in same direction)
    // End point speed calculation: v²final = v²initial + 2a*s
    // Solving for s when vfinal = max_speed: s = (max_speed² - v²initial) / (2*a)
    float accel_distance = 0.0f;
    if (initial_speed < motor->max_speed) {
        accel_distance = ((motor->max_speed * motor->max_speed) - (initial_speed * initial_speed)) / (2.0f * motor->accel);
    }
    
    int32_t accel_s = (int32_t)accel_distance;
    
    // Deceleration distance calculation (to stop from max_speed)
    int32_t decel_s = (int32_t)((motor->max_speed * motor->max_speed) / (2.0f * motor->accel));
    
    // Check if we need a triangular profile (can't reach max speed)
    if ((accel_s + decel_s) > motor->total_steps) {
        // Calculate peak speed for triangular profile
        // vmax² = v²initial + 2a*s where s = total_steps/2
        float peak_speed_squared = (initial_speed * initial_speed) + 
                                   motor->accel * 2.0f * (motor->total_steps / 2.0f);
        float peak_speed = sqrtf(peak_speed_squared);
        
        if (peak_speed > motor->max_speed) {
            peak_speed = motor->max_speed;
        }
        
        // Recalculate accel and decel distances with peak speed
        accel_s = (int32_t)(((peak_speed * peak_speed) - (initial_speed * initial_speed)) / 
                            (2.0f * motor->accel));
        decel_s = (int32_t)((peak_speed * peak_speed) / (2.0f * motor->accel));
        
        // Ensure we don't exceed total steps
        if (accel_s + decel_s > motor->total_steps) {
            accel_s = motor->total_steps / 2;
            decel_s = motor->total_steps - accel_s;
        }
    }
    
    motor->accel_steps = accel_s;
    motor->decel_steps = decel_s;

    // Preserve current speed if continuing in same direction
    motor->current_speed = initial_speed;
    
    // Only reset timer if starting from stopped or changing direction
    if (!was_moving || direction_changed) {
        motor->step_timer = 0;           // so next ISR tick computes first period
        motor->step_period = UINT32_MAX; // "invalid" until we compute real period
    }
    
    motor->pulse_high = false;
    motor->moving = true;
}

/**
 * @see stepper_driver.h
 */
void StepperMotor_Init(
    StepperMotor *motor,
    GPIO_TypeDef *dir_port, uint16_t dir_pin,
    GPIO_TypeDef *step_port, uint16_t step_pin,
    float max_speed,
    float accel
) {
    motor->dir_port      = dir_port;
    motor->dir_pin       = dir_pin;
    motor->step_port     = step_port;
    motor->step_pin      = step_pin;
    motor->current_position = 0;
    motor->target_position  = 0;
    motor->moving         = false;
    motor->direction      = +1;
    motor->step_timer     = 0;
    motor->step_period    = 0;
    motor->total_steps    = 0;
    motor->step_count     = 0;
    motor->accel_steps    = 0;
    motor->decel_steps    = 0;
    motor->current_speed  = 0.0f;
    motor->max_speed      = max_speed;
    motor->accel          = accel;
    motor->pulse_high     = false;

    // Initialize GPIO state: DIR=LOW, STEP=LOW
    HAL_GPIO_WritePin(motor->dir_port, motor->dir_pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(motor->step_port, motor->step_pin, GPIO_PIN_RESET);
    // (We assume the limit pin is already configured as input with pull-up externally.)
}

/**
 * @see stepper_driver.h
 */
void StepperMotor_MoveTo(StepperMotor *motor, int32_t target_position)
{
    motor->target_position = target_position;
    StepperMotor_PlanMotion(motor);
}

/**
 * @see stepper_driver.h
 */
void StepperMotor_Stop(StepperMotor *motor)
{
    motor->moving    = false;
    motor->pulse_high = false;
    // Ensure STEP pin is low
    HAL_GPIO_WritePin(motor->step_port, motor->step_pin, GPIO_PIN_RESET);
}

/**
 * @see stepper_driver.h
 */
bool StepperMotor_IsMoving(StepperMotor *motor)
{
    return motor->moving;
}

/**
 * @see stepper_driver.h
 */
void StepperMotor_Update(StepperMotor *motor)
{
    if (!motor->moving) {
        return;
    }

    // 2) If we are currently holding the STEP pin HIGH from the last ISR, pull it LOW now.
    if (motor->pulse_high) {
        HAL_GPIO_WritePin(motor->step_port, motor->step_pin, GPIO_PIN_RESET);
        motor->pulse_high = false;
        return;
    }

    // 3) Otherwise, count down our "step_timer." When it reaches zero, generate the next pulse.
    if (motor->step_timer > 0) {
        motor->step_timer--;
    }
    if (motor->step_timer == 0) {
        // (a) Determine our current phase: accelerate / cruise / decelerate
        if (motor->step_count < motor->accel_steps) {
            // Acceleration: v = sqrt(2 * a * s)
            float s = (float)motor->step_count;
            motor->current_speed = sqrtf(2.0f * motor->accel * s);
            if (motor->current_speed < 1.0f) {
                motor->current_speed = 1.0f;
            }
        }
        else if (motor->step_count < (motor->total_steps - motor->decel_steps)) {
            // Cruise at max_speed
            motor->current_speed = motor->max_speed;
        }
        else {
            // Deceleration: v = sqrt(2 * a * (remaining_steps))
            float s = (float)(motor->total_steps - motor->step_count);
            motor->current_speed = sqrtf(2.0f * motor->accel * s);
            if (motor->current_speed < 1.0f) {
                motor->current_speed = 1.0f;
            }
        }

        // (b) Convert speed (steps/sec) → period in "timer ticks"
        //     Timer runs at TIMER_FREQUENCY_HZ, so period_ticks = TIMER_FREQUENCY_HZ / speed
        uint32_t raw = (uint32_t)((float)TIMER_FREQUENCY_HZ / motor->current_speed);
        motor->step_period = (raw < 1) ? 1 : raw;

        // (c) Reload our step_timer
        motor->step_timer = motor->step_period;

        // (d) Issue a single step pulse: STEP→HIGH now; next ISR tick will drop it low
        HAL_GPIO_WritePin(motor->step_port, motor->step_pin, GPIO_PIN_SET);
        motor->pulse_high = true;

        // (e) Update bookkeeping: advance position & step_count
        motor->current_position += motor->direction;
        motor->step_count++;

        // (f) If we have reached the desired total, stop motion completely
        if (motor->step_count >= motor->total_steps) {
            StepperMotor_Stop(motor);
        }
    }
}


