
me507_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c90  08004c90  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c90  08004c90  00005c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c98  08004c98  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c98  08004c98  00005c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c9c  08004c9c  00005c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ca0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  08004cfc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004cfc  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d668  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e96  00000000  00000000  000136f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00015590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e1  00000000  00000000  00016210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca4  00000000  00000000  00016bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e94a  00000000  00000000  0002d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e746  00000000  00000000  0003c1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  000ca968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ce370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a74 	.word	0x08004a74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004a74 	.word	0x08004a74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b0a8      	sub	sp, #160	@ 0xa0
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fd3f 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f969 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fa91 	bl	8000ae0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005be:	f000 f9cd 	bl	800095c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 fa63 	bl	8000a8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80005c6:	2100      	movs	r1, #0
 80005c8:	48a2      	ldr	r0, [pc, #648]	@ (8000854 <main+0x2a8>)
 80005ca:	f001 fdcd 	bl	8002168 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80005ce:	2104      	movs	r1, #4
 80005d0:	48a0      	ldr	r0, [pc, #640]	@ (8000854 <main+0x2a8>)
 80005d2:	f001 fdc9 	bl	8002168 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80005d6:	2108      	movs	r1, #8
 80005d8:	489e      	ldr	r0, [pc, #632]	@ (8000854 <main+0x2a8>)
 80005da:	f001 fdc5 	bl	8002168 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 80005de:	210c      	movs	r1, #12
 80005e0:	489c      	ldr	r0, [pc, #624]	@ (8000854 <main+0x2a8>)
 80005e2:	f001 fdc1 	bl	8002168 <HAL_TIM_PWM_Start_IT>

  motor motor_1 = {
 80005e6:	4b9c      	ldr	r3, [pc, #624]	@ (8000858 <main+0x2ac>)
 80005e8:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	6023      	str	r3, [r4, #0]
		  .htim = &htim2,
		  .pwm_channel1 = TIM_CHANNEL_1,
		  .pwm_channel2 = TIM_CHANNEL_2,
  };

  motor motor_2 = {
 80005f6:	4b99      	ldr	r3, [pc, #612]	@ (800085c <main+0x2b0>)
 80005f8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	682b      	ldr	r3, [r5, #0]
 8000604:	6023      	str	r3, [r4, #0]
		  .pwm_channel1 = TIM_CHANNEL_3,
		  .pwm_channel2 = TIM_CHANNEL_4,
  };

  struct motor motors[2];
  motors[0] = motor_1;
 8000606:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800060a:	f107 0564 	add.w	r5, r7, #100	@ 0x64
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	682b      	ldr	r3, [r5, #0]
 8000614:	6023      	str	r3, [r4, #0]
  motors[1] = motor_2;
 8000616:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800061a:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	682b      	ldr	r3, [r5, #0]
 8000624:	6023      	str	r3, [r4, #0]

  HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	498d      	ldr	r1, [pc, #564]	@ (8000860 <main+0x2b4>)
 800062a:	488e      	ldr	r0, [pc, #568]	@ (8000864 <main+0x2b8>)
 800062c:	f002 fd7b 	bl	8003126 <HAL_UART_Receive_IT>
//		HAL_StatusTypeDef uart_status;

//		uart_status = HAL_UART_Receive(&huart1, &uart_rx_data, 1, 0);

//		if (uart_status == HAL_OK) {
		if (new_data == true) {
 8000630:	4b8d      	ldr	r3, [pc, #564]	@ (8000868 <main+0x2bc>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0fb      	beq.n	8000630 <main+0x84>
			new_data = false;
 8000638:	4b8b      	ldr	r3, [pc, #556]	@ (8000868 <main+0x2bc>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			if (uart_rx_data == '\r' || uart_rx_data == '\n') {
 800063e:	4b88      	ldr	r3, [pc, #544]	@ (8000860 <main+0x2b4>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b0d      	cmp	r3, #13
 8000644:	d004      	beq.n	8000650 <main+0xa4>
 8000646:	4b86      	ldr	r3, [pc, #536]	@ (8000860 <main+0x2b4>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b0a      	cmp	r3, #10
 800064c:	f040 80f0 	bne.w	8000830 <main+0x284>
				uart_rx_buffer[uart_rx_index] = '\0';
 8000650:	4b86      	ldr	r3, [pc, #536]	@ (800086c <main+0x2c0>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b86      	ldr	r3, [pc, #536]	@ (8000870 <main+0x2c4>)
 8000658:	2100      	movs	r1, #0
 800065a:	5499      	strb	r1, [r3, r2]

				char reply[32];
				int len = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				if (uart_rx_buffer[0] == 'M' && uart_rx_index >= 3) {
 8000662:	4b83      	ldr	r3, [pc, #524]	@ (8000870 <main+0x2c4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b4d      	cmp	r3, #77	@ 0x4d
 8000668:	f040 80ab 	bne.w	80007c2 <main+0x216>
 800066c:	4b7f      	ldr	r3, [pc, #508]	@ (800086c <main+0x2c0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	f240 80a6 	bls.w	80007c2 <main+0x216>
					uint8_t motor = uart_rx_buffer[1];
 8000676:	4b7e      	ldr	r3, [pc, #504]	@ (8000870 <main+0x2c4>)
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
					if (motor >= 97)
 800067e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000682:	2b60      	cmp	r3, #96	@ 0x60
 8000684:	d904      	bls.n	8000690 <main+0xe4>
						motor = motor - 32;
 8000686:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800068a:	3b20      	subs	r3, #32
 800068c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
					int first = motor / 16 - 3;
 8000690:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000694:	091b      	lsrs	r3, r3, #4
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3b03      	subs	r3, #3
 800069a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					int second = motor % 16;
 800069e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					int motornum = first * 10 + second;
 80006aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	461a      	mov	r2, r3
 80006b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80006bc:	4413      	add	r3, r2
 80006be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					if (motornum > 9) motornum--;
 80006c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80006c6:	2b09      	cmp	r3, #9
 80006c8:	dd04      	ble.n	80006d4 <main+0x128>
 80006ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80006ce:	3b01      	subs	r3, #1
 80006d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

					char hex_str[3] = {
						uart_rx_buffer[2],
 80006d4:	4b66      	ldr	r3, [pc, #408]	@ (8000870 <main+0x2c4>)
 80006d6:	789b      	ldrb	r3, [r3, #2]
					char hex_str[3] = {
 80006d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
						uart_rx_buffer[3],
 80006dc:	4b64      	ldr	r3, [pc, #400]	@ (8000870 <main+0x2c4>)
 80006de:	78db      	ldrb	r3, [r3, #3]
					char hex_str[3] = {
 80006e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
						'\0'
					};
					int8_t value = (int8_t)strtoul(hex_str, NULL, 16);
 80006ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ee:	2210      	movs	r2, #16
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fd00 	bl	80040f8 <strtoul>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f


					if (motornum != 1 && motornum != 2) {
 80006fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000702:	2b01      	cmp	r3, #1
 8000704:	d00d      	beq.n	8000722 <main+0x176>
 8000706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800070a:	2b02      	cmp	r3, #2
 800070c:	d009      	beq.n	8000722 <main+0x176>
						len = snprintf(reply, sizeof(reply), "Use valid motor num (1,2)\r\n");
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4a58      	ldr	r2, [pc, #352]	@ (8000874 <main+0x2c8>)
 8000712:	2120      	movs	r1, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fcf9 	bl	800410c <sniprintf>
 800071a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800071e:	bf00      	nop
				if (uart_rx_buffer[0] == 'M' && uart_rx_index >= 3) {
 8000720:	e057      	b.n	80007d2 <main+0x226>
					} else if (value > 100) {
 8000722:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8000726:	2b64      	cmp	r3, #100	@ 0x64
 8000728:	dd08      	ble.n	800073c <main+0x190>
						len = snprintf(reply, sizeof(reply), "Too large duty cycle\r\n");
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4a52      	ldr	r2, [pc, #328]	@ (8000878 <main+0x2cc>)
 800072e:	2120      	movs	r1, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fceb 	bl	800410c <sniprintf>
 8000736:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				if (uart_rx_buffer[0] == 'M' && uart_rx_index >= 3) {
 800073a:	e04a      	b.n	80007d2 <main+0x226>
					} else if (value < -100) {
 800073c:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8000740:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000744:	da08      	bge.n	8000758 <main+0x1ac>
						len = snprintf(reply, sizeof(reply), "Duty cycle less than -100\r\n");
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4a4c      	ldr	r2, [pc, #304]	@ (800087c <main+0x2d0>)
 800074a:	2120      	movs	r1, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fcdd 	bl	800410c <sniprintf>
 8000752:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				if (uart_rx_buffer[0] == 'M' && uart_rx_index >= 3) {
 8000756:	e03c      	b.n	80007d2 <main+0x226>
					} else {
						len = snprintf(reply, sizeof(reply), "Got M cmd: motor=%u  val=%d\r\n", motornum, value);
 8000758:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 800075c:	1d38      	adds	r0, r7, #4
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000764:	4a46      	ldr	r2, [pc, #280]	@ (8000880 <main+0x2d4>)
 8000766:	2120      	movs	r1, #32
 8000768:	f003 fcd0 	bl	800410c <sniprintf>
 800076c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
						int8_t duty_cycle = abs(value);
 8000770:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8000774:	2b00      	cmp	r3, #0
 8000776:	bfb8      	it	lt
 8000778:	425b      	neglt	r3, r3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
						int8_t dir = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
						if (value != 0) {
 8000786:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 800078a:	2b00      	cmp	r3, #0
 800078c:	d007      	beq.n	800079e <main+0x1f2>
							dir = duty_cycle / value;
 800078e:	f997 207e 	ldrsb.w	r2, [r7, #126]	@ 0x7e
 8000792:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8000796:	fb92 f3f3 	sdiv	r3, r2, r3
 800079a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
						}
						motor_set(&motors[motornum-1], duty_cycle, dir);
 800079e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007a2:	1e5a      	subs	r2, r3, #1
 80007a4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	440b      	add	r3, r1
 80007b2:	f997 107e 	ldrsb.w	r1, [r7, #126]	@ 0x7e
 80007b6:	f997 208b 	ldrsb.w	r2, [r7, #139]	@ 0x8b
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f9ea 	bl	8000b94 <motor_set>
				if (uart_rx_buffer[0] == 'M' && uart_rx_index >= 3) {
 80007c0:	e007      	b.n	80007d2 <main+0x226>
					}
				} else {
					len = snprintf(reply, sizeof(reply), "Begin commands with 'M'\r\n");
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000884 <main+0x2d8>)
 80007c6:	2120      	movs	r1, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 fc9f 	bl	800410c <sniprintf>
 80007ce:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

				}

				HAL_UART_Transmit(&huart1, (uint8_t*)reply, len, 1000);
 80007d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	4821      	ldr	r0, [pc, #132]	@ (8000864 <main+0x2b8>)
 80007e0:	f002 fc16 	bl	8003010 <HAL_UART_Transmit>



				// Spit out what I put in, then add a new line
				for (uint16_t i = 0; i < uart_rx_index; ++i) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80007ea:	e00e      	b.n	800080a <main+0x25e>
					HAL_UART_Transmit(&huart1,
									  (uint8_t*)&uart_rx_buffer[i],
 80007ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80007f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000870 <main+0x2c4>)
 80007f2:	1899      	adds	r1, r3, r2
					HAL_UART_Transmit(&huart1,
 80007f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f8:	2201      	movs	r2, #1
 80007fa:	481a      	ldr	r0, [pc, #104]	@ (8000864 <main+0x2b8>)
 80007fc:	f002 fc08 	bl	8003010 <HAL_UART_Transmit>
				for (uint16_t i = 0; i < uart_rx_index; ++i) {
 8000800:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8000804:	3301      	adds	r3, #1
 8000806:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <main+0x2c0>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8000814:	4293      	cmp	r3, r2
 8000816:	d3e9      	bcc.n	80007ec <main+0x240>
									  1,
									  1000);
				}
				const char *nl = "\r\n";
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <main+0x2dc>)
 800081a:	67bb      	str	r3, [r7, #120]	@ 0x78
				HAL_UART_Transmit(&huart1,
 800081c:	2364      	movs	r3, #100	@ 0x64
 800081e:	2202      	movs	r2, #2
 8000820:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000822:	4810      	ldr	r0, [pc, #64]	@ (8000864 <main+0x2b8>)
 8000824:	f002 fbf4 	bl	8003010 <HAL_UART_Transmit>
								  (uint8_t*)nl,
								  2,
								  100);

				uart_rx_index = 0;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <main+0x2c0>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
			if (uart_rx_data == '\r' || uart_rx_data == '\n') {
 800082e:	e00f      	b.n	8000850 <main+0x2a4>
			}
			else {
				if (uart_rx_index < RX_BUFFER_SIZE - 1) {
 8000830:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <main+0x2c0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b3e      	cmp	r3, #62	@ 0x3e
 8000836:	f63f aefb 	bhi.w	8000630 <main+0x84>
					uart_rx_buffer[uart_rx_index++] = uart_rx_data;
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <main+0x2c0>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	b2d1      	uxtb	r1, r2
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <main+0x2c0>)
 8000844:	7011      	strb	r1, [r2, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <main+0x2b4>)
 800084a:	7819      	ldrb	r1, [r3, #0]
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <main+0x2c4>)
 800084e:	5499      	strb	r1, [r3, r2]
		if (new_data == true) {
 8000850:	e6ee      	b.n	8000630 <main+0x84>
 8000852:	bf00      	nop
 8000854:	20000078 	.word	0x20000078
 8000858:	08004b1c 	.word	0x08004b1c
 800085c:	08004b30 	.word	0x08004b30
 8000860:	20000108 	.word	0x20000108
 8000864:	200000c0 	.word	0x200000c0
 8000868:	2000014d 	.word	0x2000014d
 800086c:	2000014c 	.word	0x2000014c
 8000870:	2000010c 	.word	0x2000010c
 8000874:	08004a8c 	.word	0x08004a8c
 8000878:	08004aa8 	.word	0x08004aa8
 800087c:	08004ac0 	.word	0x08004ac0
 8000880:	08004adc 	.word	0x08004adc
 8000884:	08004afc 	.word	0x08004afc
 8000888:	08004b18 	.word	0x08004b18

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	@ 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2230      	movs	r2, #48	@ 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fc6c 	bl	8004178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <SystemClock_Config+0xc8>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	4a26      	ldr	r2, [pc, #152]	@ (8000954 <SystemClock_Config+0xc8>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c0:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <SystemClock_Config+0xc8>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <SystemClock_Config+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a20      	ldr	r2, [pc, #128]	@ (8000958 <SystemClock_Config+0xcc>)
 80008d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <SystemClock_Config+0xcc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008fc:	2319      	movs	r3, #25
 80008fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000900:	23c0      	movs	r3, #192	@ 0xc0
 8000902:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f000 ff29 	bl	8001768 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800091c:	f000 f934 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2302      	movs	r3, #2
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2103      	movs	r1, #3
 800093c:	4618      	mov	r0, r3
 800093e:	f001 f98b 	bl	8001c58 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000948:	f000 f91e 	bl	8000b88 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	@ 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	@ 0x38
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000994:	4b3c      	ldr	r3, [pc, #240]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 80009a0:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 80009a2:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80009a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b37      	ldr	r3, [pc, #220]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ae:	4b36      	ldr	r3, [pc, #216]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b4:	4834      	ldr	r0, [pc, #208]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 80009b6:	f001 fb2f 	bl	8002018 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009c0:	f000 f8e2 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ce:	4619      	mov	r1, r3
 80009d0:	482d      	ldr	r0, [pc, #180]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 80009d2:	f001 fe79 	bl	80026c8 <HAL_TIM_ConfigClockSource>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009dc:	f000 f8d4 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e0:	4829      	ldr	r0, [pc, #164]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 80009e2:	f001 fb68 	bl	80020b6 <HAL_TIM_PWM_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009ec:	f000 f8cc 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80009f0:	2330      	movs	r3, #48	@ 0x30
 80009f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4619      	mov	r1, r3
 80009fe:	4822      	ldr	r0, [pc, #136]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 8000a00:	f002 fa34 	bl	8002e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a0a:	f000 f8bd 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0e:	2360      	movs	r3, #96	@ 0x60
 8000a10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4800 ;
 8000a12:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8000a16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	4818      	ldr	r0, [pc, #96]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 8000a28:	f001 fd8c 	bl	8002544 <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a32:	f000 f8a9 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2204      	movs	r2, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 8000a3e:	f001 fd81 	bl	8002544 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a48:	f000 f89e 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2208      	movs	r2, #8
 8000a50:	4619      	mov	r1, r3
 8000a52:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 8000a54:	f001 fd76 	bl	8002544 <HAL_TIM_PWM_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000a5e:	f000 f893 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	220c      	movs	r2, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 8000a6a:	f001 fd6b 	bl	8002544 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000a74:	f000 f888 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <MX_TIM2_Init+0x12c>)
 8000a7a:	f000 f99d 	bl	8000db8 <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3738      	adds	r7, #56	@ 0x38
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000078 	.word	0x20000078

08000a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <MX_USART1_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	f002 fa54 	bl	8002f70 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f000 f85b 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000c0 	.word	0x200000c0
 8000adc:	40011000 	.word	0x40011000

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a16      	ldr	r2, [pc, #88]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_GPIO_Init+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_UART_RxCpltCallback>:
//	sprintf(tx_buff, "LED HAS BLINKED %lu TIMES\r\n", counterValue);  // Format string with variable
//	HAL_UART_Transmit(&huart1, (uint8_t*)tx_buff, strlen(tx_buff), 1000);
//

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	new_data = true;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_UART_RxCpltCallback+0x30>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)&uart_rx_data, 1, 1000);
 8000b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4907      	ldr	r1, [pc, #28]	@ (8000b80 <HAL_UART_RxCpltCallback+0x34>)
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <HAL_UART_RxCpltCallback+0x38>)
 8000b64:	f002 fa54 	bl	8003010 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4905      	ldr	r1, [pc, #20]	@ (8000b80 <HAL_UART_RxCpltCallback+0x34>)
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_UART_RxCpltCallback+0x38>)
 8000b6e:	f002 fada 	bl	8003126 <HAL_UART_Receive_IT>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000014d 	.word	0x2000014d
 8000b80:	20000108 	.word	0x20000108
 8000b84:	200000c0 	.word	0x200000c0

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <motor_set>:
 *      Author: kyle
 */

#include "motor_driver.h"

void motor_set(motor* m, uint32_t duty_cycle, int8_t direction) {
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	71fb      	strb	r3, [r7, #7]
	if (duty_cycle > 100) duty_cycle = 100;
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	2b64      	cmp	r3, #100	@ 0x64
 8000ba6:	d901      	bls.n	8000bac <motor_set+0x18>
 8000ba8:	2364      	movs	r3, #100	@ 0x64
 8000baa:	60bb      	str	r3, [r7, #8]

	m->duty_cycle = duty_cycle;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	601a      	str	r2, [r3, #0]
	m->direction = direction;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	711a      	strb	r2, [r3, #4]

	uint32_t autoreload = __HAL_TIM_GET_AUTORELOAD(m->htim);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc0:	617b      	str	r3, [r7, #20]
	uint32_t pulse = autoreload - ((autoreload + 1) * m->duty_cycle/100);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	4a52      	ldr	r2, [pc, #328]	@ (8000d18 <motor_set+0x184>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	095b      	lsrs	r3, r3, #5
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	613b      	str	r3, [r7, #16]

	if (m->direction > 0) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	dd46      	ble.n	8000c74 <motor_set+0xe0>
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel1, autoreload);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d105      	bne.n	8000bfa <motor_set+0x66>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf8:	e018      	b.n	8000c2c <motor_set+0x98>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d105      	bne.n	8000c0e <motor_set+0x7a>
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c0c:	e00e      	b.n	8000c2c <motor_set+0x98>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	2b08      	cmp	r3, #8
 8000c14:	d105      	bne.n	8000c22 <motor_set+0x8e>
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c20:	e004      	b.n	8000c2c <motor_set+0x98>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel2, pulse);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d105      	bne.n	8000c40 <motor_set+0xac>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	635a      	str	r2, [r3, #52]	@ 0x34
	} else if (m->direction < 0) {
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel1, pulse);
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel2, autoreload);
	}

}
 8000c3e:	e065      	b.n	8000d0c <motor_set+0x178>
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel2, pulse);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d105      	bne.n	8000c54 <motor_set+0xc0>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c52:	e05b      	b.n	8000d0c <motor_set+0x178>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b08      	cmp	r3, #8
 8000c5a:	d105      	bne.n	8000c68 <motor_set+0xd4>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c66:	e051      	b.n	8000d0c <motor_set+0x178>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c72:	e04b      	b.n	8000d0c <motor_set+0x178>
	} else if (m->direction < 0) {
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da46      	bge.n	8000d0c <motor_set+0x178>
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel1, pulse);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d105      	bne.n	8000c92 <motor_set+0xfe>
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c90:	e018      	b.n	8000cc4 <motor_set+0x130>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d105      	bne.n	8000ca6 <motor_set+0x112>
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ca4:	e00e      	b.n	8000cc4 <motor_set+0x130>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d105      	bne.n	8000cba <motor_set+0x126>
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cb8:	e004      	b.n	8000cc4 <motor_set+0x130>
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel2, autoreload);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d105      	bne.n	8000cd8 <motor_set+0x144>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000cd6:	e019      	b.n	8000d0c <motor_set+0x178>
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel2, autoreload);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d105      	bne.n	8000cec <motor_set+0x158>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000cea:	e00f      	b.n	8000d0c <motor_set+0x178>
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel2, autoreload);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	2b08      	cmp	r3, #8
 8000cf2:	d105      	bne.n	8000d00 <motor_set+0x16c>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000cfe:	e005      	b.n	8000d0c <motor_set+0x178>
		__HAL_TIM_SET_COMPARE(m->htim, m->pwm_channel2, autoreload);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d0a:	e7ff      	b.n	8000d0c <motor_set+0x178>
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	51eb851f 	.word	0x51eb851f

08000d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d7c:	d115      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a0b      	ldr	r2, [pc, #44]	@ (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	201c      	movs	r0, #28
 8000da0:	f000 fa95 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000da4:	201c      	movs	r0, #28
 8000da6:	f000 faae 	bl	8001306 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd8:	d11d      	bne.n	8000e16 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_TIM_MspPostInit+0x68>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <HAL_TIM_MspPostInit+0x68>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_TIM_MspPostInit+0x68>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000df6:	232e      	movs	r3, #46	@ 0x2e
 8000df8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4804      	ldr	r0, [pc, #16]	@ (8000e24 <HAL_TIM_MspPostInit+0x6c>)
 8000e12:	f000 fb25 	bl	8001460 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_UART_MspInit+0x94>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d134      	bne.n	8000eb4 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e94:	2307      	movs	r3, #7
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <HAL_UART_MspInit+0x9c>)
 8000ea0:	f000 fade 	bl	8001460 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2025      	movs	r0, #37	@ 0x25
 8000eaa:	f000 fa10 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eae:	2025      	movs	r0, #37	@ 0x25
 8000eb0:	f000 fa29 	bl	8001306 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f8db 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <TIM2_IRQHandler+0x10>)
 8000f2e:	f001 fa19 	bl	8002364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000078 	.word	0x20000078

08000f3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <USART1_IRQHandler+0x10>)
 8000f42:	f002 f915 	bl	8003170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000c0 	.word	0x200000c0

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f003 f902 	bl	8004188 <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20020000 	.word	0x20020000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	20000150 	.word	0x20000150
 8000fb8:	200002a0 	.word	0x200002a0

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe4:	f7ff ffea 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f003 f8c1 	bl	8004194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff facb 	bl	80005ac <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001024:	08004ca0 	.word	0x08004ca0
  ldr r2, =_sbss
 8001028:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800102c:	200002a0 	.word	0x200002a0

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f92b 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fe58 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f943 	bl	8001322 <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f90b 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000154 	.word	0x20000154

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000154 	.word	0x20000154

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	@ (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	@ (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff29 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff3e 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff31 	bl	800117c <__NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffa2 	bl	8001274 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff feda 	bl	8001100 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d008      	beq.n	800136c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2280      	movs	r2, #128	@ 0x80
 800135e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e052      	b.n	8001412 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0216 	bic.w	r2, r2, #22
 800137a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800138a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <HAL_DMA_Abort+0x62>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001398:	2b00      	cmp	r3, #0
 800139a:	d007      	beq.n	80013ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0208 	bic.w	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013bc:	e013      	b.n	80013e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013be:	f7ff fe9f 	bl	8001100 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d90c      	bls.n	80013e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2220      	movs	r2, #32
 80013d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e015      	b.n	8001412 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e4      	bne.n	80013be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f8:	223f      	movs	r2, #63	@ 0x3f
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d004      	beq.n	8001438 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2280      	movs	r2, #128	@ 0x80
 8001432:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e00c      	b.n	8001452 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2205      	movs	r2, #5
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e159      	b.n	8001730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 8148 	bne.w	800172a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d005      	beq.n	80014b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d130      	bne.n	8001514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b03      	cmp	r3, #3
 800151e:	d017      	beq.n	8001550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d123      	bne.n	80015a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	69b9      	ldr	r1, [r7, #24]
 80015a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a2 	beq.w	800172a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b57      	ldr	r3, [pc, #348]	@ (8001748 <HAL_GPIO_Init+0x2e8>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	4a56      	ldr	r2, [pc, #344]	@ (8001748 <HAL_GPIO_Init+0x2e8>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f6:	4b54      	ldr	r3, [pc, #336]	@ (8001748 <HAL_GPIO_Init+0x2e8>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001602:	4a52      	ldr	r2, [pc, #328]	@ (800174c <HAL_GPIO_Init+0x2ec>)
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <HAL_GPIO_Init+0x2f0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0x202>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a48      	ldr	r2, [pc, #288]	@ (8001754 <HAL_GPIO_Init+0x2f4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0x1fe>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a47      	ldr	r2, [pc, #284]	@ (8001758 <HAL_GPIO_Init+0x2f8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_Init+0x1fa>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a46      	ldr	r2, [pc, #280]	@ (800175c <HAL_GPIO_Init+0x2fc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x1f6>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a45      	ldr	r2, [pc, #276]	@ (8001760 <HAL_GPIO_Init+0x300>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_GPIO_Init+0x1f2>
 800164e:	2304      	movs	r3, #4
 8001650:	e008      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001652:	2307      	movs	r3, #7
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001656:	2303      	movs	r3, #3
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x204>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x204>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001662:	2300      	movs	r3, #0
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001674:	4935      	ldr	r1, [pc, #212]	@ (800174c <HAL_GPIO_Init+0x2ec>)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001682:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <HAL_GPIO_Init+0x304>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001764 <HAL_GPIO_Init+0x304>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001764 <HAL_GPIO_Init+0x304>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d0:	4a24      	ldr	r2, [pc, #144]	@ (8001764 <HAL_GPIO_Init+0x304>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d6:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <HAL_GPIO_Init+0x304>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001764 <HAL_GPIO_Init+0x304>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001700:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <HAL_GPIO_Init+0x304>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001724:	4a0f      	ldr	r2, [pc, #60]	@ (8001764 <HAL_GPIO_Init+0x304>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	f67f aea2 	bls.w	800147c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3724      	adds	r7, #36	@ 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40013c00 	.word	0x40013c00

08001768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e267      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d075      	beq.n	8001872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001786:	4b88      	ldr	r3, [pc, #544]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d00c      	beq.n	80017ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001792:	4b85      	ldr	r3, [pc, #532]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800179a:	2b08      	cmp	r3, #8
 800179c:	d112      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179e:	4b82      	ldr	r3, [pc, #520]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017aa:	d10b      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	4b7e      	ldr	r3, [pc, #504]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d05b      	beq.n	8001870 <HAL_RCC_OscConfig+0x108>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d157      	bne.n	8001870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e242      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x74>
 80017ce:	4b76      	ldr	r3, [pc, #472]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a75      	ldr	r2, [pc, #468]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xb0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b70      	ldr	r3, [pc, #448]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6f      	ldr	r2, [pc, #444]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6d      	ldr	r3, [pc, #436]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6c      	ldr	r2, [pc, #432]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xb0>
 8001800:	4b69      	ldr	r3, [pc, #420]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a68      	ldr	r2, [pc, #416]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a65      	ldr	r2, [pc, #404]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fc6e 	bl	8001100 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fc6a 	bl	8001100 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e207      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5b      	ldr	r3, [pc, #364]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xc0>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fc5a 	bl	8001100 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fc56 	bl	8001100 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	@ 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1f3      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b51      	ldr	r3, [pc, #324]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0xe8>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800187e:	4b4a      	ldr	r3, [pc, #296]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188a:	4b47      	ldr	r3, [pc, #284]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001896:	4b44      	ldr	r3, [pc, #272]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b41      	ldr	r3, [pc, #260]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x152>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c7      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3b      	ldr	r3, [pc, #236]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4937      	ldr	r1, [pc, #220]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <HAL_RCC_OscConfig+0x244>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff fc0f 	bl	8001100 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fc0b 	bl	8001100 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a8      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4925      	ldr	r1, [pc, #148]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_RCC_OscConfig+0x244>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fbee 	bl	8001100 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fbea 	bl	8001100 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e187      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d036      	beq.n	80019c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d016      	beq.n	8001988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_RCC_OscConfig+0x248>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff fbce 	bl	8001100 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fbca 	bl	8001100 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e167      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800197c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x200>
 8001986:	e01b      	b.n	80019c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_OscConfig+0x248>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff fbb7 	bl	8001100 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	e00e      	b.n	80019b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff fbb3 	bl	8001100 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d907      	bls.n	80019b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e150      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	42470000 	.word	0x42470000
 80019b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b88      	ldr	r3, [pc, #544]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ea      	bne.n	8001996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8097 	beq.w	8001afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b81      	ldr	r3, [pc, #516]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	4a7c      	ldr	r2, [pc, #496]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ee:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b77      	ldr	r3, [pc, #476]	@ (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0a:	4b74      	ldr	r3, [pc, #464]	@ (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a73      	ldr	r2, [pc, #460]	@ (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fb73 	bl	8001100 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fb6f 	bl	8001100 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e10c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	4b6a      	ldr	r3, [pc, #424]	@ (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2ea>
 8001a44:	4b64      	ldr	r3, [pc, #400]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a63      	ldr	r2, [pc, #396]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x324>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x30c>
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x324>
 8001a74:	4b58      	ldr	r3, [pc, #352]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a57      	ldr	r2, [pc, #348]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a80:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a54      	ldr	r2, [pc, #336]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fb34 	bl	8001100 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fb30 	bl	8001100 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0cb      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	4b49      	ldr	r3, [pc, #292]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fb1e 	bl	8001100 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fb1a 	bl	8001100 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0b5      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ade:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ee      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	4a38      	ldr	r2, [pc, #224]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a1 	beq.w	8001c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d05c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d141      	bne.n	8001b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff faee 	bl	8001100 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff faea 	bl	8001100 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e087      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	4b27      	ldr	r3, [pc, #156]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	491b      	ldr	r1, [pc, #108]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff fac3 	bl	8001100 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff fabf 	bl	8001100 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e05c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x416>
 8001b9c:	e054      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff faac 	bl	8001100 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff faa8 	bl	8001100 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e045      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
 8001bca:	e03d      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e038      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_RCC_OscConfig+0x4ec>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d121      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d11a      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d111      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0cc      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b68      	ldr	r3, [pc, #416]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d90c      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b65      	ldr	r3, [pc, #404]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b63      	ldr	r3, [pc, #396]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b8      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b59      	ldr	r3, [pc, #356]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc4:	4b53      	ldr	r3, [pc, #332]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b50      	ldr	r3, [pc, #320]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	494d      	ldr	r1, [pc, #308]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d044      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b47      	ldr	r3, [pc, #284]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d119      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e07f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b3f      	ldr	r3, [pc, #252]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e067      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b37      	ldr	r3, [pc, #220]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4934      	ldr	r1, [pc, #208]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7ff f9da 	bl	8001100 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff f9d6 	bl	8001100 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e04f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d20c      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e032      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4916      	ldr	r1, [pc, #88]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490e      	ldr	r1, [pc, #56]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dde:	f000 f821 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490a      	ldr	r1, [pc, #40]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f93a 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08004b44 	.word	0x08004b44
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e28:	b090      	sub	sp, #64	@ 0x40
 8001e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3c:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x40>
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	f200 80a1 	bhi.w	8001f90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x34>
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b53      	ldr	r3, [pc, #332]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e5c:	e09b      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5e:	4b53      	ldr	r3, [pc, #332]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e62:	e098      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e64:	4b4f      	ldr	r3, [pc, #316]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d028      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	2200      	movs	r2, #0
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4b47      	ldr	r3, [pc, #284]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e90:	fb03 f201 	mul.w	r2, r3, r1
 8001e94:	2300      	movs	r3, #0
 8001e96:	fb00 f303 	mul.w	r3, r0, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a43      	ldr	r2, [pc, #268]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eaa:	4413      	add	r3, r2
 8001eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	61fa      	str	r2, [r7, #28]
 8001eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ebe:	f7fe f9df 	bl	8000280 <__aeabi_uldivmod>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eca:	e053      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ecc:	4b35      	ldr	r3, [pc, #212]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	617a      	str	r2, [r7, #20]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ede:	f04f 0b00 	mov.w	fp, #0
 8001ee2:	4652      	mov	r2, sl
 8001ee4:	465b      	mov	r3, fp
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	0159      	lsls	r1, r3, #5
 8001ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef4:	0150      	lsls	r0, r2, #5
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	ebb2 080a 	subs.w	r8, r2, sl
 8001efe:	eb63 090b 	sbc.w	r9, r3, fp
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f16:	ebb2 0408 	subs.w	r4, r2, r8
 8001f1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	00eb      	lsls	r3, r5, #3
 8001f28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f2c:	00e2      	lsls	r2, r4, #3
 8001f2e:	4614      	mov	r4, r2
 8001f30:	461d      	mov	r5, r3
 8001f32:	eb14 030a 	adds.w	r3, r4, sl
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	eb45 030b 	adc.w	r3, r5, fp
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	028b      	lsls	r3, r1, #10
 8001f4e:	4621      	mov	r1, r4
 8001f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f54:	4621      	mov	r1, r4
 8001f56:	028a      	lsls	r2, r1, #10
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	60fa      	str	r2, [r7, #12]
 8001f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f68:	f7fe f98a 	bl	8000280 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4613      	mov	r3, r2
 8001f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3740      	adds	r7, #64	@ 0x40
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	017d7840 	.word	0x017d7840

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	@ (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0a9b      	lsrs	r3, r3, #10
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	@ (8001fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08004b54 	.word	0x08004b54

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff ffdc 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0b5b      	lsrs	r3, r3, #13
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	@ (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08004b54 	.word	0x08004b54

08002018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e041      	b.n	80020ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fe94 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f000 fc30 	bl	80028bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e041      	b.n	800214c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f839 	bl	8002154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3304      	adds	r3, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f000 fbe1 	bl	80028bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_TIM_PWM_Start_IT+0x28>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e022      	b.n	80021d6 <HAL_TIM_PWM_Start_IT+0x6e>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d109      	bne.n	80021aa <HAL_TIM_PWM_Start_IT+0x42>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	e015      	b.n	80021d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d109      	bne.n	80021c4 <HAL_TIM_PWM_Start_IT+0x5c>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	bf14      	ite	ne
 80021bc:	2301      	movne	r3, #1
 80021be:	2300      	moveq	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e008      	b.n	80021d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0b3      	b.n	8002346 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d104      	bne.n	80021ee <HAL_TIM_PWM_Start_IT+0x86>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021ec:	e013      	b.n	8002216 <HAL_TIM_PWM_Start_IT+0xae>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d104      	bne.n	80021fe <HAL_TIM_PWM_Start_IT+0x96>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021fc:	e00b      	b.n	8002216 <HAL_TIM_PWM_Start_IT+0xae>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d104      	bne.n	800220e <HAL_TIM_PWM_Start_IT+0xa6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800220c:	e003      	b.n	8002216 <HAL_TIM_PWM_Start_IT+0xae>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d841      	bhi.n	80022a0 <HAL_TIM_PWM_Start_IT+0x138>
 800221c:	a201      	add	r2, pc, #4	@ (adr r2, 8002224 <HAL_TIM_PWM_Start_IT+0xbc>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002259 	.word	0x08002259
 8002228:	080022a1 	.word	0x080022a1
 800222c:	080022a1 	.word	0x080022a1
 8002230:	080022a1 	.word	0x080022a1
 8002234:	0800226b 	.word	0x0800226b
 8002238:	080022a1 	.word	0x080022a1
 800223c:	080022a1 	.word	0x080022a1
 8002240:	080022a1 	.word	0x080022a1
 8002244:	0800227d 	.word	0x0800227d
 8002248:	080022a1 	.word	0x080022a1
 800224c:	080022a1 	.word	0x080022a1
 8002250:	080022a1 	.word	0x080022a1
 8002254:	0800228f 	.word	0x0800228f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0202 	orr.w	r2, r2, #2
 8002266:	60da      	str	r2, [r3, #12]
      break;
 8002268:	e01d      	b.n	80022a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0204 	orr.w	r2, r2, #4
 8002278:	60da      	str	r2, [r3, #12]
      break;
 800227a:	e014      	b.n	80022a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0208 	orr.w	r2, r2, #8
 800228a:	60da      	str	r2, [r3, #12]
      break;
 800228c:	e00b      	b.n	80022a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0210 	orr.w	r2, r2, #16
 800229c:	60da      	str	r2, [r3, #12]
      break;
 800229e:	e002      	b.n	80022a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      break;
 80022a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d14b      	bne.n	8002344 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fdb3 	bl	8002e20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d107      	bne.n	80022d4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d018      	beq.n	8002310 <HAL_TIM_PWM_Start_IT+0x1a8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e6:	d013      	beq.n	8002310 <HAL_TIM_PWM_Start_IT+0x1a8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00e      	beq.n	8002310 <HAL_TIM_PWM_Start_IT+0x1a8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a18      	ldr	r2, [pc, #96]	@ (8002358 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d009      	beq.n	8002310 <HAL_TIM_PWM_Start_IT+0x1a8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a16      	ldr	r2, [pc, #88]	@ (800235c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a15      	ldr	r2, [pc, #84]	@ (8002360 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b06      	cmp	r3, #6
 8002320:	d010      	beq.n	8002344 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002332:	e007      	b.n	8002344 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800
 800235c:	40000c00 	.word	0x40000c00
 8002360:	40014000 	.word	0x40014000

08002364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0202 	mvn.w	r2, #2
 8002398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fa65 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa57 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fa68 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d020      	beq.n	8002414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0204 	mvn.w	r2, #4
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fa3f 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fa31 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fa42 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d020      	beq.n	8002460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0208 	mvn.w	r2, #8
 8002430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2204      	movs	r2, #4
 8002436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa19 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa0b 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fa1c 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d020      	beq.n	80024ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0210 	mvn.w	r2, #16
 800247c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2208      	movs	r2, #8
 8002482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f9f3 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f9e5 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9f6 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f9c3 	bl	8002856 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fd34 	bl	8002f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f9c7 	bl	80028a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0220 	mvn.w	r2, #32
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fd06 	bl	8002f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800255e:	2302      	movs	r3, #2
 8002560:	e0ae      	b.n	80026c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	f200 809f 	bhi.w	80026b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002572:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	080025ad 	.word	0x080025ad
 800257c:	080026b1 	.word	0x080026b1
 8002580:	080026b1 	.word	0x080026b1
 8002584:	080026b1 	.word	0x080026b1
 8002588:	080025ed 	.word	0x080025ed
 800258c:	080026b1 	.word	0x080026b1
 8002590:	080026b1 	.word	0x080026b1
 8002594:	080026b1 	.word	0x080026b1
 8002598:	0800262f 	.word	0x0800262f
 800259c:	080026b1 	.word	0x080026b1
 80025a0:	080026b1 	.word	0x080026b1
 80025a4:	080026b1 	.word	0x080026b1
 80025a8:	0800266f 	.word	0x0800266f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fa0e 	bl	80029d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0208 	orr.w	r2, r2, #8
 80025c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0204 	bic.w	r2, r2, #4
 80025d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6999      	ldr	r1, [r3, #24]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	619a      	str	r2, [r3, #24]
      break;
 80025ea:	e064      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fa54 	bl	8002aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6999      	ldr	r1, [r3, #24]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	021a      	lsls	r2, r3, #8
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	619a      	str	r2, [r3, #24]
      break;
 800262c:	e043      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fa9f 	bl	8002b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0208 	orr.w	r2, r2, #8
 8002648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0204 	bic.w	r2, r2, #4
 8002658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69d9      	ldr	r1, [r3, #28]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	61da      	str	r2, [r3, #28]
      break;
 800266c:	e023      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fae9 	bl	8002c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69d9      	ldr	r1, [r3, #28]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	61da      	str	r2, [r3, #28]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	75fb      	strb	r3, [r7, #23]
      break;
 80026b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026be:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_ConfigClockSource+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0b4      	b.n	800284e <HAL_TIM_ConfigClockSource+0x186>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800270a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800271c:	d03e      	beq.n	800279c <HAL_TIM_ConfigClockSource+0xd4>
 800271e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002722:	f200 8087 	bhi.w	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272a:	f000 8086 	beq.w	800283a <HAL_TIM_ConfigClockSource+0x172>
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002732:	d87f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b70      	cmp	r3, #112	@ 0x70
 8002736:	d01a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0xa6>
 8002738:	2b70      	cmp	r3, #112	@ 0x70
 800273a:	d87b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b60      	cmp	r3, #96	@ 0x60
 800273e:	d050      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002740:	2b60      	cmp	r3, #96	@ 0x60
 8002742:	d877      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b50      	cmp	r3, #80	@ 0x50
 8002746:	d03c      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002748:	2b50      	cmp	r3, #80	@ 0x50
 800274a:	d873      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 800274c:	2b40      	cmp	r3, #64	@ 0x40
 800274e:	d058      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x13a>
 8002750:	2b40      	cmp	r3, #64	@ 0x40
 8002752:	d86f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b30      	cmp	r3, #48	@ 0x30
 8002756:	d064      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	2b30      	cmp	r3, #48	@ 0x30
 800275a:	d86b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d060      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x15a>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d867      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x15a>
 8002768:	2b10      	cmp	r3, #16
 800276a:	d05a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	e062      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800277e:	f000 fb2f 	bl	8002de0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	609a      	str	r2, [r3, #8]
      break;
 800279a:	e04f      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027ac:	f000 fb18 	bl	8002de0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027be:	609a      	str	r2, [r3, #8]
      break;
 80027c0:	e03c      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 fa8c 	bl	8002cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2150      	movs	r1, #80	@ 0x50
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fae5 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 80027e0:	e02c      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 faab 	bl	8002d4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2160      	movs	r1, #96	@ 0x60
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fad5 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002800:	e01c      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	461a      	mov	r2, r3
 8002810:	f000 fa6c 	bl	8002cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2140      	movs	r1, #64	@ 0x40
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fac5 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002820:	e00c      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 fabc 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002832:	e003      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      break;
 8002838:	e000      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800283a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3a      	ldr	r2, [pc, #232]	@ (80029b8 <TIM_Base_SetConfig+0xfc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00f      	beq.n	80028f4 <TIM_Base_SetConfig+0x38>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028da:	d00b      	beq.n	80028f4 <TIM_Base_SetConfig+0x38>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a37      	ldr	r2, [pc, #220]	@ (80029bc <TIM_Base_SetConfig+0x100>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <TIM_Base_SetConfig+0x38>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a36      	ldr	r2, [pc, #216]	@ (80029c0 <TIM_Base_SetConfig+0x104>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_Base_SetConfig+0x38>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a35      	ldr	r2, [pc, #212]	@ (80029c4 <TIM_Base_SetConfig+0x108>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2b      	ldr	r2, [pc, #172]	@ (80029b8 <TIM_Base_SetConfig+0xfc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01b      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002914:	d017      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a28      	ldr	r2, [pc, #160]	@ (80029bc <TIM_Base_SetConfig+0x100>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a27      	ldr	r2, [pc, #156]	@ (80029c0 <TIM_Base_SetConfig+0x104>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a26      	ldr	r2, [pc, #152]	@ (80029c4 <TIM_Base_SetConfig+0x108>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <TIM_Base_SetConfig+0x10c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a24      	ldr	r2, [pc, #144]	@ (80029cc <TIM_Base_SetConfig+0x110>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0x8a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a23      	ldr	r2, [pc, #140]	@ (80029d0 <TIM_Base_SetConfig+0x114>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0e      	ldr	r2, [pc, #56]	@ (80029b8 <TIM_Base_SetConfig+0xfc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d103      	bne.n	800298c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f023 0201 	bic.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	611a      	str	r2, [r3, #16]
  }
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40014000 	.word	0x40014000
 80029cc:	40014400 	.word	0x40014400
 80029d0:	40014800 	.word	0x40014800

080029d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f023 0201 	bic.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 0302 	bic.w	r3, r3, #2
 8002a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a9c <TIM_OC1_SetConfig+0xc8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10c      	bne.n	8002a4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0308 	bic.w	r3, r3, #8
 8002a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	@ (8002a9c <TIM_OC1_SetConfig+0xc8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d111      	bne.n	8002a76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	621a      	str	r2, [r3, #32]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40010000 	.word	0x40010000

08002aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f023 0210 	bic.w	r2, r3, #16
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0320 	bic.w	r3, r3, #32
 8002aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a1e      	ldr	r2, [pc, #120]	@ (8002b74 <TIM_OC2_SetConfig+0xd4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10d      	bne.n	8002b1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a15      	ldr	r2, [pc, #84]	@ (8002b74 <TIM_OC2_SetConfig+0xd4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d113      	bne.n	8002b4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000

08002b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c48 <TIM_OC3_SetConfig+0xd0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10d      	bne.n	8002bf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a14      	ldr	r2, [pc, #80]	@ (8002c48 <TIM_OC3_SetConfig+0xd0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d113      	bne.n	8002c22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	621a      	str	r2, [r3, #32]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40010000 	.word	0x40010000

08002c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	031b      	lsls	r3, r3, #12
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a10      	ldr	r2, [pc, #64]	@ (8002ce8 <TIM_OC4_SetConfig+0x9c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d109      	bne.n	8002cc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	019b      	lsls	r3, r3, #6
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40010000 	.word	0x40010000

08002cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0201 	bic.w	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f023 030a 	bic.w	r3, r3, #10
 8002d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 0210 	bic.w	r2, r3, #16
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	031b      	lsls	r3, r3, #12
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 0307 	orr.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	021a      	lsls	r2, r3, #8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2201      	movs	r2, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	621a      	str	r2, [r3, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e050      	b.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed0:	d013      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a18      	ldr	r2, [pc, #96]	@ (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a16      	ldr	r2, [pc, #88]	@ (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a15      	ldr	r2, [pc, #84]	@ (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10c      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40014000 	.word	0x40014000

08002f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e042      	b.n	8003008 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd ff46 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	@ 0x24
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fdbd 	bl	8003b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	d175      	bne.n	800311c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Transmit+0x2c>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e06e      	b.n	800311e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2221      	movs	r2, #33	@ 0x21
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800304e:	f7fe f857 	bl	8001100 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003068:	d108      	bne.n	800307c <HAL_UART_Transmit+0x6c>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e003      	b.n	8003084 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003084:	e02e      	b.n	80030e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	@ 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fb1f 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e03a      	b.n	800311e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	3302      	adds	r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	e007      	b.n	80030d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	3301      	adds	r3, #1
 80030d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1cb      	bne.n	8003086 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2140      	movs	r1, #64	@ 0x40
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 faeb 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e006      	b.n	800311e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b20      	cmp	r3, #32
 800313e:	d112      	bne.n	8003166 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_UART_Receive_IT+0x26>
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e00b      	b.n	8003168 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	461a      	mov	r2, r3
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fb12 	bl	8003786 <UART_Start_Receive_IT>
 8003162:	4603      	mov	r3, r0
 8003164:	e000      	b.n	8003168 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
  }
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b0ba      	sub	sp, #232	@ 0xe8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10f      	bne.n	80031d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_UART_IRQHandler+0x66>
 80031c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fbf2 	bl	80039b8 <UART_Receive_IT>
      return;
 80031d4:	e25b      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80de 	beq.w	800339c <HAL_UART_IRQHandler+0x22c>
 80031e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d106      	bne.n	80031fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80d1 	beq.w	800339c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_UART_IRQHandler+0xae>
 8003206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800320a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f043 0201 	orr.w	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800321e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_UART_IRQHandler+0xd2>
 800322a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	f043 0202 	orr.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_UART_IRQHandler+0xf6>
 800324e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	f043 0204 	orr.w	r2, r3, #4
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d011      	beq.n	8003296 <HAL_UART_IRQHandler+0x126>
 8003272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800327e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f043 0208 	orr.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 81f2 	beq.w	8003684 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_UART_IRQHandler+0x14e>
 80032ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb7d 	bl	80039b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_UART_IRQHandler+0x17a>
 80032e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d04f      	beq.n	800338a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa85 	bl	80037fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	d141      	bne.n	8003382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3314      	adds	r3, #20
 8003304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800331c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3314      	adds	r3, #20
 8003326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800332a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800332e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1d9      	bne.n	80032fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d013      	beq.n	800337a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	4a7e      	ldr	r2, [pc, #504]	@ (8003550 <HAL_UART_IRQHandler+0x3e0>)
 8003358:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe f85b 	bl	800141a <HAL_DMA_Abort_IT>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800336e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003374:	4610      	mov	r0, r2
 8003376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e00e      	b.n	8003398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f994 	bl	80036a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	e00a      	b.n	8003398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f990 	bl	80036a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	e006      	b.n	8003398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f98c 	bl	80036a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003396:	e175      	b.n	8003684 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	bf00      	nop
    return;
 800339a:	e173      	b.n	8003684 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 814f 	bne.w	8003644 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8148 	beq.w	8003644 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8141 	beq.w	8003644 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e2:	2b40      	cmp	r3, #64	@ 0x40
 80033e4:	f040 80b6 	bne.w	8003554 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8145 	beq.w	8003688 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003406:	429a      	cmp	r2, r3
 8003408:	f080 813e 	bcs.w	8003688 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003412:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800341e:	f000 8088 	beq.w	8003532 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003438:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800343c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	330c      	adds	r3, #12
 800344a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800344e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800345a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1d9      	bne.n	8003422 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3314      	adds	r3, #20
 8003474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800347e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3314      	adds	r3, #20
 800348e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003492:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003496:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800349a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e1      	bne.n	800346e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3314      	adds	r3, #20
 80034b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e3      	bne.n	80034aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003502:	f023 0310 	bic.w	r3, r3, #16
 8003506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003514:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003516:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800351a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e3      	bne.n	80034f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd ff04 	bl	800133a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003540:	b29b      	uxth	r3, r3
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	b29b      	uxth	r3, r3
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8b7 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800354e:	e09b      	b.n	8003688 <HAL_UART_IRQHandler+0x518>
 8003550:	080038c1 	.word	0x080038c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800355c:	b29b      	uxth	r3, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 808e 	beq.w	800368c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8089 	beq.w	800368c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003590:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800359e:	647a      	str	r2, [r7, #68]	@ 0x44
 80035a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e3      	bne.n	800357a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3314      	adds	r3, #20
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	623b      	str	r3, [r7, #32]
   return(result);
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3314      	adds	r3, #20
 80035d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e3      	bne.n	80035b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	e853 3f00 	ldrex	r3, [r3]
 8003606:	60fb      	str	r3, [r7, #12]
   return(result);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0310 	bic.w	r3, r3, #16
 800360e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800361c:	61fa      	str	r2, [r7, #28]
 800361e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	69b9      	ldr	r1, [r7, #24]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	e841 2300 	strex	r3, r2, [r1]
 8003628:	617b      	str	r3, [r7, #20]
   return(result);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e3      	bne.n	80035f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f83d 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003642:	e023      	b.n	800368c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <HAL_UART_IRQHandler+0x4f4>
 8003650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f943 	bl	80038e8 <UART_Transmit_IT>
    return;
 8003662:	e014      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <HAL_UART_IRQHandler+0x51e>
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f983 	bl	8003988 <UART_EndTransmit_IT>
    return;
 8003682:	e004      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
    return;
 8003684:	bf00      	nop
 8003686:	e002      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
      return;
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
      return;
 800368c:	bf00      	nop
  }
}
 800368e:	37e8      	adds	r7, #232	@ 0xe8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e4:	e03b      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d037      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fd fd07 	bl	8001100 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <UART_WaitOnFlagUntilTimeout+0x30>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e03a      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b80      	cmp	r3, #128	@ 0x80
 800371a:	d020      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b40      	cmp	r3, #64	@ 0x40
 8003720:	d01d      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d116      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f857 	bl	80037fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2208      	movs	r2, #8
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	429a      	cmp	r2, r3
 800377a:	d0b4      	beq.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2222      	movs	r2, #34	@ 0x22
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0220 	orr.w	r2, r2, #32
 80037ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b095      	sub	sp, #84	@ 0x54
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003822:	643a      	str	r2, [r7, #64]	@ 0x40
 8003824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e5      	bne.n	8003802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3314      	adds	r3, #20
 800383c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	61fb      	str	r3, [r7, #28]
   return(result);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800385c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	2b01      	cmp	r3, #1
 8003870:	d119      	bne.n	80038a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	330c      	adds	r3, #12
 8003878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	60bb      	str	r3, [r7, #8]
   return(result);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f023 0310 	bic.w	r3, r3, #16
 8003888:	647b      	str	r3, [r7, #68]	@ 0x44
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003892:	61ba      	str	r2, [r7, #24]
 8003894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6979      	ldr	r1, [r7, #20]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	613b      	str	r3, [r7, #16]
   return(result);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e5      	bne.n	8003872 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038b4:	bf00      	nop
 80038b6:	3754      	adds	r7, #84	@ 0x54
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff fee4 	bl	80036a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b21      	cmp	r3, #33	@ 0x21
 80038fa:	d13e      	bne.n	800397a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003904:	d114      	bne.n	8003930 <UART_Transmit_IT+0x48>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d110      	bne.n	8003930 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003922:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	1c9a      	adds	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	e008      	b.n	8003942 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6211      	str	r1, [r2, #32]
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4619      	mov	r1, r3
 8003950:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003964:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003974:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800399e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fe73 	bl	8003694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	@ 0x30
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b22      	cmp	r3, #34	@ 0x22
 80039ca:	f040 80ae 	bne.w	8003b2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d6:	d117      	bne.n	8003a08 <UART_Receive_IT+0x50>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d113      	bne.n	8003a08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a06:	e026      	b.n	8003a56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	d007      	beq.n	8003a2c <UART_Receive_IT+0x74>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <UART_Receive_IT+0x82>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e008      	b.n	8003a4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4619      	mov	r1, r3
 8003a64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d15d      	bne.n	8003b26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0220 	bic.w	r2, r2, #32
 8003a78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d135      	bne.n	8003b1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f023 0310 	bic.w	r3, r3, #16
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad6:	623a      	str	r2, [r7, #32]
 8003ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	69f9      	ldr	r1, [r7, #28]
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d10a      	bne.n	8003b0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fdd1 	bl	80036bc <HAL_UARTEx_RxEventCallback>
 8003b1a:	e002      	b.n	8003b22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7fd f815 	bl	8000b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e002      	b.n	8003b2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3730      	adds	r7, #48	@ 0x30
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b38:	b0c0      	sub	sp, #256	@ 0x100
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	68d9      	ldr	r1, [r3, #12]
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	ea40 0301 	orr.w	r3, r0, r1
 8003b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b8c:	f021 010c 	bic.w	r1, r1, #12
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bae:	6999      	ldr	r1, [r3, #24]
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	ea40 0301 	orr.w	r3, r0, r1
 8003bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e00 <UART_SetConfig+0x2cc>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d005      	beq.n	8003bd4 <UART_SetConfig+0xa0>
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b8d      	ldr	r3, [pc, #564]	@ (8003e04 <UART_SetConfig+0x2d0>)
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d104      	bne.n	8003bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bd4:	f7fe fa0c 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bdc:	e003      	b.n	8003be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bde:	f7fe f9f3 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8003be2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bf0:	f040 810c 	bne.w	8003e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c06:	4622      	mov	r2, r4
 8003c08:	462b      	mov	r3, r5
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c16:	4621      	mov	r1, r4
 8003c18:	eb12 0801 	adds.w	r8, r2, r1
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	eb43 0901 	adc.w	r9, r3, r1
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c36:	4690      	mov	r8, r2
 8003c38:	4699      	mov	r9, r3
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	eb18 0303 	adds.w	r3, r8, r3
 8003c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c44:	462b      	mov	r3, r5
 8003c46:	eb49 0303 	adc.w	r3, r9, r3
 8003c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c62:	460b      	mov	r3, r1
 8003c64:	18db      	adds	r3, r3, r3
 8003c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c68:	4613      	mov	r3, r2
 8003c6a:	eb42 0303 	adc.w	r3, r2, r3
 8003c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c78:	f7fc fb02 	bl	8000280 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b61      	ldr	r3, [pc, #388]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	011c      	lsls	r4, r3, #4
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cac:	4641      	mov	r1, r8
 8003cae:	eb12 0a01 	adds.w	sl, r2, r1
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ccc:	4692      	mov	sl, r2
 8003cce:	469b      	mov	fp, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8003cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	18db      	adds	r3, r3, r3
 8003cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cfe:	4613      	mov	r3, r2
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d0e:	f7fc fab7 	bl	8000280 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2264      	movs	r2, #100	@ 0x64
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	1acb      	subs	r3, r1, r3
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d2e:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003d30:	fba3 2302 	umull	r2, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d3c:	441c      	add	r4, r3
 8003d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	1891      	adds	r1, r2, r2
 8003d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d58:	415b      	adcs	r3, r3
 8003d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d60:	4641      	mov	r1, r8
 8003d62:	1851      	adds	r1, r2, r1
 8003d64:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d66:	4649      	mov	r1, r9
 8003d68:	414b      	adcs	r3, r1
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d78:	4659      	mov	r1, fp
 8003d7a:	00cb      	lsls	r3, r1, #3
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d82:	4651      	mov	r1, sl
 8003d84:	00ca      	lsls	r2, r1, #3
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d94:	464b      	mov	r3, r9
 8003d96:	460a      	mov	r2, r1
 8003d98:	eb42 0303 	adc.w	r3, r2, r3
 8003d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003db4:	460b      	mov	r3, r1
 8003db6:	18db      	adds	r3, r3, r3
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dba:	4613      	mov	r3, r2
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dca:	f7fc fa59 	bl	8000280 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	2164      	movs	r1, #100	@ 0x64
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	3332      	adds	r3, #50	@ 0x32
 8003de6:	4a08      	ldr	r2, [pc, #32]	@ (8003e08 <UART_SetConfig+0x2d4>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	f003 0207 	and.w	r2, r3, #7
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4422      	add	r2, r4
 8003dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dfc:	e106      	b.n	800400c <UART_SetConfig+0x4d8>
 8003dfe:	bf00      	nop
 8003e00:	40011000 	.word	0x40011000
 8003e04:	40011400 	.word	0x40011400
 8003e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e1e:	4642      	mov	r2, r8
 8003e20:	464b      	mov	r3, r9
 8003e22:	1891      	adds	r1, r2, r2
 8003e24:	6239      	str	r1, [r7, #32]
 8003e26:	415b      	adcs	r3, r3
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e2e:	4641      	mov	r1, r8
 8003e30:	1854      	adds	r4, r2, r1
 8003e32:	4649      	mov	r1, r9
 8003e34:	eb43 0501 	adc.w	r5, r3, r1
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	00eb      	lsls	r3, r5, #3
 8003e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e46:	00e2      	lsls	r2, r4, #3
 8003e48:	4614      	mov	r4, r2
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	4643      	mov	r3, r8
 8003e4e:	18e3      	adds	r3, r4, r3
 8003e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e54:	464b      	mov	r3, r9
 8003e56:	eb45 0303 	adc.w	r3, r5, r3
 8003e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	008b      	lsls	r3, r1, #2
 8003e7e:	4621      	mov	r1, r4
 8003e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e84:	4621      	mov	r1, r4
 8003e86:	008a      	lsls	r2, r1, #2
 8003e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e8c:	f7fc f9f8 	bl	8000280 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4b60      	ldr	r3, [pc, #384]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003e96:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	011c      	lsls	r4, r3, #4
 8003e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	61b9      	str	r1, [r7, #24]
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	1851      	adds	r1, r2, r1
 8003ec4:	6139      	str	r1, [r7, #16]
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	414b      	adcs	r3, r1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ed8:	4659      	mov	r1, fp
 8003eda:	00cb      	lsls	r3, r1, #3
 8003edc:	4651      	mov	r1, sl
 8003ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	00ca      	lsls	r2, r1, #3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	4642      	mov	r2, r8
 8003eee:	189b      	adds	r3, r3, r2
 8003ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	eb42 0303 	adc.w	r3, r2, r3
 8003efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f18:	4649      	mov	r1, r9
 8003f1a:	008b      	lsls	r3, r1, #2
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f22:	4641      	mov	r1, r8
 8003f24:	008a      	lsls	r2, r1, #2
 8003f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f2a:	f7fc f9a9 	bl	8000280 <__aeabi_uldivmod>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	4b38      	ldr	r3, [pc, #224]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003f36:	fba3 2301 	umull	r2, r3, r3, r1
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2264      	movs	r2, #100	@ 0x64
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	1acb      	subs	r3, r1, r3
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	3332      	adds	r3, #50	@ 0x32
 8003f48:	4a33      	ldr	r2, [pc, #204]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f54:	441c      	add	r4, r3
 8003f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f74:	4641      	mov	r1, r8
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6039      	str	r1, [r7, #0]
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	00cb      	lsls	r3, r1, #3
 8003f90:	4651      	mov	r1, sl
 8003f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f96:	4651      	mov	r1, sl
 8003f98:	00ca      	lsls	r2, r1, #3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	460a      	mov	r2, r1
 8003faa:	eb42 0303 	adc.w	r3, r2, r3
 8003fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fba:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fc8:	4649      	mov	r1, r9
 8003fca:	008b      	lsls	r3, r1, #2
 8003fcc:	4641      	mov	r1, r8
 8003fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	008a      	lsls	r2, r1, #2
 8003fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fda:	f7fc f951 	bl	8000280 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	@ 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	3332      	adds	r3, #50	@ 0x32
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <UART_SetConfig+0x4e4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 020f 	and.w	r2, r3, #15
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4422      	add	r2, r4
 800400a:	609a      	str	r2, [r3, #8]
}
 800400c:	bf00      	nop
 800400e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004012:	46bd      	mov	sp, r7
 8004014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004018:	51eb851f 	.word	0x51eb851f

0800401c <_strtoul_l.isra.0>:
 800401c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004020:	4e34      	ldr	r6, [pc, #208]	@ (80040f4 <_strtoul_l.isra.0+0xd8>)
 8004022:	4686      	mov	lr, r0
 8004024:	460d      	mov	r5, r1
 8004026:	4628      	mov	r0, r5
 8004028:	f815 4b01 	ldrb.w	r4, [r5], #1
 800402c:	5d37      	ldrb	r7, [r6, r4]
 800402e:	f017 0708 	ands.w	r7, r7, #8
 8004032:	d1f8      	bne.n	8004026 <_strtoul_l.isra.0+0xa>
 8004034:	2c2d      	cmp	r4, #45	@ 0x2d
 8004036:	d110      	bne.n	800405a <_strtoul_l.isra.0+0x3e>
 8004038:	782c      	ldrb	r4, [r5, #0]
 800403a:	2701      	movs	r7, #1
 800403c:	1c85      	adds	r5, r0, #2
 800403e:	f033 0010 	bics.w	r0, r3, #16
 8004042:	d115      	bne.n	8004070 <_strtoul_l.isra.0+0x54>
 8004044:	2c30      	cmp	r4, #48	@ 0x30
 8004046:	d10d      	bne.n	8004064 <_strtoul_l.isra.0+0x48>
 8004048:	7828      	ldrb	r0, [r5, #0]
 800404a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800404e:	2858      	cmp	r0, #88	@ 0x58
 8004050:	d108      	bne.n	8004064 <_strtoul_l.isra.0+0x48>
 8004052:	786c      	ldrb	r4, [r5, #1]
 8004054:	3502      	adds	r5, #2
 8004056:	2310      	movs	r3, #16
 8004058:	e00a      	b.n	8004070 <_strtoul_l.isra.0+0x54>
 800405a:	2c2b      	cmp	r4, #43	@ 0x2b
 800405c:	bf04      	itt	eq
 800405e:	782c      	ldrbeq	r4, [r5, #0]
 8004060:	1c85      	addeq	r5, r0, #2
 8004062:	e7ec      	b.n	800403e <_strtoul_l.isra.0+0x22>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f6      	bne.n	8004056 <_strtoul_l.isra.0+0x3a>
 8004068:	2c30      	cmp	r4, #48	@ 0x30
 800406a:	bf14      	ite	ne
 800406c:	230a      	movne	r3, #10
 800406e:	2308      	moveq	r3, #8
 8004070:	f04f 38ff 	mov.w	r8, #4294967295
 8004074:	2600      	movs	r6, #0
 8004076:	fbb8 f8f3 	udiv	r8, r8, r3
 800407a:	fb03 f908 	mul.w	r9, r3, r8
 800407e:	ea6f 0909 	mvn.w	r9, r9
 8004082:	4630      	mov	r0, r6
 8004084:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004088:	f1bc 0f09 	cmp.w	ip, #9
 800408c:	d810      	bhi.n	80040b0 <_strtoul_l.isra.0+0x94>
 800408e:	4664      	mov	r4, ip
 8004090:	42a3      	cmp	r3, r4
 8004092:	dd1e      	ble.n	80040d2 <_strtoul_l.isra.0+0xb6>
 8004094:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004098:	d007      	beq.n	80040aa <_strtoul_l.isra.0+0x8e>
 800409a:	4580      	cmp	r8, r0
 800409c:	d316      	bcc.n	80040cc <_strtoul_l.isra.0+0xb0>
 800409e:	d101      	bne.n	80040a4 <_strtoul_l.isra.0+0x88>
 80040a0:	45a1      	cmp	r9, r4
 80040a2:	db13      	blt.n	80040cc <_strtoul_l.isra.0+0xb0>
 80040a4:	fb00 4003 	mla	r0, r0, r3, r4
 80040a8:	2601      	movs	r6, #1
 80040aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040ae:	e7e9      	b.n	8004084 <_strtoul_l.isra.0+0x68>
 80040b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80040b4:	f1bc 0f19 	cmp.w	ip, #25
 80040b8:	d801      	bhi.n	80040be <_strtoul_l.isra.0+0xa2>
 80040ba:	3c37      	subs	r4, #55	@ 0x37
 80040bc:	e7e8      	b.n	8004090 <_strtoul_l.isra.0+0x74>
 80040be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80040c2:	f1bc 0f19 	cmp.w	ip, #25
 80040c6:	d804      	bhi.n	80040d2 <_strtoul_l.isra.0+0xb6>
 80040c8:	3c57      	subs	r4, #87	@ 0x57
 80040ca:	e7e1      	b.n	8004090 <_strtoul_l.isra.0+0x74>
 80040cc:	f04f 36ff 	mov.w	r6, #4294967295
 80040d0:	e7eb      	b.n	80040aa <_strtoul_l.isra.0+0x8e>
 80040d2:	1c73      	adds	r3, r6, #1
 80040d4:	d106      	bne.n	80040e4 <_strtoul_l.isra.0+0xc8>
 80040d6:	2322      	movs	r3, #34	@ 0x22
 80040d8:	f8ce 3000 	str.w	r3, [lr]
 80040dc:	4630      	mov	r0, r6
 80040de:	b932      	cbnz	r2, 80040ee <_strtoul_l.isra.0+0xd2>
 80040e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040e4:	b107      	cbz	r7, 80040e8 <_strtoul_l.isra.0+0xcc>
 80040e6:	4240      	negs	r0, r0
 80040e8:	2a00      	cmp	r2, #0
 80040ea:	d0f9      	beq.n	80040e0 <_strtoul_l.isra.0+0xc4>
 80040ec:	b106      	cbz	r6, 80040f0 <_strtoul_l.isra.0+0xd4>
 80040ee:	1e69      	subs	r1, r5, #1
 80040f0:	6011      	str	r1, [r2, #0]
 80040f2:	e7f5      	b.n	80040e0 <_strtoul_l.isra.0+0xc4>
 80040f4:	08004b5d 	.word	0x08004b5d

080040f8 <strtoul>:
 80040f8:	4613      	mov	r3, r2
 80040fa:	460a      	mov	r2, r1
 80040fc:	4601      	mov	r1, r0
 80040fe:	4802      	ldr	r0, [pc, #8]	@ (8004108 <strtoul+0x10>)
 8004100:	6800      	ldr	r0, [r0, #0]
 8004102:	f7ff bf8b 	b.w	800401c <_strtoul_l.isra.0>
 8004106:	bf00      	nop
 8004108:	2000000c 	.word	0x2000000c

0800410c <sniprintf>:
 800410c:	b40c      	push	{r2, r3}
 800410e:	b530      	push	{r4, r5, lr}
 8004110:	4b18      	ldr	r3, [pc, #96]	@ (8004174 <sniprintf+0x68>)
 8004112:	1e0c      	subs	r4, r1, #0
 8004114:	681d      	ldr	r5, [r3, #0]
 8004116:	b09d      	sub	sp, #116	@ 0x74
 8004118:	da08      	bge.n	800412c <sniprintf+0x20>
 800411a:	238b      	movs	r3, #139	@ 0x8b
 800411c:	602b      	str	r3, [r5, #0]
 800411e:	f04f 30ff 	mov.w	r0, #4294967295
 8004122:	b01d      	add	sp, #116	@ 0x74
 8004124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004128:	b002      	add	sp, #8
 800412a:	4770      	bx	lr
 800412c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004130:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	931b      	str	r3, [sp, #108]	@ 0x6c
 800413a:	bf14      	ite	ne
 800413c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004140:	4623      	moveq	r3, r4
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	9307      	str	r3, [sp, #28]
 8004146:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800414a:	9002      	str	r0, [sp, #8]
 800414c:	9006      	str	r0, [sp, #24]
 800414e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004152:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004154:	ab21      	add	r3, sp, #132	@ 0x84
 8004156:	a902      	add	r1, sp, #8
 8004158:	4628      	mov	r0, r5
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	f000 f994 	bl	8004488 <_svfiprintf_r>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	bfbc      	itt	lt
 8004164:	238b      	movlt	r3, #139	@ 0x8b
 8004166:	602b      	strlt	r3, [r5, #0]
 8004168:	2c00      	cmp	r4, #0
 800416a:	d0da      	beq.n	8004122 <sniprintf+0x16>
 800416c:	9b02      	ldr	r3, [sp, #8]
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e7d6      	b.n	8004122 <sniprintf+0x16>
 8004174:	2000000c 	.word	0x2000000c

08004178 <memset>:
 8004178:	4402      	add	r2, r0
 800417a:	4603      	mov	r3, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	f803 1b01 	strb.w	r1, [r3], #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <__errno>:
 8004188:	4b01      	ldr	r3, [pc, #4]	@ (8004190 <__errno+0x8>)
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	2000000c 	.word	0x2000000c

08004194 <__libc_init_array>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4d0d      	ldr	r5, [pc, #52]	@ (80041cc <__libc_init_array+0x38>)
 8004198:	4c0d      	ldr	r4, [pc, #52]	@ (80041d0 <__libc_init_array+0x3c>)
 800419a:	1b64      	subs	r4, r4, r5
 800419c:	10a4      	asrs	r4, r4, #2
 800419e:	2600      	movs	r6, #0
 80041a0:	42a6      	cmp	r6, r4
 80041a2:	d109      	bne.n	80041b8 <__libc_init_array+0x24>
 80041a4:	4d0b      	ldr	r5, [pc, #44]	@ (80041d4 <__libc_init_array+0x40>)
 80041a6:	4c0c      	ldr	r4, [pc, #48]	@ (80041d8 <__libc_init_array+0x44>)
 80041a8:	f000 fc64 	bl	8004a74 <_init>
 80041ac:	1b64      	subs	r4, r4, r5
 80041ae:	10a4      	asrs	r4, r4, #2
 80041b0:	2600      	movs	r6, #0
 80041b2:	42a6      	cmp	r6, r4
 80041b4:	d105      	bne.n	80041c2 <__libc_init_array+0x2e>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041bc:	4798      	blx	r3
 80041be:	3601      	adds	r6, #1
 80041c0:	e7ee      	b.n	80041a0 <__libc_init_array+0xc>
 80041c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c6:	4798      	blx	r3
 80041c8:	3601      	adds	r6, #1
 80041ca:	e7f2      	b.n	80041b2 <__libc_init_array+0x1e>
 80041cc:	08004c98 	.word	0x08004c98
 80041d0:	08004c98 	.word	0x08004c98
 80041d4:	08004c98 	.word	0x08004c98
 80041d8:	08004c9c 	.word	0x08004c9c

080041dc <__retarget_lock_acquire_recursive>:
 80041dc:	4770      	bx	lr

080041de <__retarget_lock_release_recursive>:
 80041de:	4770      	bx	lr

080041e0 <_free_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4605      	mov	r5, r0
 80041e4:	2900      	cmp	r1, #0
 80041e6:	d041      	beq.n	800426c <_free_r+0x8c>
 80041e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ec:	1f0c      	subs	r4, r1, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bfb8      	it	lt
 80041f2:	18e4      	addlt	r4, r4, r3
 80041f4:	f000 f8e0 	bl	80043b8 <__malloc_lock>
 80041f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004270 <_free_r+0x90>)
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	b933      	cbnz	r3, 800420c <_free_r+0x2c>
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	6014      	str	r4, [r2, #0]
 8004202:	4628      	mov	r0, r5
 8004204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004208:	f000 b8dc 	b.w	80043c4 <__malloc_unlock>
 800420c:	42a3      	cmp	r3, r4
 800420e:	d908      	bls.n	8004222 <_free_r+0x42>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	1821      	adds	r1, r4, r0
 8004214:	428b      	cmp	r3, r1
 8004216:	bf01      	itttt	eq
 8004218:	6819      	ldreq	r1, [r3, #0]
 800421a:	685b      	ldreq	r3, [r3, #4]
 800421c:	1809      	addeq	r1, r1, r0
 800421e:	6021      	streq	r1, [r4, #0]
 8004220:	e7ed      	b.n	80041fe <_free_r+0x1e>
 8004222:	461a      	mov	r2, r3
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	b10b      	cbz	r3, 800422c <_free_r+0x4c>
 8004228:	42a3      	cmp	r3, r4
 800422a:	d9fa      	bls.n	8004222 <_free_r+0x42>
 800422c:	6811      	ldr	r1, [r2, #0]
 800422e:	1850      	adds	r0, r2, r1
 8004230:	42a0      	cmp	r0, r4
 8004232:	d10b      	bne.n	800424c <_free_r+0x6c>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	4401      	add	r1, r0
 8004238:	1850      	adds	r0, r2, r1
 800423a:	4283      	cmp	r3, r0
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	d1e0      	bne.n	8004202 <_free_r+0x22>
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	6053      	str	r3, [r2, #4]
 8004246:	4408      	add	r0, r1
 8004248:	6010      	str	r0, [r2, #0]
 800424a:	e7da      	b.n	8004202 <_free_r+0x22>
 800424c:	d902      	bls.n	8004254 <_free_r+0x74>
 800424e:	230c      	movs	r3, #12
 8004250:	602b      	str	r3, [r5, #0]
 8004252:	e7d6      	b.n	8004202 <_free_r+0x22>
 8004254:	6820      	ldr	r0, [r4, #0]
 8004256:	1821      	adds	r1, r4, r0
 8004258:	428b      	cmp	r3, r1
 800425a:	bf04      	itt	eq
 800425c:	6819      	ldreq	r1, [r3, #0]
 800425e:	685b      	ldreq	r3, [r3, #4]
 8004260:	6063      	str	r3, [r4, #4]
 8004262:	bf04      	itt	eq
 8004264:	1809      	addeq	r1, r1, r0
 8004266:	6021      	streq	r1, [r4, #0]
 8004268:	6054      	str	r4, [r2, #4]
 800426a:	e7ca      	b.n	8004202 <_free_r+0x22>
 800426c:	bd38      	pop	{r3, r4, r5, pc}
 800426e:	bf00      	nop
 8004270:	2000029c 	.word	0x2000029c

08004274 <sbrk_aligned>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	4e0f      	ldr	r6, [pc, #60]	@ (80042b4 <sbrk_aligned+0x40>)
 8004278:	460c      	mov	r4, r1
 800427a:	6831      	ldr	r1, [r6, #0]
 800427c:	4605      	mov	r5, r0
 800427e:	b911      	cbnz	r1, 8004286 <sbrk_aligned+0x12>
 8004280:	f000 fba4 	bl	80049cc <_sbrk_r>
 8004284:	6030      	str	r0, [r6, #0]
 8004286:	4621      	mov	r1, r4
 8004288:	4628      	mov	r0, r5
 800428a:	f000 fb9f 	bl	80049cc <_sbrk_r>
 800428e:	1c43      	adds	r3, r0, #1
 8004290:	d103      	bne.n	800429a <sbrk_aligned+0x26>
 8004292:	f04f 34ff 	mov.w	r4, #4294967295
 8004296:	4620      	mov	r0, r4
 8004298:	bd70      	pop	{r4, r5, r6, pc}
 800429a:	1cc4      	adds	r4, r0, #3
 800429c:	f024 0403 	bic.w	r4, r4, #3
 80042a0:	42a0      	cmp	r0, r4
 80042a2:	d0f8      	beq.n	8004296 <sbrk_aligned+0x22>
 80042a4:	1a21      	subs	r1, r4, r0
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 fb90 	bl	80049cc <_sbrk_r>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d1f2      	bne.n	8004296 <sbrk_aligned+0x22>
 80042b0:	e7ef      	b.n	8004292 <sbrk_aligned+0x1e>
 80042b2:	bf00      	nop
 80042b4:	20000298 	.word	0x20000298

080042b8 <_malloc_r>:
 80042b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042bc:	1ccd      	adds	r5, r1, #3
 80042be:	f025 0503 	bic.w	r5, r5, #3
 80042c2:	3508      	adds	r5, #8
 80042c4:	2d0c      	cmp	r5, #12
 80042c6:	bf38      	it	cc
 80042c8:	250c      	movcc	r5, #12
 80042ca:	2d00      	cmp	r5, #0
 80042cc:	4606      	mov	r6, r0
 80042ce:	db01      	blt.n	80042d4 <_malloc_r+0x1c>
 80042d0:	42a9      	cmp	r1, r5
 80042d2:	d904      	bls.n	80042de <_malloc_r+0x26>
 80042d4:	230c      	movs	r3, #12
 80042d6:	6033      	str	r3, [r6, #0]
 80042d8:	2000      	movs	r0, #0
 80042da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043b4 <_malloc_r+0xfc>
 80042e2:	f000 f869 	bl	80043b8 <__malloc_lock>
 80042e6:	f8d8 3000 	ldr.w	r3, [r8]
 80042ea:	461c      	mov	r4, r3
 80042ec:	bb44      	cbnz	r4, 8004340 <_malloc_r+0x88>
 80042ee:	4629      	mov	r1, r5
 80042f0:	4630      	mov	r0, r6
 80042f2:	f7ff ffbf 	bl	8004274 <sbrk_aligned>
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	4604      	mov	r4, r0
 80042fa:	d158      	bne.n	80043ae <_malloc_r+0xf6>
 80042fc:	f8d8 4000 	ldr.w	r4, [r8]
 8004300:	4627      	mov	r7, r4
 8004302:	2f00      	cmp	r7, #0
 8004304:	d143      	bne.n	800438e <_malloc_r+0xd6>
 8004306:	2c00      	cmp	r4, #0
 8004308:	d04b      	beq.n	80043a2 <_malloc_r+0xea>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	4639      	mov	r1, r7
 800430e:	4630      	mov	r0, r6
 8004310:	eb04 0903 	add.w	r9, r4, r3
 8004314:	f000 fb5a 	bl	80049cc <_sbrk_r>
 8004318:	4581      	cmp	r9, r0
 800431a:	d142      	bne.n	80043a2 <_malloc_r+0xea>
 800431c:	6821      	ldr	r1, [r4, #0]
 800431e:	1a6d      	subs	r5, r5, r1
 8004320:	4629      	mov	r1, r5
 8004322:	4630      	mov	r0, r6
 8004324:	f7ff ffa6 	bl	8004274 <sbrk_aligned>
 8004328:	3001      	adds	r0, #1
 800432a:	d03a      	beq.n	80043a2 <_malloc_r+0xea>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	442b      	add	r3, r5
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	f8d8 3000 	ldr.w	r3, [r8]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	bb62      	cbnz	r2, 8004394 <_malloc_r+0xdc>
 800433a:	f8c8 7000 	str.w	r7, [r8]
 800433e:	e00f      	b.n	8004360 <_malloc_r+0xa8>
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	1b52      	subs	r2, r2, r5
 8004344:	d420      	bmi.n	8004388 <_malloc_r+0xd0>
 8004346:	2a0b      	cmp	r2, #11
 8004348:	d917      	bls.n	800437a <_malloc_r+0xc2>
 800434a:	1961      	adds	r1, r4, r5
 800434c:	42a3      	cmp	r3, r4
 800434e:	6025      	str	r5, [r4, #0]
 8004350:	bf18      	it	ne
 8004352:	6059      	strne	r1, [r3, #4]
 8004354:	6863      	ldr	r3, [r4, #4]
 8004356:	bf08      	it	eq
 8004358:	f8c8 1000 	streq.w	r1, [r8]
 800435c:	5162      	str	r2, [r4, r5]
 800435e:	604b      	str	r3, [r1, #4]
 8004360:	4630      	mov	r0, r6
 8004362:	f000 f82f 	bl	80043c4 <__malloc_unlock>
 8004366:	f104 000b 	add.w	r0, r4, #11
 800436a:	1d23      	adds	r3, r4, #4
 800436c:	f020 0007 	bic.w	r0, r0, #7
 8004370:	1ac2      	subs	r2, r0, r3
 8004372:	bf1c      	itt	ne
 8004374:	1a1b      	subne	r3, r3, r0
 8004376:	50a3      	strne	r3, [r4, r2]
 8004378:	e7af      	b.n	80042da <_malloc_r+0x22>
 800437a:	6862      	ldr	r2, [r4, #4]
 800437c:	42a3      	cmp	r3, r4
 800437e:	bf0c      	ite	eq
 8004380:	f8c8 2000 	streq.w	r2, [r8]
 8004384:	605a      	strne	r2, [r3, #4]
 8004386:	e7eb      	b.n	8004360 <_malloc_r+0xa8>
 8004388:	4623      	mov	r3, r4
 800438a:	6864      	ldr	r4, [r4, #4]
 800438c:	e7ae      	b.n	80042ec <_malloc_r+0x34>
 800438e:	463c      	mov	r4, r7
 8004390:	687f      	ldr	r7, [r7, #4]
 8004392:	e7b6      	b.n	8004302 <_malloc_r+0x4a>
 8004394:	461a      	mov	r2, r3
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	42a3      	cmp	r3, r4
 800439a:	d1fb      	bne.n	8004394 <_malloc_r+0xdc>
 800439c:	2300      	movs	r3, #0
 800439e:	6053      	str	r3, [r2, #4]
 80043a0:	e7de      	b.n	8004360 <_malloc_r+0xa8>
 80043a2:	230c      	movs	r3, #12
 80043a4:	6033      	str	r3, [r6, #0]
 80043a6:	4630      	mov	r0, r6
 80043a8:	f000 f80c 	bl	80043c4 <__malloc_unlock>
 80043ac:	e794      	b.n	80042d8 <_malloc_r+0x20>
 80043ae:	6005      	str	r5, [r0, #0]
 80043b0:	e7d6      	b.n	8004360 <_malloc_r+0xa8>
 80043b2:	bf00      	nop
 80043b4:	2000029c 	.word	0x2000029c

080043b8 <__malloc_lock>:
 80043b8:	4801      	ldr	r0, [pc, #4]	@ (80043c0 <__malloc_lock+0x8>)
 80043ba:	f7ff bf0f 	b.w	80041dc <__retarget_lock_acquire_recursive>
 80043be:	bf00      	nop
 80043c0:	20000294 	.word	0x20000294

080043c4 <__malloc_unlock>:
 80043c4:	4801      	ldr	r0, [pc, #4]	@ (80043cc <__malloc_unlock+0x8>)
 80043c6:	f7ff bf0a 	b.w	80041de <__retarget_lock_release_recursive>
 80043ca:	bf00      	nop
 80043cc:	20000294 	.word	0x20000294

080043d0 <__ssputs_r>:
 80043d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d4:	688e      	ldr	r6, [r1, #8]
 80043d6:	461f      	mov	r7, r3
 80043d8:	42be      	cmp	r6, r7
 80043da:	680b      	ldr	r3, [r1, #0]
 80043dc:	4682      	mov	sl, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	4690      	mov	r8, r2
 80043e2:	d82d      	bhi.n	8004440 <__ssputs_r+0x70>
 80043e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043ec:	d026      	beq.n	800443c <__ssputs_r+0x6c>
 80043ee:	6965      	ldr	r5, [r4, #20]
 80043f0:	6909      	ldr	r1, [r1, #16]
 80043f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043f6:	eba3 0901 	sub.w	r9, r3, r1
 80043fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043fe:	1c7b      	adds	r3, r7, #1
 8004400:	444b      	add	r3, r9
 8004402:	106d      	asrs	r5, r5, #1
 8004404:	429d      	cmp	r5, r3
 8004406:	bf38      	it	cc
 8004408:	461d      	movcc	r5, r3
 800440a:	0553      	lsls	r3, r2, #21
 800440c:	d527      	bpl.n	800445e <__ssputs_r+0x8e>
 800440e:	4629      	mov	r1, r5
 8004410:	f7ff ff52 	bl	80042b8 <_malloc_r>
 8004414:	4606      	mov	r6, r0
 8004416:	b360      	cbz	r0, 8004472 <__ssputs_r+0xa2>
 8004418:	6921      	ldr	r1, [r4, #16]
 800441a:	464a      	mov	r2, r9
 800441c:	f000 fae6 	bl	80049ec <memcpy>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	6126      	str	r6, [r4, #16]
 800442e:	6165      	str	r5, [r4, #20]
 8004430:	444e      	add	r6, r9
 8004432:	eba5 0509 	sub.w	r5, r5, r9
 8004436:	6026      	str	r6, [r4, #0]
 8004438:	60a5      	str	r5, [r4, #8]
 800443a:	463e      	mov	r6, r7
 800443c:	42be      	cmp	r6, r7
 800443e:	d900      	bls.n	8004442 <__ssputs_r+0x72>
 8004440:	463e      	mov	r6, r7
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	4632      	mov	r2, r6
 8004446:	4641      	mov	r1, r8
 8004448:	f000 faa6 	bl	8004998 <memmove>
 800444c:	68a3      	ldr	r3, [r4, #8]
 800444e:	1b9b      	subs	r3, r3, r6
 8004450:	60a3      	str	r3, [r4, #8]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	4433      	add	r3, r6
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	2000      	movs	r0, #0
 800445a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445e:	462a      	mov	r2, r5
 8004460:	f000 fad2 	bl	8004a08 <_realloc_r>
 8004464:	4606      	mov	r6, r0
 8004466:	2800      	cmp	r0, #0
 8004468:	d1e0      	bne.n	800442c <__ssputs_r+0x5c>
 800446a:	6921      	ldr	r1, [r4, #16]
 800446c:	4650      	mov	r0, sl
 800446e:	f7ff feb7 	bl	80041e0 <_free_r>
 8004472:	230c      	movs	r3, #12
 8004474:	f8ca 3000 	str.w	r3, [sl]
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	e7e9      	b.n	800445a <__ssputs_r+0x8a>
	...

08004488 <_svfiprintf_r>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	4698      	mov	r8, r3
 800448e:	898b      	ldrh	r3, [r1, #12]
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	b09d      	sub	sp, #116	@ 0x74
 8004494:	4607      	mov	r7, r0
 8004496:	460d      	mov	r5, r1
 8004498:	4614      	mov	r4, r2
 800449a:	d510      	bpl.n	80044be <_svfiprintf_r+0x36>
 800449c:	690b      	ldr	r3, [r1, #16]
 800449e:	b973      	cbnz	r3, 80044be <_svfiprintf_r+0x36>
 80044a0:	2140      	movs	r1, #64	@ 0x40
 80044a2:	f7ff ff09 	bl	80042b8 <_malloc_r>
 80044a6:	6028      	str	r0, [r5, #0]
 80044a8:	6128      	str	r0, [r5, #16]
 80044aa:	b930      	cbnz	r0, 80044ba <_svfiprintf_r+0x32>
 80044ac:	230c      	movs	r3, #12
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	b01d      	add	sp, #116	@ 0x74
 80044b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ba:	2340      	movs	r3, #64	@ 0x40
 80044bc:	616b      	str	r3, [r5, #20]
 80044be:	2300      	movs	r3, #0
 80044c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80044c2:	2320      	movs	r3, #32
 80044c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044cc:	2330      	movs	r3, #48	@ 0x30
 80044ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800466c <_svfiprintf_r+0x1e4>
 80044d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044d6:	f04f 0901 	mov.w	r9, #1
 80044da:	4623      	mov	r3, r4
 80044dc:	469a      	mov	sl, r3
 80044de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044e2:	b10a      	cbz	r2, 80044e8 <_svfiprintf_r+0x60>
 80044e4:	2a25      	cmp	r2, #37	@ 0x25
 80044e6:	d1f9      	bne.n	80044dc <_svfiprintf_r+0x54>
 80044e8:	ebba 0b04 	subs.w	fp, sl, r4
 80044ec:	d00b      	beq.n	8004506 <_svfiprintf_r+0x7e>
 80044ee:	465b      	mov	r3, fp
 80044f0:	4622      	mov	r2, r4
 80044f2:	4629      	mov	r1, r5
 80044f4:	4638      	mov	r0, r7
 80044f6:	f7ff ff6b 	bl	80043d0 <__ssputs_r>
 80044fa:	3001      	adds	r0, #1
 80044fc:	f000 80a7 	beq.w	800464e <_svfiprintf_r+0x1c6>
 8004500:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004502:	445a      	add	r2, fp
 8004504:	9209      	str	r2, [sp, #36]	@ 0x24
 8004506:	f89a 3000 	ldrb.w	r3, [sl]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 809f 	beq.w	800464e <_svfiprintf_r+0x1c6>
 8004510:	2300      	movs	r3, #0
 8004512:	f04f 32ff 	mov.w	r2, #4294967295
 8004516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800451a:	f10a 0a01 	add.w	sl, sl, #1
 800451e:	9304      	str	r3, [sp, #16]
 8004520:	9307      	str	r3, [sp, #28]
 8004522:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004526:	931a      	str	r3, [sp, #104]	@ 0x68
 8004528:	4654      	mov	r4, sl
 800452a:	2205      	movs	r2, #5
 800452c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004530:	484e      	ldr	r0, [pc, #312]	@ (800466c <_svfiprintf_r+0x1e4>)
 8004532:	f7fb fe55 	bl	80001e0 <memchr>
 8004536:	9a04      	ldr	r2, [sp, #16]
 8004538:	b9d8      	cbnz	r0, 8004572 <_svfiprintf_r+0xea>
 800453a:	06d0      	lsls	r0, r2, #27
 800453c:	bf44      	itt	mi
 800453e:	2320      	movmi	r3, #32
 8004540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004544:	0711      	lsls	r1, r2, #28
 8004546:	bf44      	itt	mi
 8004548:	232b      	movmi	r3, #43	@ 0x2b
 800454a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800454e:	f89a 3000 	ldrb.w	r3, [sl]
 8004552:	2b2a      	cmp	r3, #42	@ 0x2a
 8004554:	d015      	beq.n	8004582 <_svfiprintf_r+0xfa>
 8004556:	9a07      	ldr	r2, [sp, #28]
 8004558:	4654      	mov	r4, sl
 800455a:	2000      	movs	r0, #0
 800455c:	f04f 0c0a 	mov.w	ip, #10
 8004560:	4621      	mov	r1, r4
 8004562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004566:	3b30      	subs	r3, #48	@ 0x30
 8004568:	2b09      	cmp	r3, #9
 800456a:	d94b      	bls.n	8004604 <_svfiprintf_r+0x17c>
 800456c:	b1b0      	cbz	r0, 800459c <_svfiprintf_r+0x114>
 800456e:	9207      	str	r2, [sp, #28]
 8004570:	e014      	b.n	800459c <_svfiprintf_r+0x114>
 8004572:	eba0 0308 	sub.w	r3, r0, r8
 8004576:	fa09 f303 	lsl.w	r3, r9, r3
 800457a:	4313      	orrs	r3, r2
 800457c:	9304      	str	r3, [sp, #16]
 800457e:	46a2      	mov	sl, r4
 8004580:	e7d2      	b.n	8004528 <_svfiprintf_r+0xa0>
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	1d19      	adds	r1, r3, #4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	9103      	str	r1, [sp, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	bfbb      	ittet	lt
 800458e:	425b      	neglt	r3, r3
 8004590:	f042 0202 	orrlt.w	r2, r2, #2
 8004594:	9307      	strge	r3, [sp, #28]
 8004596:	9307      	strlt	r3, [sp, #28]
 8004598:	bfb8      	it	lt
 800459a:	9204      	strlt	r2, [sp, #16]
 800459c:	7823      	ldrb	r3, [r4, #0]
 800459e:	2b2e      	cmp	r3, #46	@ 0x2e
 80045a0:	d10a      	bne.n	80045b8 <_svfiprintf_r+0x130>
 80045a2:	7863      	ldrb	r3, [r4, #1]
 80045a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80045a6:	d132      	bne.n	800460e <_svfiprintf_r+0x186>
 80045a8:	9b03      	ldr	r3, [sp, #12]
 80045aa:	1d1a      	adds	r2, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	9203      	str	r2, [sp, #12]
 80045b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045b4:	3402      	adds	r4, #2
 80045b6:	9305      	str	r3, [sp, #20]
 80045b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800467c <_svfiprintf_r+0x1f4>
 80045bc:	7821      	ldrb	r1, [r4, #0]
 80045be:	2203      	movs	r2, #3
 80045c0:	4650      	mov	r0, sl
 80045c2:	f7fb fe0d 	bl	80001e0 <memchr>
 80045c6:	b138      	cbz	r0, 80045d8 <_svfiprintf_r+0x150>
 80045c8:	9b04      	ldr	r3, [sp, #16]
 80045ca:	eba0 000a 	sub.w	r0, r0, sl
 80045ce:	2240      	movs	r2, #64	@ 0x40
 80045d0:	4082      	lsls	r2, r0
 80045d2:	4313      	orrs	r3, r2
 80045d4:	3401      	adds	r4, #1
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045dc:	4824      	ldr	r0, [pc, #144]	@ (8004670 <_svfiprintf_r+0x1e8>)
 80045de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045e2:	2206      	movs	r2, #6
 80045e4:	f7fb fdfc 	bl	80001e0 <memchr>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d036      	beq.n	800465a <_svfiprintf_r+0x1d2>
 80045ec:	4b21      	ldr	r3, [pc, #132]	@ (8004674 <_svfiprintf_r+0x1ec>)
 80045ee:	bb1b      	cbnz	r3, 8004638 <_svfiprintf_r+0x1b0>
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	3307      	adds	r3, #7
 80045f4:	f023 0307 	bic.w	r3, r3, #7
 80045f8:	3308      	adds	r3, #8
 80045fa:	9303      	str	r3, [sp, #12]
 80045fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045fe:	4433      	add	r3, r6
 8004600:	9309      	str	r3, [sp, #36]	@ 0x24
 8004602:	e76a      	b.n	80044da <_svfiprintf_r+0x52>
 8004604:	fb0c 3202 	mla	r2, ip, r2, r3
 8004608:	460c      	mov	r4, r1
 800460a:	2001      	movs	r0, #1
 800460c:	e7a8      	b.n	8004560 <_svfiprintf_r+0xd8>
 800460e:	2300      	movs	r3, #0
 8004610:	3401      	adds	r4, #1
 8004612:	9305      	str	r3, [sp, #20]
 8004614:	4619      	mov	r1, r3
 8004616:	f04f 0c0a 	mov.w	ip, #10
 800461a:	4620      	mov	r0, r4
 800461c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004620:	3a30      	subs	r2, #48	@ 0x30
 8004622:	2a09      	cmp	r2, #9
 8004624:	d903      	bls.n	800462e <_svfiprintf_r+0x1a6>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0c6      	beq.n	80045b8 <_svfiprintf_r+0x130>
 800462a:	9105      	str	r1, [sp, #20]
 800462c:	e7c4      	b.n	80045b8 <_svfiprintf_r+0x130>
 800462e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004632:	4604      	mov	r4, r0
 8004634:	2301      	movs	r3, #1
 8004636:	e7f0      	b.n	800461a <_svfiprintf_r+0x192>
 8004638:	ab03      	add	r3, sp, #12
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	462a      	mov	r2, r5
 800463e:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <_svfiprintf_r+0x1f0>)
 8004640:	a904      	add	r1, sp, #16
 8004642:	4638      	mov	r0, r7
 8004644:	f3af 8000 	nop.w
 8004648:	1c42      	adds	r2, r0, #1
 800464a:	4606      	mov	r6, r0
 800464c:	d1d6      	bne.n	80045fc <_svfiprintf_r+0x174>
 800464e:	89ab      	ldrh	r3, [r5, #12]
 8004650:	065b      	lsls	r3, r3, #25
 8004652:	f53f af2d 	bmi.w	80044b0 <_svfiprintf_r+0x28>
 8004656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004658:	e72c      	b.n	80044b4 <_svfiprintf_r+0x2c>
 800465a:	ab03      	add	r3, sp, #12
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	462a      	mov	r2, r5
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <_svfiprintf_r+0x1f0>)
 8004662:	a904      	add	r1, sp, #16
 8004664:	4638      	mov	r0, r7
 8004666:	f000 f879 	bl	800475c <_printf_i>
 800466a:	e7ed      	b.n	8004648 <_svfiprintf_r+0x1c0>
 800466c:	08004c5d 	.word	0x08004c5d
 8004670:	08004c67 	.word	0x08004c67
 8004674:	00000000 	.word	0x00000000
 8004678:	080043d1 	.word	0x080043d1
 800467c:	08004c63 	.word	0x08004c63

08004680 <_printf_common>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	4616      	mov	r6, r2
 8004686:	4698      	mov	r8, r3
 8004688:	688a      	ldr	r2, [r1, #8]
 800468a:	690b      	ldr	r3, [r1, #16]
 800468c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004690:	4293      	cmp	r3, r2
 8004692:	bfb8      	it	lt
 8004694:	4613      	movlt	r3, r2
 8004696:	6033      	str	r3, [r6, #0]
 8004698:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800469c:	4607      	mov	r7, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	b10a      	cbz	r2, 80046a6 <_printf_common+0x26>
 80046a2:	3301      	adds	r3, #1
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	0699      	lsls	r1, r3, #26
 80046aa:	bf42      	ittt	mi
 80046ac:	6833      	ldrmi	r3, [r6, #0]
 80046ae:	3302      	addmi	r3, #2
 80046b0:	6033      	strmi	r3, [r6, #0]
 80046b2:	6825      	ldr	r5, [r4, #0]
 80046b4:	f015 0506 	ands.w	r5, r5, #6
 80046b8:	d106      	bne.n	80046c8 <_printf_common+0x48>
 80046ba:	f104 0a19 	add.w	sl, r4, #25
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	6832      	ldr	r2, [r6, #0]
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	dc26      	bgt.n	8004716 <_printf_common+0x96>
 80046c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	3b00      	subs	r3, #0
 80046d0:	bf18      	it	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	0692      	lsls	r2, r2, #26
 80046d6:	d42b      	bmi.n	8004730 <_printf_common+0xb0>
 80046d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046dc:	4641      	mov	r1, r8
 80046de:	4638      	mov	r0, r7
 80046e0:	47c8      	blx	r9
 80046e2:	3001      	adds	r0, #1
 80046e4:	d01e      	beq.n	8004724 <_printf_common+0xa4>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	6922      	ldr	r2, [r4, #16]
 80046ea:	f003 0306 	and.w	r3, r3, #6
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	bf02      	ittt	eq
 80046f2:	68e5      	ldreq	r5, [r4, #12]
 80046f4:	6833      	ldreq	r3, [r6, #0]
 80046f6:	1aed      	subeq	r5, r5, r3
 80046f8:	68a3      	ldr	r3, [r4, #8]
 80046fa:	bf0c      	ite	eq
 80046fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004700:	2500      	movne	r5, #0
 8004702:	4293      	cmp	r3, r2
 8004704:	bfc4      	itt	gt
 8004706:	1a9b      	subgt	r3, r3, r2
 8004708:	18ed      	addgt	r5, r5, r3
 800470a:	2600      	movs	r6, #0
 800470c:	341a      	adds	r4, #26
 800470e:	42b5      	cmp	r5, r6
 8004710:	d11a      	bne.n	8004748 <_printf_common+0xc8>
 8004712:	2000      	movs	r0, #0
 8004714:	e008      	b.n	8004728 <_printf_common+0xa8>
 8004716:	2301      	movs	r3, #1
 8004718:	4652      	mov	r2, sl
 800471a:	4641      	mov	r1, r8
 800471c:	4638      	mov	r0, r7
 800471e:	47c8      	blx	r9
 8004720:	3001      	adds	r0, #1
 8004722:	d103      	bne.n	800472c <_printf_common+0xac>
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472c:	3501      	adds	r5, #1
 800472e:	e7c6      	b.n	80046be <_printf_common+0x3e>
 8004730:	18e1      	adds	r1, r4, r3
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	2030      	movs	r0, #48	@ 0x30
 8004736:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800473a:	4422      	add	r2, r4
 800473c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004740:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004744:	3302      	adds	r3, #2
 8004746:	e7c7      	b.n	80046d8 <_printf_common+0x58>
 8004748:	2301      	movs	r3, #1
 800474a:	4622      	mov	r2, r4
 800474c:	4641      	mov	r1, r8
 800474e:	4638      	mov	r0, r7
 8004750:	47c8      	blx	r9
 8004752:	3001      	adds	r0, #1
 8004754:	d0e6      	beq.n	8004724 <_printf_common+0xa4>
 8004756:	3601      	adds	r6, #1
 8004758:	e7d9      	b.n	800470e <_printf_common+0x8e>
	...

0800475c <_printf_i>:
 800475c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	7e0f      	ldrb	r7, [r1, #24]
 8004762:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004764:	2f78      	cmp	r7, #120	@ 0x78
 8004766:	4691      	mov	r9, r2
 8004768:	4680      	mov	r8, r0
 800476a:	460c      	mov	r4, r1
 800476c:	469a      	mov	sl, r3
 800476e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004772:	d807      	bhi.n	8004784 <_printf_i+0x28>
 8004774:	2f62      	cmp	r7, #98	@ 0x62
 8004776:	d80a      	bhi.n	800478e <_printf_i+0x32>
 8004778:	2f00      	cmp	r7, #0
 800477a:	f000 80d1 	beq.w	8004920 <_printf_i+0x1c4>
 800477e:	2f58      	cmp	r7, #88	@ 0x58
 8004780:	f000 80b8 	beq.w	80048f4 <_printf_i+0x198>
 8004784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004788:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800478c:	e03a      	b.n	8004804 <_printf_i+0xa8>
 800478e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004792:	2b15      	cmp	r3, #21
 8004794:	d8f6      	bhi.n	8004784 <_printf_i+0x28>
 8004796:	a101      	add	r1, pc, #4	@ (adr r1, 800479c <_printf_i+0x40>)
 8004798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800479c:	080047f5 	.word	0x080047f5
 80047a0:	08004809 	.word	0x08004809
 80047a4:	08004785 	.word	0x08004785
 80047a8:	08004785 	.word	0x08004785
 80047ac:	08004785 	.word	0x08004785
 80047b0:	08004785 	.word	0x08004785
 80047b4:	08004809 	.word	0x08004809
 80047b8:	08004785 	.word	0x08004785
 80047bc:	08004785 	.word	0x08004785
 80047c0:	08004785 	.word	0x08004785
 80047c4:	08004785 	.word	0x08004785
 80047c8:	08004907 	.word	0x08004907
 80047cc:	08004833 	.word	0x08004833
 80047d0:	080048c1 	.word	0x080048c1
 80047d4:	08004785 	.word	0x08004785
 80047d8:	08004785 	.word	0x08004785
 80047dc:	08004929 	.word	0x08004929
 80047e0:	08004785 	.word	0x08004785
 80047e4:	08004833 	.word	0x08004833
 80047e8:	08004785 	.word	0x08004785
 80047ec:	08004785 	.word	0x08004785
 80047f0:	080048c9 	.word	0x080048c9
 80047f4:	6833      	ldr	r3, [r6, #0]
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6032      	str	r2, [r6, #0]
 80047fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004800:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004804:	2301      	movs	r3, #1
 8004806:	e09c      	b.n	8004942 <_printf_i+0x1e6>
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	1d19      	adds	r1, r3, #4
 800480e:	6031      	str	r1, [r6, #0]
 8004810:	0606      	lsls	r6, r0, #24
 8004812:	d501      	bpl.n	8004818 <_printf_i+0xbc>
 8004814:	681d      	ldr	r5, [r3, #0]
 8004816:	e003      	b.n	8004820 <_printf_i+0xc4>
 8004818:	0645      	lsls	r5, r0, #25
 800481a:	d5fb      	bpl.n	8004814 <_printf_i+0xb8>
 800481c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004820:	2d00      	cmp	r5, #0
 8004822:	da03      	bge.n	800482c <_printf_i+0xd0>
 8004824:	232d      	movs	r3, #45	@ 0x2d
 8004826:	426d      	negs	r5, r5
 8004828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800482c:	4858      	ldr	r0, [pc, #352]	@ (8004990 <_printf_i+0x234>)
 800482e:	230a      	movs	r3, #10
 8004830:	e011      	b.n	8004856 <_printf_i+0xfa>
 8004832:	6821      	ldr	r1, [r4, #0]
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	0608      	lsls	r0, r1, #24
 8004838:	f853 5b04 	ldr.w	r5, [r3], #4
 800483c:	d402      	bmi.n	8004844 <_printf_i+0xe8>
 800483e:	0649      	lsls	r1, r1, #25
 8004840:	bf48      	it	mi
 8004842:	b2ad      	uxthmi	r5, r5
 8004844:	2f6f      	cmp	r7, #111	@ 0x6f
 8004846:	4852      	ldr	r0, [pc, #328]	@ (8004990 <_printf_i+0x234>)
 8004848:	6033      	str	r3, [r6, #0]
 800484a:	bf14      	ite	ne
 800484c:	230a      	movne	r3, #10
 800484e:	2308      	moveq	r3, #8
 8004850:	2100      	movs	r1, #0
 8004852:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004856:	6866      	ldr	r6, [r4, #4]
 8004858:	60a6      	str	r6, [r4, #8]
 800485a:	2e00      	cmp	r6, #0
 800485c:	db05      	blt.n	800486a <_printf_i+0x10e>
 800485e:	6821      	ldr	r1, [r4, #0]
 8004860:	432e      	orrs	r6, r5
 8004862:	f021 0104 	bic.w	r1, r1, #4
 8004866:	6021      	str	r1, [r4, #0]
 8004868:	d04b      	beq.n	8004902 <_printf_i+0x1a6>
 800486a:	4616      	mov	r6, r2
 800486c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004870:	fb03 5711 	mls	r7, r3, r1, r5
 8004874:	5dc7      	ldrb	r7, [r0, r7]
 8004876:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800487a:	462f      	mov	r7, r5
 800487c:	42bb      	cmp	r3, r7
 800487e:	460d      	mov	r5, r1
 8004880:	d9f4      	bls.n	800486c <_printf_i+0x110>
 8004882:	2b08      	cmp	r3, #8
 8004884:	d10b      	bne.n	800489e <_printf_i+0x142>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	07df      	lsls	r7, r3, #31
 800488a:	d508      	bpl.n	800489e <_printf_i+0x142>
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	6861      	ldr	r1, [r4, #4]
 8004890:	4299      	cmp	r1, r3
 8004892:	bfde      	ittt	le
 8004894:	2330      	movle	r3, #48	@ 0x30
 8004896:	f806 3c01 	strble.w	r3, [r6, #-1]
 800489a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800489e:	1b92      	subs	r2, r2, r6
 80048a0:	6122      	str	r2, [r4, #16]
 80048a2:	f8cd a000 	str.w	sl, [sp]
 80048a6:	464b      	mov	r3, r9
 80048a8:	aa03      	add	r2, sp, #12
 80048aa:	4621      	mov	r1, r4
 80048ac:	4640      	mov	r0, r8
 80048ae:	f7ff fee7 	bl	8004680 <_printf_common>
 80048b2:	3001      	adds	r0, #1
 80048b4:	d14a      	bne.n	800494c <_printf_i+0x1f0>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	b004      	add	sp, #16
 80048bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	f043 0320 	orr.w	r3, r3, #32
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	4832      	ldr	r0, [pc, #200]	@ (8004994 <_printf_i+0x238>)
 80048ca:	2778      	movs	r7, #120	@ 0x78
 80048cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	6831      	ldr	r1, [r6, #0]
 80048d4:	061f      	lsls	r7, r3, #24
 80048d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80048da:	d402      	bmi.n	80048e2 <_printf_i+0x186>
 80048dc:	065f      	lsls	r7, r3, #25
 80048de:	bf48      	it	mi
 80048e0:	b2ad      	uxthmi	r5, r5
 80048e2:	6031      	str	r1, [r6, #0]
 80048e4:	07d9      	lsls	r1, r3, #31
 80048e6:	bf44      	itt	mi
 80048e8:	f043 0320 	orrmi.w	r3, r3, #32
 80048ec:	6023      	strmi	r3, [r4, #0]
 80048ee:	b11d      	cbz	r5, 80048f8 <_printf_i+0x19c>
 80048f0:	2310      	movs	r3, #16
 80048f2:	e7ad      	b.n	8004850 <_printf_i+0xf4>
 80048f4:	4826      	ldr	r0, [pc, #152]	@ (8004990 <_printf_i+0x234>)
 80048f6:	e7e9      	b.n	80048cc <_printf_i+0x170>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	f023 0320 	bic.w	r3, r3, #32
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	e7f6      	b.n	80048f0 <_printf_i+0x194>
 8004902:	4616      	mov	r6, r2
 8004904:	e7bd      	b.n	8004882 <_printf_i+0x126>
 8004906:	6833      	ldr	r3, [r6, #0]
 8004908:	6825      	ldr	r5, [r4, #0]
 800490a:	6961      	ldr	r1, [r4, #20]
 800490c:	1d18      	adds	r0, r3, #4
 800490e:	6030      	str	r0, [r6, #0]
 8004910:	062e      	lsls	r6, r5, #24
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	d501      	bpl.n	800491a <_printf_i+0x1be>
 8004916:	6019      	str	r1, [r3, #0]
 8004918:	e002      	b.n	8004920 <_printf_i+0x1c4>
 800491a:	0668      	lsls	r0, r5, #25
 800491c:	d5fb      	bpl.n	8004916 <_printf_i+0x1ba>
 800491e:	8019      	strh	r1, [r3, #0]
 8004920:	2300      	movs	r3, #0
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	4616      	mov	r6, r2
 8004926:	e7bc      	b.n	80048a2 <_printf_i+0x146>
 8004928:	6833      	ldr	r3, [r6, #0]
 800492a:	1d1a      	adds	r2, r3, #4
 800492c:	6032      	str	r2, [r6, #0]
 800492e:	681e      	ldr	r6, [r3, #0]
 8004930:	6862      	ldr	r2, [r4, #4]
 8004932:	2100      	movs	r1, #0
 8004934:	4630      	mov	r0, r6
 8004936:	f7fb fc53 	bl	80001e0 <memchr>
 800493a:	b108      	cbz	r0, 8004940 <_printf_i+0x1e4>
 800493c:	1b80      	subs	r0, r0, r6
 800493e:	6060      	str	r0, [r4, #4]
 8004940:	6863      	ldr	r3, [r4, #4]
 8004942:	6123      	str	r3, [r4, #16]
 8004944:	2300      	movs	r3, #0
 8004946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800494a:	e7aa      	b.n	80048a2 <_printf_i+0x146>
 800494c:	6923      	ldr	r3, [r4, #16]
 800494e:	4632      	mov	r2, r6
 8004950:	4649      	mov	r1, r9
 8004952:	4640      	mov	r0, r8
 8004954:	47d0      	blx	sl
 8004956:	3001      	adds	r0, #1
 8004958:	d0ad      	beq.n	80048b6 <_printf_i+0x15a>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	079b      	lsls	r3, r3, #30
 800495e:	d413      	bmi.n	8004988 <_printf_i+0x22c>
 8004960:	68e0      	ldr	r0, [r4, #12]
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	4298      	cmp	r0, r3
 8004966:	bfb8      	it	lt
 8004968:	4618      	movlt	r0, r3
 800496a:	e7a6      	b.n	80048ba <_printf_i+0x15e>
 800496c:	2301      	movs	r3, #1
 800496e:	4632      	mov	r2, r6
 8004970:	4649      	mov	r1, r9
 8004972:	4640      	mov	r0, r8
 8004974:	47d0      	blx	sl
 8004976:	3001      	adds	r0, #1
 8004978:	d09d      	beq.n	80048b6 <_printf_i+0x15a>
 800497a:	3501      	adds	r5, #1
 800497c:	68e3      	ldr	r3, [r4, #12]
 800497e:	9903      	ldr	r1, [sp, #12]
 8004980:	1a5b      	subs	r3, r3, r1
 8004982:	42ab      	cmp	r3, r5
 8004984:	dcf2      	bgt.n	800496c <_printf_i+0x210>
 8004986:	e7eb      	b.n	8004960 <_printf_i+0x204>
 8004988:	2500      	movs	r5, #0
 800498a:	f104 0619 	add.w	r6, r4, #25
 800498e:	e7f5      	b.n	800497c <_printf_i+0x220>
 8004990:	08004c6e 	.word	0x08004c6e
 8004994:	08004c7f 	.word	0x08004c7f

08004998 <memmove>:
 8004998:	4288      	cmp	r0, r1
 800499a:	b510      	push	{r4, lr}
 800499c:	eb01 0402 	add.w	r4, r1, r2
 80049a0:	d902      	bls.n	80049a8 <memmove+0x10>
 80049a2:	4284      	cmp	r4, r0
 80049a4:	4623      	mov	r3, r4
 80049a6:	d807      	bhi.n	80049b8 <memmove+0x20>
 80049a8:	1e43      	subs	r3, r0, #1
 80049aa:	42a1      	cmp	r1, r4
 80049ac:	d008      	beq.n	80049c0 <memmove+0x28>
 80049ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049b6:	e7f8      	b.n	80049aa <memmove+0x12>
 80049b8:	4402      	add	r2, r0
 80049ba:	4601      	mov	r1, r0
 80049bc:	428a      	cmp	r2, r1
 80049be:	d100      	bne.n	80049c2 <memmove+0x2a>
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049ca:	e7f7      	b.n	80049bc <memmove+0x24>

080049cc <_sbrk_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4d06      	ldr	r5, [pc, #24]	@ (80049e8 <_sbrk_r+0x1c>)
 80049d0:	2300      	movs	r3, #0
 80049d2:	4604      	mov	r4, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	602b      	str	r3, [r5, #0]
 80049d8:	f7fc faba 	bl	8000f50 <_sbrk>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d102      	bne.n	80049e6 <_sbrk_r+0x1a>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	b103      	cbz	r3, 80049e6 <_sbrk_r+0x1a>
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	20000290 	.word	0x20000290

080049ec <memcpy>:
 80049ec:	440a      	add	r2, r1
 80049ee:	4291      	cmp	r1, r2
 80049f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f4:	d100      	bne.n	80049f8 <memcpy+0xc>
 80049f6:	4770      	bx	lr
 80049f8:	b510      	push	{r4, lr}
 80049fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a02:	4291      	cmp	r1, r2
 8004a04:	d1f9      	bne.n	80049fa <memcpy+0xe>
 8004a06:	bd10      	pop	{r4, pc}

08004a08 <_realloc_r>:
 8004a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	4614      	mov	r4, r2
 8004a10:	460d      	mov	r5, r1
 8004a12:	b921      	cbnz	r1, 8004a1e <_realloc_r+0x16>
 8004a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a18:	4611      	mov	r1, r2
 8004a1a:	f7ff bc4d 	b.w	80042b8 <_malloc_r>
 8004a1e:	b92a      	cbnz	r2, 8004a2c <_realloc_r+0x24>
 8004a20:	f7ff fbde 	bl	80041e0 <_free_r>
 8004a24:	4625      	mov	r5, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2c:	f000 f81a 	bl	8004a64 <_malloc_usable_size_r>
 8004a30:	4284      	cmp	r4, r0
 8004a32:	4606      	mov	r6, r0
 8004a34:	d802      	bhi.n	8004a3c <_realloc_r+0x34>
 8004a36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a3a:	d8f4      	bhi.n	8004a26 <_realloc_r+0x1e>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f7ff fc3a 	bl	80042b8 <_malloc_r>
 8004a44:	4680      	mov	r8, r0
 8004a46:	b908      	cbnz	r0, 8004a4c <_realloc_r+0x44>
 8004a48:	4645      	mov	r5, r8
 8004a4a:	e7ec      	b.n	8004a26 <_realloc_r+0x1e>
 8004a4c:	42b4      	cmp	r4, r6
 8004a4e:	4622      	mov	r2, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	bf28      	it	cs
 8004a54:	4632      	movcs	r2, r6
 8004a56:	f7ff ffc9 	bl	80049ec <memcpy>
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	f7ff fbbf 	bl	80041e0 <_free_r>
 8004a62:	e7f1      	b.n	8004a48 <_realloc_r+0x40>

08004a64 <_malloc_usable_size_r>:
 8004a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a68:	1f18      	subs	r0, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bfbc      	itt	lt
 8004a6e:	580b      	ldrlt	r3, [r1, r0]
 8004a70:	18c0      	addlt	r0, r0, r3
 8004a72:	4770      	bx	lr

08004a74 <_init>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	bf00      	nop
 8004a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7a:	bc08      	pop	{r3}
 8004a7c:	469e      	mov	lr, r3
 8004a7e:	4770      	bx	lr

08004a80 <_fini>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr
