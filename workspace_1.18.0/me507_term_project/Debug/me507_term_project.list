
me507_term_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800506c  0800506c  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800506c  0800506c  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005074  08005074  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00006074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005078  08005078  00006078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800507c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000064  080050e0  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080050e0  000073d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e07a  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207e  00000000  00000000  0001510e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00017190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1f  00000000  00000000  00017e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d57  00000000  00000000  0001889f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f602  00000000  00000000  0002f5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3a1  00000000  00000000  0003ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdf99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc0  00000000  00000000  000cdfdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d1b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fb0 	.word	0x08004fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004fb0 	.word	0x08004fb0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b09a      	sub	sp, #104	@ 0x68
 80005c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 fad3 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f94d 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fa53 	bl	8000a74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ce:	f000 f9fd 	bl	80009cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 fa25 	bl	8000a20 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d6:	f000 f9ad 	bl	8000934 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  StepperMotor_Init(
 80005da:	4b8a      	ldr	r3, [pc, #552]	@ (8000804 <main+0x248>)
 80005dc:	edd3 7a00 	vldr	s15, [r3]
 80005e0:	4b89      	ldr	r3, [pc, #548]	@ (8000808 <main+0x24c>)
 80005e2:	ed93 7a00 	vldr	s14, [r3]
 80005e6:	2340      	movs	r3, #64	@ 0x40
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	eef0 0a47 	vmov.f32	s1, s14
 80005ee:	eeb0 0a67 	vmov.f32	s0, s15
 80005f2:	4b86      	ldr	r3, [pc, #536]	@ (800080c <main+0x250>)
 80005f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005f8:	4984      	ldr	r1, [pc, #528]	@ (800080c <main+0x250>)
 80005fa:	4885      	ldr	r0, [pc, #532]	@ (8000810 <main+0x254>)
 80005fc:	f000 fbf7 	bl	8000dee <StepperMotor_Init>
	  GPIOB, GPIO_PIN_6,
	  max_speed,
	  max_accel
  );

  StepperMotor_Init(
 8000600:	4b80      	ldr	r3, [pc, #512]	@ (8000804 <main+0x248>)
 8000602:	edd3 7a00 	vldr	s15, [r3]
 8000606:	4b80      	ldr	r3, [pc, #512]	@ (8000808 <main+0x24c>)
 8000608:	ed93 7a00 	vldr	s14, [r3]
 800060c:	2380      	movs	r3, #128	@ 0x80
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	eef0 0a47 	vmov.f32	s1, s14
 8000614:	eeb0 0a67 	vmov.f32	s0, s15
 8000618:	4b7c      	ldr	r3, [pc, #496]	@ (800080c <main+0x250>)
 800061a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800061e:	497b      	ldr	r1, [pc, #492]	@ (800080c <main+0x250>)
 8000620:	487c      	ldr	r0, [pc, #496]	@ (8000814 <main+0x258>)
 8000622:	f000 fbe4 	bl	8000dee <StepperMotor_Init>
	  GPIOB, GPIO_PIN_7,
	  max_speed,
	  max_accel
  );

  float steps_per_mm = 80.0f;
 8000626:	4b7c      	ldr	r3, [pc, #496]	@ (8000818 <main+0x25c>)
 8000628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  StepperManager_Init(
 800062a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	4b76      	ldr	r3, [pc, #472]	@ (800080c <main+0x250>)
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	eef1 2a04 	vmov.f32	s5, #20	@ 0x40a00000  5.0
 800063e:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 800081c <main+0x260>
 8000642:	eddf 1a77 	vldr	s3, [pc, #476]	@ 8000820 <main+0x264>
 8000646:	ed9f 1a77 	vldr	s2, [pc, #476]	@ 8000824 <main+0x268>
 800064a:	eddf 0a77 	vldr	s1, [pc, #476]	@ 8000828 <main+0x26c>
 800064e:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8000652:	4b6e      	ldr	r3, [pc, #440]	@ (800080c <main+0x250>)
 8000654:	4a6f      	ldr	r2, [pc, #444]	@ (8000814 <main+0x258>)
 8000656:	496e      	ldr	r1, [pc, #440]	@ (8000810 <main+0x254>)
 8000658:	4874      	ldr	r0, [pc, #464]	@ (800082c <main+0x270>)
 800065a:	f000 fd2d 	bl	80010b8 <StepperManager_Init>
		  80.0f,	// Y min soft stop
		  270.0f,	// Y max soft stop
		  5.0f	// Backoff in mm after limit switch
  );

  HAL_TIM_Base_Start_IT(&htim2);
 800065e:	4874      	ldr	r0, [pc, #464]	@ (8000830 <main+0x274>)
 8000660:	f002 fb50 	bl	8002d04 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	4973      	ldr	r1, [pc, #460]	@ (8000834 <main+0x278>)
 8000668:	4873      	ldr	r0, [pc, #460]	@ (8000838 <main+0x27c>)
 800066a:	f003 f810 	bl	800368e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	4972      	ldr	r1, [pc, #456]	@ (800083c <main+0x280>)
 8000672:	4873      	ldr	r0, [pc, #460]	@ (8000840 <main+0x284>)
 8000674:	f003 f80b 	bl	800368e <HAL_UART_Receive_IT>
  StepperManager_StartCalibration(&mgr);
 8000678:	486c      	ldr	r0, [pc, #432]	@ (800082c <main+0x270>)
 800067a:	f000 fd7f 	bl	800117c <StepperManager_StartCalibration>
  char msg[] = "Hello from STM32!\r\n";
 800067e:	4b71      	ldr	r3, [pc, #452]	@ (8000844 <main+0x288>)
 8000680:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000684:	461d      	mov	r5, r3
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	682b      	ldr	r3, [r5, #0]
 800068c:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800068e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fda4 	bl	80001e0 <strlen>
 8000698:	4603      	mov	r3, r0
 800069a:	b29a      	uxth	r2, r3
 800069c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	4864      	ldr	r0, [pc, #400]	@ (8000838 <main+0x27c>)
 80006a6:	f002 ff67 	bl	8003578 <HAL_UART_Transmit>

  while (1)
  {
	  StepperManager_Update(&mgr);
 80006aa:	4860      	ldr	r0, [pc, #384]	@ (800082c <main+0x270>)
 80006ac:	f000 ff62 	bl	8001574 <StepperManager_Update>

//	  if (mgr.state == MANAGER_IDLE) {
//		  StepperManager_MoveTo(&mgr, 200.0f, 95.0f);
//	  }

	if (new_data == true) {
 80006b0:	4b65      	ldr	r3, [pc, #404]	@ (8000848 <main+0x28c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0f8      	beq.n	80006aa <main+0xee>
		new_data = false;
 80006b8:	4b63      	ldr	r3, [pc, #396]	@ (8000848 <main+0x28c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
		if (uart_rx_data == '\r' || uart_rx_data == '\n') {
 80006be:	4b63      	ldr	r3, [pc, #396]	@ (800084c <main+0x290>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0d      	cmp	r3, #13
 80006c4:	d004      	beq.n	80006d0 <main+0x114>
 80006c6:	4b61      	ldr	r3, [pc, #388]	@ (800084c <main+0x290>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b0a      	cmp	r3, #10
 80006cc:	f040 8089 	bne.w	80007e2 <main+0x226>
			uart_rx_buffer[uart_rx_index] = '\0';
 80006d0:	4b5f      	ldr	r3, [pc, #380]	@ (8000850 <main+0x294>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000854 <main+0x298>)
 80006d8:	2100      	movs	r1, #0
 80006da:	5499      	strb	r1, [r3, r2]

			char reply[32];
			int len = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	657b      	str	r3, [r7, #84]	@ 0x54
			if (uart_rx_buffer[0] == 'M' && uart_rx_index >= 3) {
 80006e0:	4b5c      	ldr	r3, [pc, #368]	@ (8000854 <main+0x298>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b4d      	cmp	r3, #77	@ 0x4d
 80006e6:	d145      	bne.n	8000774 <main+0x1b8>
 80006e8:	4b59      	ldr	r3, [pc, #356]	@ (8000850 <main+0x294>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d941      	bls.n	8000774 <main+0x1b8>
				int raw_pos_x = four_ascii_to_int(uart_rx_buffer[1], uart_rx_buffer[2], uart_rx_buffer[3], uart_rx_buffer[4]);
 80006f0:	4b58      	ldr	r3, [pc, #352]	@ (8000854 <main+0x298>)
 80006f2:	7858      	ldrb	r0, [r3, #1]
 80006f4:	4b57      	ldr	r3, [pc, #348]	@ (8000854 <main+0x298>)
 80006f6:	7899      	ldrb	r1, [r3, #2]
 80006f8:	4b56      	ldr	r3, [pc, #344]	@ (8000854 <main+0x298>)
 80006fa:	78da      	ldrb	r2, [r3, #3]
 80006fc:	4b55      	ldr	r3, [pc, #340]	@ (8000854 <main+0x298>)
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	f000 faa4 	bl	8000c4c <four_ascii_to_int>
 8000704:	64b8      	str	r0, [r7, #72]	@ 0x48
				int raw_pos_y = four_ascii_to_int(uart_rx_buffer[5], uart_rx_buffer[6], uart_rx_buffer[7], uart_rx_buffer[8]);
 8000706:	4b53      	ldr	r3, [pc, #332]	@ (8000854 <main+0x298>)
 8000708:	7958      	ldrb	r0, [r3, #5]
 800070a:	4b52      	ldr	r3, [pc, #328]	@ (8000854 <main+0x298>)
 800070c:	7999      	ldrb	r1, [r3, #6]
 800070e:	4b51      	ldr	r3, [pc, #324]	@ (8000854 <main+0x298>)
 8000710:	79da      	ldrb	r2, [r3, #7]
 8000712:	4b50      	ldr	r3, [pc, #320]	@ (8000854 <main+0x298>)
 8000714:	7a1b      	ldrb	r3, [r3, #8]
 8000716:	f000 fa99 	bl	8000c4c <four_ascii_to_int>
 800071a:	6478      	str	r0, [r7, #68]	@ 0x44
				float pos_x = raw_pos_x / 10.0f;
 800071c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000726:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800072a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
				float pos_y = raw_pos_y / 10.0f;
 8000732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800073c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000744:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

				len = snprintf(reply, sizeof(reply), "Got M cmd: xpos=%d  ypos=%d\r\n", raw_pos_x, raw_pos_y);
 8000748:	1d38      	adds	r0, r7, #4
 800074a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000750:	4a41      	ldr	r2, [pc, #260]	@ (8000858 <main+0x29c>)
 8000752:	2120      	movs	r1, #32
 8000754:	f003 ff16 	bl	8004584 <sniprintf>
 8000758:	6578      	str	r0, [r7, #84]	@ 0x54

				if (mgr.state == MANAGER_IDLE) {
 800075a:	4b34      	ldr	r3, [pc, #208]	@ (800082c <main+0x270>)
 800075c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10f      	bne.n	8000784 <main+0x1c8>
					StepperManager_MoveTo(&mgr, pos_x, pos_y);
 8000764:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 8000768:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 800076c:	482f      	ldr	r0, [pc, #188]	@ (800082c <main+0x270>)
 800076e:	f000 fd49 	bl	8001204 <StepperManager_MoveTo>
			if (uart_rx_buffer[0] == 'M' && uart_rx_index >= 3) {
 8000772:	e007      	b.n	8000784 <main+0x1c8>
				}
			} else {
				len = snprintf(reply, sizeof(reply), "Hm, not quite right\r\n");
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4a39      	ldr	r2, [pc, #228]	@ (800085c <main+0x2a0>)
 8000778:	2120      	movs	r1, #32
 800077a:	4618      	mov	r0, r3
 800077c:	f003 ff02 	bl	8004584 <sniprintf>
 8000780:	6578      	str	r0, [r7, #84]	@ 0x54
 8000782:	e000      	b.n	8000786 <main+0x1ca>
			if (uart_rx_buffer[0] == 'M' && uart_rx_index >= 3) {
 8000784:	bf00      	nop
			}

			HAL_UART_Transmit(&huart1, (uint8_t*)reply, len, 1000);
 8000786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000788:	b29a      	uxth	r2, r3
 800078a:	1d39      	adds	r1, r7, #4
 800078c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000790:	4829      	ldr	r0, [pc, #164]	@ (8000838 <main+0x27c>)
 8000792:	f002 fef1 	bl	8003578 <HAL_UART_Transmit>



			// Spit out what I put in, then add a new line
			for (uint16_t i = 0; i < uart_rx_index; ++i) {
 8000796:	2300      	movs	r3, #0
 8000798:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800079c:	e00e      	b.n	80007bc <main+0x200>
				HAL_UART_Transmit(&huart1,
								  (uint8_t*)&uart_rx_buffer[i],
 800079e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80007a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000854 <main+0x298>)
 80007a4:	1899      	adds	r1, r3, r2
				HAL_UART_Transmit(&huart1,
 80007a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007aa:	2201      	movs	r2, #1
 80007ac:	4822      	ldr	r0, [pc, #136]	@ (8000838 <main+0x27c>)
 80007ae:	f002 fee3 	bl	8003578 <HAL_UART_Transmit>
			for (uint16_t i = 0; i < uart_rx_index; ++i) {
 80007b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80007b6:	3301      	adds	r3, #1
 80007b8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <main+0x294>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d3e9      	bcc.n	800079e <main+0x1e2>
								  1,
								  1000);
			}
			const char *nl = "\r\n";
 80007ca:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <main+0x2a4>)
 80007cc:	63bb      	str	r3, [r7, #56]	@ 0x38
			HAL_UART_Transmit(&huart1,
 80007ce:	2364      	movs	r3, #100	@ 0x64
 80007d0:	2202      	movs	r2, #2
 80007d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80007d4:	4818      	ldr	r0, [pc, #96]	@ (8000838 <main+0x27c>)
 80007d6:	f002 fecf 	bl	8003578 <HAL_UART_Transmit>
							  (uint8_t*)nl,
							  2,
							  100);

			uart_rx_index = 0;
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <main+0x294>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
		if (uart_rx_data == '\r' || uart_rx_data == '\n') {
 80007e0:	e00f      	b.n	8000802 <main+0x246>
		}
		else {
			if (uart_rx_index < RX_BUFFER_SIZE - 1) {
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <main+0x294>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80007e8:	f63f af5f 	bhi.w	80006aa <main+0xee>
				uart_rx_buffer[uart_rx_index++] = uart_rx_data;
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <main+0x294>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	1c5a      	adds	r2, r3, #1
 80007f2:	b2d1      	uxtb	r1, r2
 80007f4:	4a16      	ldr	r2, [pc, #88]	@ (8000850 <main+0x294>)
 80007f6:	7011      	strb	r1, [r2, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <main+0x290>)
 80007fc:	7819      	ldrb	r1, [r3, #0]
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <main+0x298>)
 8000800:	5499      	strb	r1, [r3, r2]
	  StepperManager_Update(&mgr);
 8000802:	e752      	b.n	80006aa <main+0xee>
 8000804:	20000000 	.word	0x20000000
 8000808:	20000004 	.word	0x20000004
 800080c:	40020400 	.word	0x40020400
 8000810:	20000080 	.word	0x20000080
 8000814:	200000cc 	.word	0x200000cc
 8000818:	42a00000 	.word	0x42a00000
 800081c:	43870000 	.word	0x43870000
 8000820:	42a00000 	.word	0x42a00000
 8000824:	43570000 	.word	0x43570000
 8000828:	428c0000 	.word	0x428c0000
 800082c:	20000118 	.word	0x20000118
 8000830:	20000164 	.word	0x20000164
 8000834:	2000023c 	.word	0x2000023c
 8000838:	200001ac 	.word	0x200001ac
 800083c:	2000023d 	.word	0x2000023d
 8000840:	200001f4 	.word	0x200001f4
 8000844:	08005004 	.word	0x08005004
 8000848:	20000281 	.word	0x20000281
 800084c:	2000023e 	.word	0x2000023e
 8000850:	20000280 	.word	0x20000280
 8000854:	20000240 	.word	0x20000240
 8000858:	08004fc8 	.word	0x08004fc8
 800085c:	08004fe8 	.word	0x08004fe8
 8000860:	08005000 	.word	0x08005000

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	@ 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	@ 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f003 febc 	bl	80045f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <SystemClock_Config+0xc8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	4a26      	ldr	r2, [pc, #152]	@ (800092c <SystemClock_Config+0xc8>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	@ 0x40
 8000898:	4b24      	ldr	r3, [pc, #144]	@ (800092c <SystemClock_Config+0xc8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <SystemClock_Config+0xcc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a20      	ldr	r2, [pc, #128]	@ (8000930 <SystemClock_Config+0xcc>)
 80008ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <SystemClock_Config+0xcc>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d4:	2310      	movs	r3, #16
 80008d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008d8:	23c0      	movs	r3, #192	@ 0xc0
 80008da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fd25 	bl	8002338 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f4:	f000 f9f9 	bl	8000cea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2103      	movs	r1, #3
 8000914:	4618      	mov	r0, r3
 8000916:	f001 ff87 	bl	8002828 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000920:	f000 f9e3 	bl	8000cea <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3750      	adds	r7, #80	@ 0x50
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_TIM2_Init+0x94>)
 8000952:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000956:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_TIM2_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_TIM2_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_TIM2_Init+0x94>)
 8000966:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800096a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_TIM2_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_TIM2_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000978:	4813      	ldr	r0, [pc, #76]	@ (80009c8 <MX_TIM2_Init+0x94>)
 800097a:	f002 f973 	bl	8002c64 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000984:	f000 f9b1 	bl	8000cea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <MX_TIM2_Init+0x94>)
 8000996:	f002 fb07 	bl	8002fa8 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009a0:	f000 f9a3 	bl	8000cea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_TIM2_Init+0x94>)
 80009b2:	f002 fd0f 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f995 	bl	8000cea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000164 	.word	0x20000164

080009cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d0:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <MX_USART1_UART_Init+0x50>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_USART1_UART_Init+0x4c>)
 8000a04:	f002 fd68 	bl	80034d8 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f000 f96c 	bl	8000cea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001ac 	.word	0x200001ac
 8000a1c:	40011000 	.word	0x40011000

08000a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <MX_USART2_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a58:	f002 fd3e 	bl	80034d8 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f942 	bl	8000cea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001f4 	.word	0x200001f4
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b38      	ldr	r3, [pc, #224]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a37      	ldr	r2, [pc, #220]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a30      	ldr	r2, [pc, #192]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a29      	ldr	r2, [pc, #164]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <MX_GPIO_Init+0xfc>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b00:	481c      	ldr	r0, [pc, #112]	@ (8000b74 <MX_GPIO_Init+0x100>)
 8000b02:	f001 fbe5 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000b0c:	481a      	ldr	r0, [pc, #104]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000b0e:	f001 fbdf 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4812      	ldr	r0, [pc, #72]	@ (8000b74 <MX_GPIO_Init+0x100>)
 8000b2c:	f001 fa34 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b30:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000b46:	f001 fa27 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b4a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000b64:	f001 fa18 	bl	8001f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40020400 	.word	0x40020400

08000b7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b8c:	d105      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		StepperMotor_Update(&motor1);
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b90:	f000 f9bc 	bl	8000f0c <StepperMotor_Update>
		StepperMotor_Update(&motor2);
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b96:	f000 f9b9 	bl	8000f0c <StepperMotor_Update>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	200000cc 	.word	0x200000cc

08000bac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <HAL_UART_RxCpltCallback+0x7c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d113      	bne.n	8000be6 <HAL_UART_RxCpltCallback+0x3a>
		// Data from UART1 (PC/PuTTY)
		new_data = true;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <HAL_UART_RxCpltCallback+0x80>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
		uart_rx_data = uart1_rx_data;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <HAL_UART_RxCpltCallback+0x84>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_UART_RxCpltCallback+0x88>)
 8000bca:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)&uart1_rx_data, 1, 1000); // Echo back to UART1
 8000bcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4917      	ldr	r1, [pc, #92]	@ (8000c30 <HAL_UART_RxCpltCallback+0x84>)
 8000bd4:	4818      	ldr	r0, [pc, #96]	@ (8000c38 <HAL_UART_RxCpltCallback+0x8c>)
 8000bd6:	f002 fccf 	bl	8003578 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); // Re-enable UART1 interrupt
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4914      	ldr	r1, [pc, #80]	@ (8000c30 <HAL_UART_RxCpltCallback+0x84>)
 8000bde:	4816      	ldr	r0, [pc, #88]	@ (8000c38 <HAL_UART_RxCpltCallback+0x8c>)
 8000be0:	f002 fd55 	bl	800368e <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1); // Re-enable UART2 interrupt
		
		// Debug marker to know UART2 is active
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle LED to show UART2 activity
	}
}
 8000be4:	e01c      	b.n	8000c20 <HAL_UART_RxCpltCallback+0x74>
	else if (huart->Instance == USART2) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <HAL_UART_RxCpltCallback+0x90>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d117      	bne.n	8000c20 <HAL_UART_RxCpltCallback+0x74>
		new_data = true;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_UART_RxCpltCallback+0x80>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
		uart_rx_data = uart2_rx_data;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_UART_RxCpltCallback+0x94>)
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_UART_RxCpltCallback+0x88>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)&uart2_rx_data, 1, 1000); // Echo to UART1 for debugging
 8000bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c02:	2201      	movs	r2, #1
 8000c04:	490e      	ldr	r1, [pc, #56]	@ (8000c40 <HAL_UART_RxCpltCallback+0x94>)
 8000c06:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <HAL_UART_RxCpltCallback+0x8c>)
 8000c08:	f002 fcb6 	bl	8003578 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1); // Re-enable UART2 interrupt
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <HAL_UART_RxCpltCallback+0x94>)
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <HAL_UART_RxCpltCallback+0x98>)
 8000c12:	f002 fd3c 	bl	800368e <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle LED to show UART2 activity
 8000c16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c1a:	480b      	ldr	r0, [pc, #44]	@ (8000c48 <HAL_UART_RxCpltCallback+0x9c>)
 8000c1c:	f001 fb71 	bl	8002302 <HAL_GPIO_TogglePin>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	20000281 	.word	0x20000281
 8000c30:	2000023c 	.word	0x2000023c
 8000c34:	2000023e 	.word	0x2000023e
 8000c38:	200001ac 	.word	0x200001ac
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	2000023d 	.word	0x2000023d
 8000c44:	200001f4 	.word	0x200001f4
 8000c48:	40020800 	.word	0x40020800

08000c4c <four_ascii_to_int>:

	uint8_t combined = int1 * 1000 + int2 * 100 + int3 * 10 + int4;
	return combined;
}

int four_ascii_to_int(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) {
 8000c4c:	b490      	push	{r4, r7}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71bb      	strb	r3, [r7, #6]
 8000c62:	460b      	mov	r3, r1
 8000c64:	717b      	strb	r3, [r7, #5]
 8000c66:	4613      	mov	r3, r2
 8000c68:	713b      	strb	r3, [r7, #4]
	if (d1 < '0' || d1 > '9') return -1;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c6e:	d902      	bls.n	8000c76 <four_ascii_to_int+0x2a>
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b39      	cmp	r3, #57	@ 0x39
 8000c74:	d902      	bls.n	8000c7c <four_ascii_to_int+0x30>
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e031      	b.n	8000ce0 <four_ascii_to_int+0x94>
	if (d2 < '0' || d2 > '9') return -1;
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c80:	d902      	bls.n	8000c88 <four_ascii_to_int+0x3c>
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	2b39      	cmp	r3, #57	@ 0x39
 8000c86:	d902      	bls.n	8000c8e <four_ascii_to_int+0x42>
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	e028      	b.n	8000ce0 <four_ascii_to_int+0x94>
	if (d3 < '0' || d3 > '9') return -1;
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c92:	d902      	bls.n	8000c9a <four_ascii_to_int+0x4e>
 8000c94:	797b      	ldrb	r3, [r7, #5]
 8000c96:	2b39      	cmp	r3, #57	@ 0x39
 8000c98:	d902      	bls.n	8000ca0 <four_ascii_to_int+0x54>
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e01f      	b.n	8000ce0 <four_ascii_to_int+0x94>
	if (d4 < '0' || d4 > '9') return -1;
 8000ca0:	793b      	ldrb	r3, [r7, #4]
 8000ca2:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ca4:	d902      	bls.n	8000cac <four_ascii_to_int+0x60>
 8000ca6:	793b      	ldrb	r3, [r7, #4]
 8000ca8:	2b39      	cmp	r3, #57	@ 0x39
 8000caa:	d902      	bls.n	8000cb2 <four_ascii_to_int+0x66>
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	e016      	b.n	8000ce0 <four_ascii_to_int+0x94>

	return (d1 - '0') * 1000 +
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	3b30      	subs	r3, #48	@ 0x30
 8000cb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cba:	fb03 f202 	mul.w	r2, r3, r2
	       (d2 - '0') * 100 +
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	3b30      	subs	r3, #48	@ 0x30
 8000cc2:	2164      	movs	r1, #100	@ 0x64
 8000cc4:	fb01 f303 	mul.w	r3, r1, r3
	return (d1 - '0') * 1000 +
 8000cc8:	18d1      	adds	r1, r2, r3
	       (d3 - '0') * 10 +
 8000cca:	797b      	ldrb	r3, [r7, #5]
 8000ccc:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
	       (d2 - '0') * 100 +
 8000cd8:	18ca      	adds	r2, r1, r3
	       (d4 - '0') * 1;
 8000cda:	793b      	ldrb	r3, [r7, #4]
 8000cdc:	3b30      	subs	r3, #48	@ 0x30
	       (d3 - '0') * 10 +
 8000cde:	4413      	add	r3, r2
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc90      	pop	{r4, r7}
 8000ce8:	4770      	bx	lr

08000cea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cee:	b672      	cpsid	i
}
 8000cf0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf2:	bf00      	nop
 8000cf4:	e7fd      	b.n	8000cf2 <Error_Handler+0x8>

08000cf6 <StepperMotor_PlanMotion>:
 * @brief  Plan a trapezoidal move (compute accel_steps/decel_steps), set DIR pin, etc.
 * @param  motor: Pointer to StepperMotor object
 * @note   Called internally by MoveTo().
 */
static void StepperMotor_PlanMotion(StepperMotor *motor)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
    int32_t delta = motor->target_position - motor->current_position;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69da      	ldr	r2, [r3, #28]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	60fb      	str	r3, [r7, #12]
    if (delta == 0) {
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d104      	bne.n	8000d1a <StepperMotor_PlanMotion+0x24>
        motor->moving = false;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]
        return;
 8000d18:	e066      	b.n	8000de8 <StepperMotor_PlanMotion+0xf2>
    }

    motor->direction = (delta > 0) ? +1 : -1;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dd01      	ble.n	8000d24 <StepperMotor_PlanMotion+0x2e>
 8000d20:	2201      	movs	r2, #1
 8000d22:	e001      	b.n	8000d28 <StepperMotor_PlanMotion+0x32>
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    // Drive DIR pin high or low
    if (motor->direction > 0) {
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	dd08      	ble.n	8000d4a <StepperMotor_PlanMotion+0x54>
        HAL_GPIO_WritePin(motor->dir_port, motor->dir_pin, GPIO_PIN_SET);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	889b      	ldrh	r3, [r3, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	4619      	mov	r1, r3
 8000d44:	f001 fac4 	bl	80022d0 <HAL_GPIO_WritePin>
 8000d48:	e007      	b.n	8000d5a <StepperMotor_PlanMotion+0x64>
    } else {
        HAL_GPIO_WritePin(motor->dir_port, motor->dir_pin, GPIO_PIN_RESET);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	889b      	ldrh	r3, [r3, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	f001 fabb 	bl	80022d0 <HAL_GPIO_WritePin>
    }

    motor->total_steps = abs(delta);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d60:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor->step_count   = 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    // Compute how many steps to accelerate and decelerate:
    //   s = v^2 / (2*a).  If 2*s > total_steps, we'll do a triangular profile.
    int32_t accel_s = (int32_t)((motor->max_speed * motor->max_speed) / (2.0f * motor->accel));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000d7a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000d84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d90:	ee17 3a90 	vmov	r3, s15
 8000d94:	60bb      	str	r3, [r7, #8]
    if (accel_s * 2 > motor->total_steps) {
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	005a      	lsls	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dd08      	ble.n	8000db4 <StepperMotor_PlanMotion+0xbe>
        // Triangular: accelerate up, then immediately decelerate
        motor->accel_steps = motor->total_steps / 2;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da6:	0fda      	lsrs	r2, r3, #31
 8000da8:	4413      	add	r3, r2
 8000daa:	105b      	asrs	r3, r3, #1
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db2:	e002      	b.n	8000dba <StepperMotor_PlanMotion+0xc4>
    } else {
        motor->accel_steps = accel_s;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    motor->decel_steps = motor->accel_steps;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	639a      	str	r2, [r3, #56]	@ 0x38

    motor->current_speed = 0.0f;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
    motor->step_timer    = 0;           // so next ISR tick computes first period
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->step_period   = UINT32_MAX;  // “invalid” until we compute real period
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
    motor->pulse_high    = false;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    motor->moving        = true;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <StepperMotor_Init>:
    StepperMotor *motor,
    GPIO_TypeDef *dir_port, uint16_t dir_pin,
    GPIO_TypeDef *step_port, uint16_t step_pin,
    float max_speed,
    float accel
) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6178      	str	r0, [r7, #20]
 8000df6:	6139      	str	r1, [r7, #16]
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dfe:	edc7 0a00 	vstr	s1, [r7]
 8000e02:	4613      	mov	r3, r2
 8000e04:	81fb      	strh	r3, [r7, #14]
    motor->dir_port      = dir_port;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]
    motor->dir_pin       = dir_pin;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	89fa      	ldrh	r2, [r7, #14]
 8000e10:	809a      	strh	r2, [r3, #4]
    motor->step_port     = step_port;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	609a      	str	r2, [r3, #8]
    motor->step_pin      = step_pin;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	8c3a      	ldrh	r2, [r7, #32]
 8000e1c:	819a      	strh	r2, [r3, #12]
    motor->current_position = 0;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
    motor->target_position  = 0;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
    motor->moving         = false;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2020 	strb.w	r2, [r3, #32]
    motor->direction      = +1;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    motor->step_timer     = 0;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    motor->step_period    = 0;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
    motor->total_steps    = 0;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    motor->step_count     = 0;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	631a      	str	r2, [r3, #48]	@ 0x30
    motor->accel_steps    = 0;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34
    motor->decel_steps    = 0;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    motor->current_speed  = 0.0f;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	63da      	str	r2, [r3, #60]	@ 0x3c
    motor->max_speed      = max_speed;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	641a      	str	r2, [r3, #64]	@ 0x40
    motor->accel          = accel;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	645a      	str	r2, [r3, #68]	@ 0x44
    motor->pulse_high     = false;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    // Initialize GPIO state: DIR=LOW, STEP=LOW
    HAL_GPIO_WritePin(motor->dir_port, motor->dir_pin, GPIO_PIN_RESET);
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	889b      	ldrh	r3, [r3, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	f001 fa23 	bl	80022d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->step_port, motor->step_pin, GPIO_PIN_RESET);
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	6898      	ldr	r0, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	899b      	ldrh	r3, [r3, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	f001 fa1b 	bl	80022d0 <HAL_GPIO_WritePin>
    // (We assume the limit pin is already configured as input with pull-up externally.)
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <StepperMotor_MoveTo>:

/**
 * @see stepper_driver.h
 */
void StepperMotor_MoveTo(StepperMotor *motor, int32_t target_position)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
    motor->target_position = target_position;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	61da      	str	r2, [r3, #28]
    StepperMotor_PlanMotion(motor);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff1f 	bl	8000cf6 <StepperMotor_PlanMotion>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <StepperMotor_Stop>:

/**
 * @see stepper_driver.h
 */
void StepperMotor_Stop(StepperMotor *motor)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    motor->moving    = false;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]
    motor->pulse_high = false;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    // Ensure STEP pin is low
    HAL_GPIO_WritePin(motor->step_port, motor->step_pin, GPIO_PIN_RESET);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6898      	ldr	r0, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	899b      	ldrh	r3, [r3, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f001 f9f4 	bl	80022d0 <HAL_GPIO_WritePin>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <StepperMotor_IsMoving>:

/**
 * @see stepper_driver.h
 */
bool StepperMotor_IsMoving(StepperMotor *motor)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    return motor->moving;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <StepperMotor_Update>:

/**
 * @see stepper_driver.h
 */
void StepperMotor_Update(StepperMotor *motor)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    if (!motor->moving) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1a:	f083 0301 	eor.w	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 80c3 	bne.w	80010ac <StepperMotor_Update+0x1a0>
        return;
    }

    // 2) If we are currently holding the STEP pin HIGH from the last ISR, pull it LOW now.
    if (motor->pulse_high) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00c      	beq.n	8000f4a <StepperMotor_Update+0x3e>
        HAL_GPIO_WritePin(motor->step_port, motor->step_pin, GPIO_PIN_RESET);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	899b      	ldrh	r3, [r3, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f001 f9c8 	bl	80022d0 <HAL_GPIO_WritePin>
        motor->pulse_high = false;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        return;
 8000f48:	e0b1      	b.n	80010ae <StepperMotor_Update+0x1a2>
    }

    // 3) Otherwise, count down our “step_timer.” When it reaches zero, generate the next pulse.
    if (motor->step_timer > 0) {
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <StepperMotor_Update+0x50>
        motor->step_timer--;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (motor->step_timer == 0) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f040 80a4 	bne.w	80010ae <StepperMotor_Update+0x1a2>
        // (a) Determine our current phase: accelerate / cruise / decelerate
        if (motor->step_count < motor->accel_steps) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	da28      	bge.n	8000fc4 <StepperMotor_Update+0xb8>
            // Acceleration: v = sqrt(2 * a * s)
            float s = (float)motor->step_count;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7e:	edc7 7a04 	vstr	s15, [r7, #16]
            motor->current_speed = sqrtf(2.0f * motor->accel * s);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000f88:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f94:	eeb0 0a67 	vmov.f32	s0, s15
 8000f98:	f003 ffa8 	bl	8004eec <sqrtf>
 8000f9c:	eef0 7a40 	vmov.f32	s15, s0
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            if (motor->current_speed < 1.0f) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000fac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	d53d      	bpl.n	8001036 <StepperMotor_Update+0x12a>
                motor->current_speed = 1.0f;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fc2:	e038      	b.n	8001036 <StepperMotor_Update+0x12a>
            }
        }
        else if (motor->step_count < (motor->total_steps - motor->decel_steps)) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd0:	1acb      	subs	r3, r1, r3
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	da04      	bge.n	8000fe0 <StepperMotor_Update+0xd4>
            // Cruise at max_speed
            motor->current_speed = motor->max_speed;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fde:	e02a      	b.n	8001036 <StepperMotor_Update+0x12a>
        }
        else {
            // Deceleration: v = sqrt(2 * a * (remaining_steps))
            float s = (float)(motor->total_steps - motor->step_count);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff2:	edc7 7a05 	vstr	s15, [r7, #20]
            motor->current_speed = sqrtf(2.0f * motor->accel * s);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000ffc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001000:	edd7 7a05 	vldr	s15, [r7, #20]
 8001004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001008:	eeb0 0a67 	vmov.f32	s0, s15
 800100c:	f003 ff6e 	bl	8004eec <sqrtf>
 8001010:	eef0 7a40 	vmov.f32	s15, s0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            if (motor->current_speed < 1.0f) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d503      	bpl.n	8001036 <StepperMotor_Update+0x12a>
                motor->current_speed = 1.0f;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001034:	63da      	str	r2, [r3, #60]	@ 0x3c
            }
        }

        // (b) Convert speed (steps/sec) → period in “timer ticks”
        //     Timer runs at TIMER_FREQUENCY_HZ, so period_ticks = TIMER_FREQUENCY_HZ / speed
        uint32_t raw = (uint32_t)((float)TIMER_FREQUENCY_HZ / motor->current_speed);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800103c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80010b4 <StepperMotor_Update+0x1a8>
 8001040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001048:	ee17 3a90 	vmov	r3, s15
 800104c:	60fb      	str	r3, [r7, #12]
        motor->step_period = (raw < 1) ? 1 : raw;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <StepperMotor_Update+0x14c>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	e000      	b.n	800105a <StepperMotor_Update+0x14e>
 8001058:	2301      	movs	r3, #1
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6293      	str	r3, [r2, #40]	@ 0x28

        // (c) Reload our step_timer
        motor->step_timer = motor->step_period;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24

        // (d) Issue a single step pulse: STEP→HIGH now; next ISR tick will drop it low
        HAL_GPIO_WritePin(motor->step_port, motor->step_pin, GPIO_PIN_SET);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6898      	ldr	r0, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	899b      	ldrh	r3, [r3, #12]
 800106e:	2201      	movs	r2, #1
 8001070:	4619      	mov	r1, r3
 8001072:	f001 f92d 	bl	80022d0 <HAL_GPIO_WritePin>
        motor->pulse_high = true;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        // (e) Update bookkeeping: advance position & step_count
        motor->current_position += motor->direction;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	f992 2021 	ldrsb.w	r2, [r2, #33]	@ 0x21
 8001088:	441a      	add	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	619a      	str	r2, [r3, #24]
        motor->step_count++;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	631a      	str	r2, [r3, #48]	@ 0x30

        // (f) If we have reached the desired total, stop motion completely
        if (motor->step_count >= motor->total_steps) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a0:	429a      	cmp	r2, r3
 80010a2:	db04      	blt.n	80010ae <StepperMotor_Update+0x1a2>
            StepperMotor_Stop(motor);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff0b 	bl	8000ec0 <StepperMotor_Stop>
 80010aa:	e000      	b.n	80010ae <StepperMotor_Update+0x1a2>
        return;
 80010ac:	bf00      	nop
        }
    }
}
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	461c4000 	.word	0x461c4000

080010b8 <StepperManager_Init>:
    float           soft_limit_x_min_mm,
    float           soft_limit_x_max_mm,
    float           soft_limit_y_min_mm,
    float           soft_limit_y_max_mm,
    float           calib_backoff_mm
) {
 80010b8:	b480      	push	{r7}
 80010ba:	b08b      	sub	sp, #44	@ 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6278      	str	r0, [r7, #36]	@ 0x24
 80010c0:	6239      	str	r1, [r7, #32]
 80010c2:	61fa      	str	r2, [r7, #28]
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80010ca:	edc7 0a04 	vstr	s1, [r7, #16]
 80010ce:	ed87 1a03 	vstr	s2, [r7, #12]
 80010d2:	edc7 1a02 	vstr	s3, [r7, #8]
 80010d6:	ed87 2a01 	vstr	s4, [r7, #4]
 80010da:	edc7 2a00 	vstr	s5, [r7]
    mgr->motor_x          = motor_x;
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	6a3a      	ldr	r2, [r7, #32]
 80010e2:	601a      	str	r2, [r3, #0]
    mgr->motor_y          = motor_y;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	605a      	str	r2, [r3, #4]
    mgr->limit_x_port     = limit_x_port;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	609a      	str	r2, [r3, #8]
    mgr->limit_x_pin      = limit_x_pin;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010f4:	819a      	strh	r2, [r3, #12]
    mgr->limit_y_port     = limit_y_port;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010fa:	611a      	str	r2, [r3, #16]
    mgr->limit_y_pin      = limit_y_pin;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001100:	829a      	strh	r2, [r3, #20]
    mgr->steps_per_mm     = steps_per_mm;
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
    mgr->soft_limit_x_min_mm = soft_limit_x_min_mm;
 8001108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	621a      	str	r2, [r3, #32]
    mgr->soft_limit_x_max_mm = soft_limit_x_max_mm;
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24
    mgr->soft_limit_y_min_mm = soft_limit_y_min_mm;
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	629a      	str	r2, [r3, #40]	@ 0x28
    mgr->soft_limit_y_max_mm = soft_limit_y_max_mm;
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
    mgr->calib_backoff_mm = calib_backoff_mm;
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	639a      	str	r2, [r3, #56]	@ 0x38

    mgr->position_x_mm = 0.0f;
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
    mgr->position_y_mm = 0.0f;
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
    mgr->calib_x_homed = false;
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    mgr->calib_y_homed = false;
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    mgr->state         = MANAGER_IDLE;
 8001146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    mgr->default_speed_a = motor_x->max_speed;
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	63da      	str	r2, [r3, #60]	@ 0x3c
    mgr->default_accel_a = motor_x->accel;
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44
    mgr->default_speed_b = motor_y->max_speed;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
    mgr->default_accel_b = motor_y->accel;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800116e:	bf00      	nop
 8001170:	372c      	adds	r7, #44	@ 0x2c
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <StepperManager_StartCalibration>:
 *         When X's switch is pressed, we stop X, back off by calib_backoff_mm (positive),
 *         then immediately set current_position=0.  Same for Y.
 * @note   Must call StepperManager_Update() in your main loop to progress this sequence.
 */
void StepperManager_StartCalibration(StepperManager *mgr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
    // 1) Clear any previous flags
    mgr->calib_x_homed = false;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    mgr->calib_y_homed = false;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

    // 2) Pick a slow "calibration" speed/accel
    float calib_speed = 100.0f;   // steps/sec
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <StepperManager_StartCalibration+0x7c>)
 8001196:	617b      	str	r3, [r7, #20]
    float calib_accel = 200.0f;   // steps/sec²
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <StepperManager_StartCalibration+0x80>)
 800119a:	613b      	str	r3, [r7, #16]

    // Override the low‐level motors' speed/accel
    mgr->motor_x->max_speed = calib_speed;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	641a      	str	r2, [r3, #64]	@ 0x40
    mgr->motor_x->accel     = calib_accel;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	645a      	str	r2, [r3, #68]	@ 0x44
    mgr->motor_y->max_speed = calib_speed;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	641a      	str	r2, [r3, #64]	@ 0x40
    mgr->motor_y->accel     = calib_accel;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	645a      	str	r2, [r3, #68]	@ 0x44

    // 3) Home X (positive‐X direction on CoreXY).
    //
    int32_t big_pos = 1000000000;
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <StepperManager_StartCalibration+0x84>)
 80011be:	60fb      	str	r3, [r7, #12]
    StepperMotor_MoveTo(mgr->motor_x, mgr->motor_x->current_position + big_pos);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fe67 	bl	8000ea2 <StepperMotor_MoveTo>
    StepperMotor_MoveTo(mgr->motor_y, mgr->motor_y->current_position + big_pos);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6858      	ldr	r0, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	699a      	ldr	r2, [r3, #24]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4413      	add	r3, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fe5d 	bl	8000ea2 <StepperMotor_MoveTo>

    mgr->state = MANAGER_CALIBRATING;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	42c80000 	.word	0x42c80000
 80011fc:	43480000 	.word	0x43480000
 8001200:	3b9aca00 	.word	0x3b9aca00

08001204 <StepperManager_MoveTo>:
/**
 * @brief  Request a normal move to (x_mm, y_mm).  If a calibration or previous move
 *         is still running, this call is silently ignored.
 */
void StepperManager_MoveTo(StepperManager *mgr, float new_x_mm, float new_y_mm)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b096      	sub	sp, #88	@ 0x58
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001210:	edc7 0a01 	vstr	s1, [r7, #4]
    // 1) If we're calibrating, ignore the new request
    if (mgr->state == MANAGER_CALIBRATING) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800121a:	2b01      	cmp	r3, #1
 800121c:	f000 819c 	beq.w	8001558 <StepperManager_MoveTo+0x354>
        return;
    }

    // 2) Clamp the desired (x,y) to the soft limits:
    if (new_x_mm < mgr->soft_limit_x_min_mm) new_x_mm = mgr->soft_limit_x_min_mm;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	edd3 7a08 	vldr	s15, [r3, #32]
 8001226:	ed97 7a02 	vldr	s14, [r7, #8]
 800122a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	d502      	bpl.n	800123a <StepperManager_MoveTo+0x36>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	60bb      	str	r3, [r7, #8]
    if (new_x_mm > mgr->soft_limit_x_max_mm) new_x_mm = mgr->soft_limit_x_max_mm;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001240:	ed97 7a02 	vldr	s14, [r7, #8]
 8001244:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	dd02      	ble.n	8001254 <StepperManager_MoveTo+0x50>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	60bb      	str	r3, [r7, #8]
    if (new_y_mm < mgr->soft_limit_y_min_mm) new_y_mm = mgr->soft_limit_y_min_mm;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800125a:	ed97 7a01 	vldr	s14, [r7, #4]
 800125e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	d502      	bpl.n	800126e <StepperManager_MoveTo+0x6a>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	607b      	str	r3, [r7, #4]
    if (new_y_mm > mgr->soft_limit_y_max_mm) new_y_mm = mgr->soft_limit_y_max_mm;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001274:	ed97 7a01 	vldr	s14, [r7, #4]
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	dd02      	ble.n	8001288 <StepperManager_MoveTo+0x84>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001286:	607b      	str	r3, [r7, #4]

    // 3) Compute the required ΔX, ΔY from the current commanded position
    float dx_mm = new_x_mm - mgr->position_x_mm;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	edd3 7a06 	vldr	s15, [r3, #24]
 800128e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001296:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float dy_mm = new_y_mm - mgr->position_y_mm;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edd3 7a07 	vldr	s15, [r3, #28]
 80012a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Skip trivial moves - prevents unnecessary motor recalculation
    if (fabsf(dx_mm) < 0.05f && fabsf(dy_mm) < 0.05f) {
 80012ac:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80012b0:	eef0 7ae7 	vabs.f32	s15, s15
 80012b4:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8001564 <StepperManager_MoveTo+0x360>
 80012b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d50b      	bpl.n	80012da <StepperManager_MoveTo+0xd6>
 80012c2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80012c6:	eef0 7ae7 	vabs.f32	s15, s15
 80012ca:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001564 <StepperManager_MoveTo+0x360>
 80012ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	f100 8141 	bmi.w	800155c <StepperManager_MoveTo+0x358>
        return;
    }

    // 4) Convert each delta to integer steps
    int32_t steps_dx = (int32_t)lrintf(dx_mm * mgr->steps_per_mm);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80012e0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ec:	f003 fe1c 	bl	8004f28 <lrintf>
 80012f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    int32_t steps_dy = (int32_t)lrintf(dy_mm * mgr->steps_per_mm);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80012f8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	f003 fe10 	bl	8004f28 <lrintf>
 8001308:	63b8      	str	r0, [r7, #56]	@ 0x38

    // 5) CoreXY formulas for motor A & B
    //    motorA_delta = +ΔX + ΔY
    //    motorB_delta = +ΔX – ΔY
    int32_t deltaA = steps_dx + steps_dy;
 800130a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800130c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800130e:	4413      	add	r3, r2
 8001310:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t deltaB = steps_dx - steps_dy;
 8001312:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30

    // 6) Compute each motor's absolute target steps
    int32_t targetA = mgr->motor_x->current_position + deltaA;  // note: motor_x ↔ motor A
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001322:	4413      	add	r3, r2
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t targetB = mgr->motor_y->current_position + deltaB;  //       motor_y ↔ motor B
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800132e:	4413      	add	r3, r2
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28

    // 7) Kick off both motors (non‐blocking trapezoid each)
    float distA = fabsf((float)deltaA);
 8001332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133c:	eef0 7ae7 	vabs.f32	s15, s15
 8001340:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float distB = fabsf((float)deltaB);
 8001344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	eef0 7ae7 	vabs.f32	s15, s15
 8001352:	edc7 7a08 	vstr	s15, [r7, #32]

    // Calculate the total distance - used for speed scaling
    float total_dist_mm = sqrtf(dx_mm*dx_mm + dy_mm*dy_mm);
 8001356:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800135a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800135e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001362:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	f003 fdbd 	bl	8004eec <sqrtf>
 8001372:	ed87 0a07 	vstr	s0, [r7, #28]
    
    // For short moves, use higher acceleration but lower max speed
    float speed_scale = 1.0f;
 8001376:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800137a:	657b      	str	r3, [r7, #84]	@ 0x54
    float accel_scale = 1.0f;
 800137c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001380:	653b      	str	r3, [r7, #80]	@ 0x50
    
    if (total_dist_mm < 10.0f) {
 8001382:	edd7 7a07 	vldr	s15, [r7, #28]
 8001386:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800138a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	d505      	bpl.n	80013a0 <StepperManager_MoveTo+0x19c>
        // For very short moves, we want quick acceleration but limited top speed
        speed_scale = 0.7f;
 8001394:	4b74      	ldr	r3, [pc, #464]	@ (8001568 <StepperManager_MoveTo+0x364>)
 8001396:	657b      	str	r3, [r7, #84]	@ 0x54
        accel_scale = 1.5f;
 8001398:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800139c:	653b      	str	r3, [r7, #80]	@ 0x50
 800139e:	e00d      	b.n	80013bc <StepperManager_MoveTo+0x1b8>
    } else if (total_dist_mm > 50.0f) {
 80013a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a4:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 800156c <StepperManager_MoveTo+0x368>
 80013a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	dd04      	ble.n	80013bc <StepperManager_MoveTo+0x1b8>
        // For long moves, allow higher top speed
        speed_scale = 1.2f;
 80013b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001570 <StepperManager_MoveTo+0x36c>)
 80013b4:	657b      	str	r3, [r7, #84]	@ 0x54
        accel_scale = 1.0f;
 80013b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013ba:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    // pick the limiting axis
    float vA, vB;
    if (distA >= distB) {
 80013bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80013c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80013c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	db31      	blt.n	8001432 <StepperManager_MoveTo+0x22e>
        // A is limiting: run A at its default max, scale B
        vA = mgr->default_speed_a * speed_scale;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80013d4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80013d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013dc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        vB = (distB / distA) * mgr->default_speed_a * speed_scale;
 80013e0:	edd7 6a08 	vldr	s13, [r7, #32]
 80013e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80013fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fe:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        // clamp B to its own max if needed
        if (vB > mgr->default_speed_b * speed_scale) vB = mgr->default_speed_b * speed_scale;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001408:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800140c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001410:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001414:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	dd3a      	ble.n	8001494 <StepperManager_MoveTo+0x290>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001424:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8001430:	e030      	b.n	8001494 <StepperManager_MoveTo+0x290>
    } else {
        // B is limiting
        vB = mgr->default_speed_b * speed_scale;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001438:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        vA = (distA / distB) * mgr->default_speed_b * speed_scale;
 8001444:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001448:	edd7 7a08 	vldr	s15, [r7, #32]
 800144c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800145e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001462:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        if (vA > mgr->default_speed_a * speed_scale) vA = mgr->default_speed_a * speed_scale;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800146c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001480:	dd08      	ble.n	8001494 <StepperManager_MoveTo+0x290>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001488:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800148c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001490:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    }

    // scale accelerations proportionally (keeps same motion profile shape)
    float aA = (vA / (mgr->default_speed_a * speed_scale)) * mgr->default_accel_a * accel_scale;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800149a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a2:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80014a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80014b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80014b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014bc:	edc7 7a06 	vstr	s15, [r7, #24]
    float aB = (vB / (mgr->default_speed_b * speed_scale)) * mgr->default_accel_b * accel_scale;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80014c6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80014d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80014e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e8:	edc7 7a05 	vstr	s15, [r7, #20]

    // override the motors' settings just for this move
    mgr->motor_x->max_speed = vA;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014f2:	641a      	str	r2, [r3, #64]	@ 0x40
    mgr->motor_x->accel     = aA;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	645a      	str	r2, [r3, #68]	@ 0x44
    mgr->motor_y->max_speed = vB;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001502:	641a      	str	r2, [r3, #64]	@ 0x40
    mgr->motor_y->accel     = aB;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44

    // If we're already moving, stop immediately to start the new move
    if (mgr->state == MANAGER_MOVING) {
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001512:	2b02      	cmp	r3, #2
 8001514:	d109      	bne.n	800152a <StepperManager_MoveTo+0x326>
        StepperMotor_Stop(mgr->motor_x);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fcd0 	bl	8000ec0 <StepperMotor_Stop>
        StepperMotor_Stop(mgr->motor_y);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fccb 	bl	8000ec0 <StepperMotor_Stop>
    }

    // now kick off both moves
    StepperMotor_MoveTo(mgr->motor_x, targetA);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fcb6 	bl	8000ea2 <StepperMotor_MoveTo>
    StepperMotor_MoveTo(mgr->motor_y, targetB);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fcb0 	bl	8000ea2 <StepperMotor_MoveTo>

    // 8) Update the manager's "commanded" position so we know where the carriage will be when this finishes
    mgr->position_x_mm = new_x_mm;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	619a      	str	r2, [r3, #24]
    mgr->position_y_mm = new_y_mm;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	61da      	str	r2, [r3, #28]

    // 9) Switch state so Update() can watch for completion
    mgr->state = MANAGER_MOVING;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2202      	movs	r2, #2
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001556:	e002      	b.n	800155e <StepperManager_MoveTo+0x35a>
        return;
 8001558:	bf00      	nop
 800155a:	e000      	b.n	800155e <StepperManager_MoveTo+0x35a>
        return;
 800155c:	bf00      	nop
}
 800155e:	3758      	adds	r7, #88	@ 0x58
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	3d4ccccd 	.word	0x3d4ccccd
 8001568:	3f333333 	.word	0x3f333333
 800156c:	42480000 	.word	0x42480000
 8001570:	3f99999a 	.word	0x3f99999a

08001574 <StepperManager_Update>:
 *         - If state==MOVING:
 *             • Check if both motors are no longer moving → state→IDLE.
 *             • Also watch for "unexpected" limit hits: if a switch is pressed during a normal move, that axis is stopped immediately.
 */
void StepperManager_Update(StepperManager *mgr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    if (mgr->state == MANAGER_CALIBRATING) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001582:	2b01      	cmp	r3, #1
 8001584:	f040 810e 	bne.w	80017a4 <StepperManager_Update+0x230>
        // ─── COREXY HOMING: X‐axis first ───────────────────────────────────
        if (!mgr->calib_x_homed) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800158e:	f083 0301 	eor.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d03e      	beq.n	8001616 <StepperManager_Update+0xa2>
            // If X endstop is pressed (active low), stop both motors immediately:
            if (HAL_GPIO_ReadPin(mgr->limit_x_port, mgr->limit_x_pin) == GPIO_PIN_RESET) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	899b      	ldrh	r3, [r3, #12]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4610      	mov	r0, r2
 80015a4:	f000 fe7c 	bl	80022a0 <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d151      	bne.n	8001652 <StepperManager_Update+0xde>
                StepperMotor_Stop(mgr->motor_x);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fc84 	bl	8000ec0 <StepperMotor_Stop>
                StepperMotor_Stop(mgr->motor_y);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fc7f 	bl	8000ec0 <StepperMotor_Stop>

                mgr->calib_x_homed = true;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

                // Back off in +X by calib_backoff_mm
                int32_t backoff_steps = (int32_t) lrintf(mgr->calib_backoff_mm * mgr->steps_per_mm);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80015d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	f003 fca3 	bl	8004f28 <lrintf>
 80015e2:	6278      	str	r0, [r7, #36]	@ 0x24
                // ΔX = +backoff, ΔY = 0  ⇒  ΔA = +backoff, ΔB = +backoff
                int32_t targetA = mgr->motor_x->current_position - backoff_steps;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699a      	ldr	r2, [r3, #24]
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	623b      	str	r3, [r7, #32]
                int32_t targetB = mgr->motor_y->current_position - backoff_steps;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	61fb      	str	r3, [r7, #28]
                StepperMotor_MoveTo(mgr->motor_x, targetA);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a39      	ldr	r1, [r7, #32]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc4d 	bl	8000ea2 <StepperMotor_MoveTo>
                StepperMotor_MoveTo(mgr->motor_y, targetB);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	69f9      	ldr	r1, [r7, #28]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fc47 	bl	8000ea2 <StepperMotor_MoveTo>
 8001614:	e01d      	b.n	8001652 <StepperManager_Update+0xde>
            }
        }
        else {
            // Once back‐off is finished, set both motor step counts = 0
            if (!StepperMotor_IsMoving(mgr->motor_x) &&
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fc68 	bl	8000ef0 <StepperMotor_IsMoving>
 8001620:	4603      	mov	r3, r0
 8001622:	f083 0301 	eor.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d012      	beq.n	8001652 <StepperManager_Update+0xde>
                !StepperMotor_IsMoving(mgr->motor_y))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fc5d 	bl	8000ef0 <StepperMotor_IsMoving>
 8001636:	4603      	mov	r3, r0
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
            if (!StepperMotor_IsMoving(mgr->motor_x) &&
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <StepperManager_Update+0xde>
            {
                mgr->motor_x->current_position = 0;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
                mgr->motor_y->current_position = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
            }
        }

        // ─── COREXY HOMING: Y‐axis second ───────────────────────────────────
        if (mgr->calib_x_homed && !mgr->calib_y_homed) {
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001658:	2b00      	cmp	r3, #0
 800165a:	d073      	beq.n	8001744 <StepperManager_Update+0x1d0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001662:	f083 0301 	eor.w	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d06b      	beq.n	8001744 <StepperManager_Update+0x1d0>
            // Drive toward negative Y: ΔX=0, ΔY<0 ⇒ ΔA negative, ΔB positive
            // We only need to start that move once when we detect X is done. So:
            if (!StepperMotor_IsMoving(mgr->motor_x) &&
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fc3d 	bl	8000ef0 <StepperMotor_IsMoving>
 8001676:	4603      	mov	r3, r0
 8001678:	f083 0301 	eor.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d020      	beq.n	80016c4 <StepperManager_Update+0x150>
                !StepperMotor_IsMoving(mgr->motor_y))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fc32 	bl	8000ef0 <StepperMotor_IsMoving>
 800168c:	4603      	mov	r3, r0
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
            if (!StepperMotor_IsMoving(mgr->motor_x) &&
 8001694:	2b00      	cmp	r3, #0
 8001696:	d015      	beq.n	80016c4 <StepperManager_Update+0x150>
            {
                int32_t big_neg = -1000000000;
 8001698:	4b66      	ldr	r3, [pc, #408]	@ (8001834 <StepperManager_Update+0x2c0>)
 800169a:	61bb      	str	r3, [r7, #24]
                // For Y: ΔX=0, ΔY = –∞ ⇒ ΔA = –∞, ΔB = +∞
                StepperMotor_MoveTo(mgr->motor_x, mgr->motor_x->current_position + big_neg); // A backward
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4413      	add	r3, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fbf9 	bl	8000ea2 <StepperMotor_MoveTo>
                StepperMotor_MoveTo(mgr->motor_y, mgr->motor_y->current_position - big_neg); // B forward
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6858      	ldr	r0, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fbef 	bl	8000ea2 <StepperMotor_MoveTo>
            }

            // Check if Y endstop is pressed:
            if (HAL_GPIO_ReadPin(mgr->limit_y_port, mgr->limit_y_pin) == GPIO_PIN_RESET) {
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	8a9b      	ldrh	r3, [r3, #20]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4610      	mov	r0, r2
 80016d0:	f000 fde6 	bl	80022a0 <HAL_GPIO_ReadPin>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 80a8 	bne.w	800182c <StepperManager_Update+0x2b8>
                StepperMotor_Stop(mgr->motor_x);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fbed 	bl	8000ec0 <StepperMotor_Stop>
                StepperMotor_Stop(mgr->motor_y);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fbe8 	bl	8000ec0 <StepperMotor_Stop>
                mgr->calib_y_homed = true;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

                // Back off in +Y (which, in CoreXY, is "A_forward & B_forward")
                int32_t backoff_steps = (int32_t) lrintf(mgr->calib_backoff_mm * mgr->steps_per_mm);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	f003 fc0c 	bl	8004f28 <lrintf>
 8001710:	6178      	str	r0, [r7, #20]
                // ΔX=0, ΔY=+backoff ⇒ ΔA=+backoff, ΔB=+backoff
                int32_t targetA = mgr->motor_x->current_position + backoff_steps;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4413      	add	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
                int32_t targetB = mgr->motor_y->current_position - backoff_steps;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	60fb      	str	r3, [r7, #12]
                StepperMotor_MoveTo(mgr->motor_x, targetA);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6939      	ldr	r1, [r7, #16]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fbb6 	bl	8000ea2 <StepperMotor_MoveTo>
                StepperMotor_MoveTo(mgr->motor_y, targetB);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fbb0 	bl	8000ea2 <StepperMotor_MoveTo>
            if (HAL_GPIO_ReadPin(mgr->limit_y_port, mgr->limit_y_pin) == GPIO_PIN_RESET) {
 8001742:	e073      	b.n	800182c <StepperManager_Update+0x2b8>
            }
        }
        else if (mgr->calib_y_homed) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800174a:	2b00      	cmp	r3, #0
 800174c:	d06e      	beq.n	800182c <StepperManager_Update+0x2b8>
            // Once both back-off moves complete, zero out step counts, report (0,0)
            if (!StepperMotor_IsMoving(mgr->motor_x) &&
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fbcc 	bl	8000ef0 <StepperMotor_IsMoving>
 8001758:	4603      	mov	r3, r0
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d063      	beq.n	800182c <StepperManager_Update+0x2b8>
                !StepperMotor_IsMoving(mgr->motor_y))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fbc1 	bl	8000ef0 <StepperMotor_IsMoving>
 800176e:	4603      	mov	r3, r0
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
            if (!StepperMotor_IsMoving(mgr->motor_x) &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	d058      	beq.n	800182c <StepperManager_Update+0x2b8>
            {
                mgr->motor_x->current_position = 0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
                mgr->motor_y->current_position = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
                mgr->position_x_mm = mgr->soft_limit_x_max_mm;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
                mgr->position_y_mm = mgr->soft_limit_y_min_mm;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	61da      	str	r2, [r3, #28]
                mgr->state = MANAGER_IDLE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80017a2:	e043      	b.n	800182c <StepperManager_Update+0x2b8>
            }
        }
    }
    else if (mgr->state == MANAGER_MOVING) {
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d13e      	bne.n	800182c <StepperManager_Update+0x2b8>
        // ─── During normal moves, if any limit switch is unexpectedly hit, stop that axis ─────
        // For CoreXY, if X or Y endstop is tripped during a normal move, you still want to
        // immediately kill both motors—otherwise the carriage may try to plow into the endstop.
        if (HAL_GPIO_ReadPin(mgr->limit_x_port, mgr->limit_x_pin) == GPIO_PIN_RESET ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	899b      	ldrh	r3, [r3, #12]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f000 fd71 	bl	80022a0 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00a      	beq.n	80017da <StepperManager_Update+0x266>
            HAL_GPIO_ReadPin(mgr->limit_y_port, mgr->limit_y_pin) == GPIO_PIN_RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	8a9b      	ldrh	r3, [r3, #20]
 80017cc:	4619      	mov	r1, r3
 80017ce:	4610      	mov	r0, r2
 80017d0:	f000 fd66 	bl	80022a0 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
        if (HAL_GPIO_ReadPin(mgr->limit_x_port, mgr->limit_x_pin) == GPIO_PIN_RESET ||
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10e      	bne.n	80017f8 <StepperManager_Update+0x284>
        {
            StepperMotor_Stop(mgr->motor_x);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fb6e 	bl	8000ec0 <StepperMotor_Stop>
            StepperMotor_Stop(mgr->motor_y);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fb69 	bl	8000ec0 <StepperMotor_Stop>
            mgr->state = MANAGER_IDLE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            return;
 80017f6:	e019      	b.n	800182c <StepperManager_Update+0x2b8>
        }

        // If both motors finished their planned trapezoidal runs → done
        if (!StepperMotor_IsMoving(mgr->motor_x) &&
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fb77 	bl	8000ef0 <StepperMotor_IsMoving>
 8001802:	4603      	mov	r3, r0
 8001804:	f083 0301 	eor.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00e      	beq.n	800182c <StepperManager_Update+0x2b8>
            !StepperMotor_IsMoving(mgr->motor_y))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fb6c 	bl	8000ef0 <StepperMotor_IsMoving>
 8001818:	4603      	mov	r3, r0
 800181a:	f083 0301 	eor.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
        if (!StepperMotor_IsMoving(mgr->motor_x) &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <StepperManager_Update+0x2b8>
        {
            mgr->state = MANAGER_IDLE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
    }
    // else (mgr->state == MANAGER_IDLE) → nothing to do
}
 800182c:	3728      	adds	r7, #40	@ 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	c4653600 	.word	0xc4653600

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	4a0f      	ldr	r2, [pc, #60]	@ (8001884 <HAL_MspInit+0x4c>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184c:	6453      	str	r3, [r2, #68]	@ 0x44
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a08      	ldr	r2, [pc, #32]	@ (8001884 <HAL_MspInit+0x4c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001898:	d115      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_TIM_Base_MspInit+0x48>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <HAL_TIM_Base_MspInit+0x48>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_TIM_Base_MspInit+0x48>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	201c      	movs	r0, #28
 80018bc:	f000 faa3 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c0:	201c      	movs	r0, #28
 80018c2:	f000 fabc 	bl	8001e3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	@ 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a3a      	ldr	r2, [pc, #232]	@ (80019dc <HAL_UART_MspInit+0x108>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d135      	bne.n	8001962 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a38      	ldr	r2, [pc, #224]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 8001900:	f043 0310 	orr.w	r3, r3, #16
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a31      	ldr	r2, [pc, #196]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800192e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001940:	2307      	movs	r3, #7
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4826      	ldr	r0, [pc, #152]	@ (80019e4 <HAL_UART_MspInit+0x110>)
 800194c:	f000 fb24 	bl	8001f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2025      	movs	r0, #37	@ 0x25
 8001956:	f000 fa56 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800195a:	2025      	movs	r0, #37	@ 0x25
 800195c:	f000 fa6f 	bl	8001e3e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001960:	e038      	b.n	80019d4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a20      	ldr	r2, [pc, #128]	@ (80019e8 <HAL_UART_MspInit+0x114>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d133      	bne.n	80019d4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	4a1a      	ldr	r2, [pc, #104]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197a:	6413      	str	r3, [r2, #64]	@ 0x40
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001990:	4a13      	ldr	r2, [pc, #76]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6313      	str	r3, [r2, #48]	@ 0x30
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_UART_MspInit+0x10c>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019a4:	230c      	movs	r3, #12
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b4:	2307      	movs	r3, #7
 80019b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4809      	ldr	r0, [pc, #36]	@ (80019e4 <HAL_UART_MspInit+0x110>)
 80019c0:	f000 faea 	bl	8001f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2026      	movs	r0, #38	@ 0x26
 80019ca:	f000 fa1c 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ce:	2026      	movs	r0, #38	@ 0x26
 80019d0:	f000 fa35 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 80019d4:	bf00      	nop
 80019d6:	3730      	adds	r7, #48	@ 0x30
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40011000 	.word	0x40011000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40004400 	.word	0x40004400

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <NMI_Handler+0x4>

080019f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <MemManage_Handler+0x4>

08001a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a42:	f000 f8e5 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <TIM2_IRQHandler+0x10>)
 8001a52:	f001 f9b9 	bl	8002dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000164 	.word	0x20000164

08001a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <USART1_IRQHandler+0x10>)
 8001a66:	f001 fe37 	bl	80036d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200001ac 	.word	0x200001ac

08001a74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <USART2_IRQHandler+0x10>)
 8001a7a:	f001 fe2d 	bl	80036d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200001f4 	.word	0x200001f4

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	@ (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f002 fda2 	bl	8004600 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20020000 	.word	0x20020000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	20000284 	.word	0x20000284
 8001af0:	200003d8 	.word	0x200003d8

08001af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b1c:	f7ff ffea 	bl	8001af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	@ (8001b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f002 fd61 	bl	800460c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7fe fd37 	bl	80005bc <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b5c:	0800507c 	.word	0x0800507c
  ldr r2, =_sbss
 8001b60:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b64:	200003d4 	.word	0x200003d4

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f92b 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fe4a 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f943 	bl	8001e5a <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f90b 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000010 	.word	0x20000010
 8001c0c:	2000000c 	.word	0x2000000c

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000010 	.word	0x20000010
 8001c34:	20000288 	.word	0x20000288

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000288 	.word	0x20000288

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	@ (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	@ (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	@ (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff feda 	bl	8001c38 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d008      	beq.n	8001ea4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e052      	b.n	8001f4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0216 	bic.w	r2, r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ec2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <HAL_DMA_Abort+0x62>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0208 	bic.w	r2, r2, #8
 8001ee2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef4:	e013      	b.n	8001f1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef6:	f7ff fe9f 	bl	8001c38 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d90c      	bls.n	8001f1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e015      	b.n	8001f4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e4      	bne.n	8001ef6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f30:	223f      	movs	r2, #63	@ 0x3f
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d004      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e00c      	b.n	8001f8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2205      	movs	r2, #5
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	@ 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e159      	b.n	8002268 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 8148 	bne.w	8002262 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d005      	beq.n	8001fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d130      	bne.n	800204c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0201 	and.w	r2, r3, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d017      	beq.n	8002088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d123      	bne.n	80020dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80a2 	beq.w	8002262 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b57      	ldr	r3, [pc, #348]	@ (8002280 <HAL_GPIO_Init+0x2e8>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	4a56      	ldr	r2, [pc, #344]	@ (8002280 <HAL_GPIO_Init+0x2e8>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212c:	6453      	str	r3, [r2, #68]	@ 0x44
 800212e:	4b54      	ldr	r3, [pc, #336]	@ (8002280 <HAL_GPIO_Init+0x2e8>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213a:	4a52      	ldr	r2, [pc, #328]	@ (8002284 <HAL_GPIO_Init+0x2ec>)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a49      	ldr	r2, [pc, #292]	@ (8002288 <HAL_GPIO_Init+0x2f0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d019      	beq.n	800219a <HAL_GPIO_Init+0x202>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a48      	ldr	r2, [pc, #288]	@ (800228c <HAL_GPIO_Init+0x2f4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <HAL_GPIO_Init+0x1fe>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a47      	ldr	r2, [pc, #284]	@ (8002290 <HAL_GPIO_Init+0x2f8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00d      	beq.n	8002192 <HAL_GPIO_Init+0x1fa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a46      	ldr	r2, [pc, #280]	@ (8002294 <HAL_GPIO_Init+0x2fc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <HAL_GPIO_Init+0x1f6>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a45      	ldr	r2, [pc, #276]	@ (8002298 <HAL_GPIO_Init+0x300>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_GPIO_Init+0x1f2>
 8002186:	2304      	movs	r3, #4
 8002188:	e008      	b.n	800219c <HAL_GPIO_Init+0x204>
 800218a:	2307      	movs	r3, #7
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x204>
 800218e:	2303      	movs	r3, #3
 8002190:	e004      	b.n	800219c <HAL_GPIO_Init+0x204>
 8002192:	2302      	movs	r3, #2
 8002194:	e002      	b.n	800219c <HAL_GPIO_Init+0x204>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_GPIO_Init+0x204>
 800219a:	2300      	movs	r3, #0
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	f002 0203 	and.w	r2, r2, #3
 80021a2:	0092      	lsls	r2, r2, #2
 80021a4:	4093      	lsls	r3, r2
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ac:	4935      	ldr	r1, [pc, #212]	@ (8002284 <HAL_GPIO_Init+0x2ec>)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ba:	4b38      	ldr	r3, [pc, #224]	@ (800229c <HAL_GPIO_Init+0x304>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021de:	4a2f      	ldr	r2, [pc, #188]	@ (800229c <HAL_GPIO_Init+0x304>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <HAL_GPIO_Init+0x304>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002208:	4a24      	ldr	r2, [pc, #144]	@ (800229c <HAL_GPIO_Init+0x304>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800220e:	4b23      	ldr	r3, [pc, #140]	@ (800229c <HAL_GPIO_Init+0x304>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002232:	4a1a      	ldr	r2, [pc, #104]	@ (800229c <HAL_GPIO_Init+0x304>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002238:	4b18      	ldr	r3, [pc, #96]	@ (800229c <HAL_GPIO_Init+0x304>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800225c:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <HAL_GPIO_Init+0x304>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3301      	adds	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2b0f      	cmp	r3, #15
 800226c:	f67f aea2 	bls.w	8001fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40013800 	.word	0x40013800
 8002288:	40020000 	.word	0x40020000
 800228c:	40020400 	.word	0x40020400
 8002290:	40020800 	.word	0x40020800
 8002294:	40020c00 	.word	0x40020c00
 8002298:	40021000 	.word	0x40021000
 800229c:	40013c00 	.word	0x40013c00

080022a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e0:	787b      	ldrb	r3, [r7, #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ec:	e003      	b.n	80022f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	041a      	lsls	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	619a      	str	r2, [r3, #24]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4013      	ands	r3, r2
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43d9      	mvns	r1, r3
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	400b      	ands	r3, r1
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e267      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002356:	4b88      	ldr	r3, [pc, #544]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4b85      	ldr	r3, [pc, #532]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b82      	ldr	r3, [pc, #520]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b7e      	ldr	r3, [pc, #504]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e242      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b76      	ldr	r3, [pc, #472]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a75      	ldr	r2, [pc, #468]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b70      	ldr	r3, [pc, #448]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6c      	ldr	r2, [pc, #432]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b69      	ldr	r3, [pc, #420]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a68      	ldr	r2, [pc, #416]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b66      	ldr	r3, [pc, #408]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a65      	ldr	r2, [pc, #404]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fc22 	bl	8001c38 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff fc1e 	bl	8001c38 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	@ 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e207      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b5b      	ldr	r3, [pc, #364]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff fc0e 	bl	8001c38 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff fc0a 	bl	8001c38 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1f3      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b51      	ldr	r3, [pc, #324]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800244e:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b47      	ldr	r3, [pc, #284]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b44      	ldr	r3, [pc, #272]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1c7      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4937      	ldr	r1, [pc, #220]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b34      	ldr	r3, [pc, #208]	@ (800257c <HAL_RCC_OscConfig+0x244>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7ff fbc3 	bl	8001c38 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b6:	f7ff fbbf 	bl	8001c38 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1a8      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4925      	ldr	r1, [pc, #148]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_RCC_OscConfig+0x244>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff fba2 	bl	8001c38 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f8:	f7ff fb9e 	bl	8001c38 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e187      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d036      	beq.n	8002590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <HAL_RCC_OscConfig+0x248>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7ff fb82 	bl	8001c38 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002538:	f7ff fb7e 	bl	8001c38 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e167      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_OscConfig+0x240>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e01b      	b.n	8002590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_RCC_OscConfig+0x248>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff fb6b 	bl	8001c38 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e00e      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002566:	f7ff fb67 	bl	8001c38 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d907      	bls.n	8002584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e150      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
 8002578:	40023800 	.word	0x40023800
 800257c:	42470000 	.word	0x42470000
 8002580:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	4b88      	ldr	r3, [pc, #544]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ea      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8097 	beq.w	80026cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a2:	4b81      	ldr	r3, [pc, #516]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b7d      	ldr	r3, [pc, #500]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	4a7c      	ldr	r2, [pc, #496]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025be:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b77      	ldr	r3, [pc, #476]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b74      	ldr	r3, [pc, #464]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a73      	ldr	r2, [pc, #460]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7ff fb27 	bl	8001c38 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7ff fb23 	bl	8001c38 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e10c      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <HAL_RCC_OscConfig+0x474>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x2ea>
 8002614:	4b64      	ldr	r3, [pc, #400]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	4a63      	ldr	r2, [pc, #396]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002620:	e01c      	b.n	800265c <HAL_RCC_OscConfig+0x324>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x30c>
 800262a:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	4a5e      	ldr	r2, [pc, #376]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6713      	str	r3, [r2, #112]	@ 0x70
 8002636:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	4a5b      	ldr	r2, [pc, #364]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6713      	str	r3, [r2, #112]	@ 0x70
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0x324>
 8002644:	4b58      	ldr	r3, [pc, #352]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	4a57      	ldr	r2, [pc, #348]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002650:	4b55      	ldr	r3, [pc, #340]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002654:	4a54      	ldr	r2, [pc, #336]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002656:	f023 0304 	bic.w	r3, r3, #4
 800265a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d015      	beq.n	8002690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7ff fae8 	bl	8001c38 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7ff fae4 	bl	8001c38 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0cb      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002682:	4b49      	ldr	r3, [pc, #292]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ee      	beq.n	800266c <HAL_RCC_OscConfig+0x334>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7ff fad2 	bl	8001c38 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002696:	e00a      	b.n	80026ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7ff face 	bl	8001c38 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0b5      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ae:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ee      	bne.n	8002698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	4a38      	ldr	r2, [pc, #224]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a1 	beq.w	8002818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d6:	4b34      	ldr	r3, [pc, #208]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d05c      	beq.n	800279c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d141      	bne.n	800276e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ea:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7ff faa2 	bl	8001c38 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f8:	f7ff fa9e 	bl	8001c38 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e087      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	491b      	ldr	r1, [pc, #108]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7ff fa77 	bl	8001c38 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7ff fa73 	bl	8001c38 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e05c      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x416>
 800276c:	e054      	b.n	8002818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff fa60 	bl	8001c38 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7ff fa5c 	bl	8001c38 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e045      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_RCC_OscConfig+0x470>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x444>
 800279a:	e03d      	b.n	8002818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e038      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40007000 	.word	0x40007000
 80027b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_RCC_OscConfig+0x4ec>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d028      	beq.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d121      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d11a      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027e4:	4013      	ands	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d111      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	3b01      	subs	r3, #1
 80027fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d107      	bne.n	8002814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7ff f98e 	bl	8001c38 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7ff f98a 	bl	8001c38 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	@ (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f8ee 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08005018 	.word	0x08005018
 80029ec:	20000008 	.word	0x20000008
 80029f0:	2000000c 	.word	0x2000000c

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b094      	sub	sp, #80	@ 0x50
 80029fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0c:	4b79      	ldr	r3, [pc, #484]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80e1 	bhi.w	8002be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e0db      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b73      	ldr	r3, [pc, #460]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a2c:	e0db      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b72      	ldr	r3, [pc, #456]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a32:	e0d8      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	2200      	movs	r2, #0
 8002a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a5e:	2300      	movs	r3, #0
 8002a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a66:	4622      	mov	r2, r4
 8002a68:	462b      	mov	r3, r5
 8002a6a:	f04f 0000 	mov.w	r0, #0
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	0159      	lsls	r1, r3, #5
 8002a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a78:	0150      	lsls	r0, r2, #5
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4621      	mov	r1, r4
 8002a80:	1a51      	subs	r1, r2, r1
 8002a82:	6139      	str	r1, [r7, #16]
 8002a84:	4629      	mov	r1, r5
 8002a86:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a98:	4659      	mov	r1, fp
 8002a9a:	018b      	lsls	r3, r1, #6
 8002a9c:	4651      	mov	r1, sl
 8002a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aa2:	4651      	mov	r1, sl
 8002aa4:	018a      	lsls	r2, r1, #6
 8002aa6:	4651      	mov	r1, sl
 8002aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8002aac:	4659      	mov	r1, fp
 8002aae:	eb63 0901 	sbc.w	r9, r3, r1
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ac6:	4690      	mov	r8, r2
 8002ac8:	4699      	mov	r9, r3
 8002aca:	4623      	mov	r3, r4
 8002acc:	eb18 0303 	adds.w	r3, r8, r3
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	eb49 0303 	adc.w	r3, r9, r3
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	028b      	lsls	r3, r1, #10
 8002aea:	4621      	mov	r1, r4
 8002aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af0:	4621      	mov	r1, r4
 8002af2:	028a      	lsls	r2, r1, #10
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002afa:	2200      	movs	r2, #0
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b04:	f7fd fbc4 	bl	8000290 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b10:	e058      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b38      	ldr	r3, [pc, #224]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	464b      	mov	r3, r9
 8002b30:	f04f 0000 	mov.w	r0, #0
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	0159      	lsls	r1, r3, #5
 8002b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3e:	0150      	lsls	r0, r2, #5
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4641      	mov	r1, r8
 8002b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b64:	ebb2 040a 	subs.w	r4, r2, sl
 8002b68:	eb63 050b 	sbc.w	r5, r3, fp
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	464b      	mov	r3, r9
 8002b88:	eb45 0303 	adc.w	r3, r5, r3
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	028b      	lsls	r3, r1, #10
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	028a      	lsls	r2, r1, #10
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	61fa      	str	r2, [r7, #28]
 8002bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb8:	f7fd fb6a 	bl	8000290 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3750      	adds	r7, #80	@ 0x50
 8002bec:	46bd      	mov	sp, r7
 8002bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	00f42400 	.word	0x00f42400

08002bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b03      	ldr	r3, [pc, #12]	@ (8002c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000008 	.word	0x20000008

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff0 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0a9b      	lsrs	r3, r3, #10
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	@ (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08005028 	.word	0x08005028

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c40:	f7ff ffdc 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0b5b      	lsrs	r3, r3, #13
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	@ (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08005028 	.word	0x08005028

08002c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e041      	b.n	8002cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe fdfc 	bl	8001888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 fa70 	bl	8003188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d001      	beq.n	8002d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e044      	b.n	8002da6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d018      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x6c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d46:	d013      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x6c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002db8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00e      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x6c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a19      	ldr	r2, [pc, #100]	@ (8002dbc <HAL_TIM_Base_Start_IT+0xb8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x6c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x6c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a16      	ldr	r2, [pc, #88]	@ (8002dc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d111      	bne.n	8002d94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d010      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d92:	e007      	b.n	8002da4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40000c00 	.word	0x40000c00
 8002dc4:	40014000 	.word	0x40014000

08002dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d020      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0202 	mvn.w	r2, #2
 8002dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f999 	bl	800314a <HAL_TIM_IC_CaptureCallback>
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f98b 	bl	8003136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f99c 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d020      	beq.n	8002e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0204 	mvn.w	r2, #4
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f973 	bl	800314a <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f965 	bl	8003136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f976 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d020      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01b      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0208 	mvn.w	r2, #8
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f94d 	bl	800314a <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f93f 	bl	8003136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f950 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d020      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0210 	mvn.w	r2, #16
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f927 	bl	800314a <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f919 	bl	8003136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f92a 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00c      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0201 	mvn.w	r2, #1
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd fe24 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fab6 	bl	80034c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8fb 	bl	8003172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0220 	mvn.w	r2, #32
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa88 	bl	80034b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0b4      	b.n	800312e <HAL_TIM_ConfigClockSource+0x186>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ffc:	d03e      	beq.n	800307c <HAL_TIM_ConfigClockSource+0xd4>
 8002ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003002:	f200 8087 	bhi.w	8003114 <HAL_TIM_ConfigClockSource+0x16c>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300a:	f000 8086 	beq.w	800311a <HAL_TIM_ConfigClockSource+0x172>
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003012:	d87f      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b70      	cmp	r3, #112	@ 0x70
 8003016:	d01a      	beq.n	800304e <HAL_TIM_ConfigClockSource+0xa6>
 8003018:	2b70      	cmp	r3, #112	@ 0x70
 800301a:	d87b      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b60      	cmp	r3, #96	@ 0x60
 800301e:	d050      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003020:	2b60      	cmp	r3, #96	@ 0x60
 8003022:	d877      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b50      	cmp	r3, #80	@ 0x50
 8003026:	d03c      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003028:	2b50      	cmp	r3, #80	@ 0x50
 800302a:	d873      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b40      	cmp	r3, #64	@ 0x40
 800302e:	d058      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d86f      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b30      	cmp	r3, #48	@ 0x30
 8003036:	d064      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	2b30      	cmp	r3, #48	@ 0x30
 800303a:	d86b      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b20      	cmp	r3, #32
 800303e:	d060      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d867      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x16c>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05c      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x15a>
 8003048:	2b10      	cmp	r3, #16
 800304a:	d05a      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x15a>
 800304c:	e062      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800305e:	f000 f999 	bl	8003394 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	609a      	str	r2, [r3, #8]
      break;
 800307a:	e04f      	b.n	800311c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800308c:	f000 f982 	bl	8003394 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800309e:	609a      	str	r2, [r3, #8]
      break;
 80030a0:	e03c      	b.n	800311c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ae:	461a      	mov	r2, r3
 80030b0:	f000 f8f6 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2150      	movs	r1, #80	@ 0x50
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f94f 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 80030c0:	e02c      	b.n	800311c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ce:	461a      	mov	r2, r3
 80030d0:	f000 f915 	bl	80032fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2160      	movs	r1, #96	@ 0x60
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f93f 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 80030e0:	e01c      	b.n	800311c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ee:	461a      	mov	r2, r3
 80030f0:	f000 f8d6 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2140      	movs	r1, #64	@ 0x40
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f92f 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 8003100:	e00c      	b.n	800311c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f000 f926 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 8003112:	e003      	b.n	800311c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
      break;
 8003118:	e000      	b.n	800311c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800311a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3a      	ldr	r2, [pc, #232]	@ (8003284 <TIM_Base_SetConfig+0xfc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00f      	beq.n	80031c0 <TIM_Base_SetConfig+0x38>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a6:	d00b      	beq.n	80031c0 <TIM_Base_SetConfig+0x38>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a37      	ldr	r2, [pc, #220]	@ (8003288 <TIM_Base_SetConfig+0x100>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <TIM_Base_SetConfig+0x38>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a36      	ldr	r2, [pc, #216]	@ (800328c <TIM_Base_SetConfig+0x104>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_Base_SetConfig+0x38>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a35      	ldr	r2, [pc, #212]	@ (8003290 <TIM_Base_SetConfig+0x108>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d108      	bne.n	80031d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003284 <TIM_Base_SetConfig+0xfc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01b      	beq.n	8003212 <TIM_Base_SetConfig+0x8a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e0:	d017      	beq.n	8003212 <TIM_Base_SetConfig+0x8a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a28      	ldr	r2, [pc, #160]	@ (8003288 <TIM_Base_SetConfig+0x100>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <TIM_Base_SetConfig+0x8a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a27      	ldr	r2, [pc, #156]	@ (800328c <TIM_Base_SetConfig+0x104>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00f      	beq.n	8003212 <TIM_Base_SetConfig+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a26      	ldr	r2, [pc, #152]	@ (8003290 <TIM_Base_SetConfig+0x108>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00b      	beq.n	8003212 <TIM_Base_SetConfig+0x8a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a25      	ldr	r2, [pc, #148]	@ (8003294 <TIM_Base_SetConfig+0x10c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <TIM_Base_SetConfig+0x8a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a24      	ldr	r2, [pc, #144]	@ (8003298 <TIM_Base_SetConfig+0x110>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_Base_SetConfig+0x8a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a23      	ldr	r2, [pc, #140]	@ (800329c <TIM_Base_SetConfig+0x114>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d108      	bne.n	8003224 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a0e      	ldr	r2, [pc, #56]	@ (8003284 <TIM_Base_SetConfig+0xfc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d103      	bne.n	8003258 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f023 0201 	bic.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]
  }
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40014000 	.word	0x40014000
 8003298:	40014400 	.word	0x40014400
 800329c:	40014800 	.word	0x40014800

080032a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0201 	bic.w	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 030a 	bic.w	r3, r3, #10
 80032dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f023 0210 	bic.w	r2, r3, #16
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	031b      	lsls	r3, r3, #12
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800333a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	621a      	str	r2, [r3, #32]
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	f043 0307 	orr.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	021a      	lsls	r2, r3, #8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	609a      	str	r2, [r3, #8]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e050      	b.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1c      	ldr	r2, [pc, #112]	@ (800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003438:	d013      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a16      	ldr	r2, [pc, #88]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a15      	ldr	r2, [pc, #84]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a13      	ldr	r2, [pc, #76]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40014000 	.word	0x40014000

080034b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e042      	b.n	8003570 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe f9e8 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	@ 0x24
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800351a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fdbd 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b20      	cmp	r3, #32
 8003596:	d175      	bne.n	8003684 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_UART_Transmit+0x2c>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e06e      	b.n	8003686 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2221      	movs	r2, #33	@ 0x21
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035b6:	f7fe fb3f 	bl	8001c38 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d0:	d108      	bne.n	80035e4 <HAL_UART_Transmit+0x6c>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e003      	b.n	80035ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035ec:	e02e      	b.n	800364c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	2180      	movs	r1, #128	@ 0x80
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fb1f 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e03a      	b.n	8003686 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003624:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	3302      	adds	r3, #2
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	e007      	b.n	800363e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	3301      	adds	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1cb      	bne.n	80035ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	2140      	movs	r1, #64	@ 0x40
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 faeb 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e006      	b.n	8003686 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	4613      	mov	r3, r2
 800369a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d112      	bne.n	80036ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Receive_IT+0x26>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e00b      	b.n	80036d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	461a      	mov	r2, r3
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb12 	bl	8003cee <UART_Start_Receive_IT>
 80036ca:	4603      	mov	r3, r0
 80036cc:	e000      	b.n	80036d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
  }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0ba      	sub	sp, #232	@ 0xe8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800370a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_UART_IRQHandler+0x66>
 800372a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fbf2 	bl	8003f20 <UART_Receive_IT>
      return;
 800373c:	e25b      	b.n	8003bf6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800373e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80de 	beq.w	8003904 <HAL_UART_IRQHandler+0x22c>
 8003748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003758:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80d1 	beq.w	8003904 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_UART_IRQHandler+0xae>
 800376e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_UART_IRQHandler+0xd2>
 8003792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_UART_IRQHandler+0xf6>
 80037b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f043 0204 	orr.w	r2, r3, #4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d011      	beq.n	80037fe <HAL_UART_IRQHandler+0x126>
 80037da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f043 0208 	orr.w	r2, r3, #8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 81f2 	beq.w	8003bec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_UART_IRQHandler+0x14e>
 8003814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fb7d 	bl	8003f20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_UART_IRQHandler+0x17a>
 800384a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d04f      	beq.n	80038f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa85 	bl	8003d62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d141      	bne.n	80038ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3314      	adds	r3, #20
 800386c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800387c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800389e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1d9      	bne.n	8003866 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d013      	beq.n	80038e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038be:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab8 <HAL_UART_IRQHandler+0x3e0>)
 80038c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fb43 	bl	8001f52 <HAL_DMA_Abort_IT>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038dc:	4610      	mov	r0, r2
 80038de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	e00e      	b.n	8003900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f994 	bl	8003c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e00a      	b.n	8003900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f990 	bl	8003c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e006      	b.n	8003900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f98c 	bl	8003c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038fe:	e175      	b.n	8003bec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	bf00      	nop
    return;
 8003902:	e173      	b.n	8003bec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	2b01      	cmp	r3, #1
 800390a:	f040 814f 	bne.w	8003bac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 8148 	beq.w	8003bac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800391c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8141 	beq.w	8003bac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394a:	2b40      	cmp	r3, #64	@ 0x40
 800394c:	f040 80b6 	bne.w	8003abc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800395c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8145 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800396a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800396e:	429a      	cmp	r2, r3
 8003970:	f080 813e 	bcs.w	8003bf0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800397a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003986:	f000 8088 	beq.w	8003a9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1d9      	bne.n	800398a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3314      	adds	r3, #20
 80039dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3314      	adds	r3, #20
 80039f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e1      	bne.n	80039d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3314      	adds	r3, #20
 8003a18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3314      	adds	r3, #20
 8003a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e3      	bne.n	8003a12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a6a:	f023 0310 	bic.w	r3, r3, #16
 8003a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e3      	bne.n	8003a58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe f9ec 	bl	8001e72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f8b7 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ab6:	e09b      	b.n	8003bf0 <HAL_UART_IRQHandler+0x518>
 8003ab8:	08003e29 	.word	0x08003e29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 808e 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8089 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b06:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e3      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3314      	adds	r3, #20
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	623b      	str	r3, [r7, #32]
   return(result);
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e3      	bne.n	8003b1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0310 	bic.w	r3, r3, #16
 8003b76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b84:	61fa      	str	r2, [r7, #28]
 8003b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	617b      	str	r3, [r7, #20]
   return(result);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e3      	bne.n	8003b60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f83d 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003baa:	e023      	b.n	8003bf4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <HAL_UART_IRQHandler+0x4f4>
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f943 	bl	8003e50 <UART_Transmit_IT>
    return;
 8003bca:	e014      	b.n	8003bf6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x51e>
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f983 	bl	8003ef0 <UART_EndTransmit_IT>
    return;
 8003bea:	e004      	b.n	8003bf6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003bec:	bf00      	nop
 8003bee:	e002      	b.n	8003bf6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf4:	bf00      	nop
  }
}
 8003bf6:	37e8      	adds	r7, #232	@ 0xe8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4c:	e03b      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d037      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fd ffef 	bl	8001c38 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e03a      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d023      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b80      	cmp	r3, #128	@ 0x80
 8003c82:	d020      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b40      	cmp	r3, #64	@ 0x40
 8003c88:	d01d      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d116      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f857 	bl	8003d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e00f      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d0b4      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2222      	movs	r2, #34	@ 0x22
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0220 	orr.w	r2, r2, #32
 8003d52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b095      	sub	sp, #84	@ 0x54
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e5      	bne.n	8003d6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d119      	bne.n	8003e0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f023 0310 	bic.w	r3, r3, #16
 8003df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfa:	61ba      	str	r2, [r7, #24]
 8003dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6979      	ldr	r1, [r7, #20]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	613b      	str	r3, [r7, #16]
   return(result);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e1c:	bf00      	nop
 8003e1e:	3754      	adds	r7, #84	@ 0x54
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff fee4 	bl	8003c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b21      	cmp	r3, #33	@ 0x21
 8003e62:	d13e      	bne.n	8003ee2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6c:	d114      	bne.n	8003e98 <UART_Transmit_IT+0x48>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d110      	bne.n	8003e98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	1c9a      	adds	r2, r3, #2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	621a      	str	r2, [r3, #32]
 8003e96:	e008      	b.n	8003eaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	1c59      	adds	r1, r3, #1
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6211      	str	r1, [r2, #32]
 8003ea2:	781a      	ldrb	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ecc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003edc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fe73 	bl	8003bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08c      	sub	sp, #48	@ 0x30
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b22      	cmp	r3, #34	@ 0x22
 8003f32:	f040 80ae 	bne.w	8004092 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	d117      	bne.n	8003f70 <UART_Receive_IT+0x50>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d113      	bne.n	8003f70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f6e:	e026      	b.n	8003fbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d007      	beq.n	8003f94 <UART_Receive_IT+0x74>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <UART_Receive_IT+0x82>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e008      	b.n	8003fb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d15d      	bne.n	800408e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0220 	bic.w	r2, r2, #32
 8003fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0201 	bic.w	r2, r2, #1
 8004000:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	d135      	bne.n	8004084 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f023 0310 	bic.w	r3, r3, #16
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	623a      	str	r2, [r7, #32]
 8004040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	69f9      	ldr	r1, [r7, #28]
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	61bb      	str	r3, [r7, #24]
   return(result);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e5      	bne.n	800401e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b10      	cmp	r3, #16
 800405e:	d10a      	bne.n	8004076 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fdd1 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
 8004082:	e002      	b.n	800408a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fc fd91 	bl	8000bac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e002      	b.n	8004094 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3730      	adds	r7, #48	@ 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0c0      	sub	sp, #256	@ 0x100
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	68d9      	ldr	r1, [r3, #12]
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	ea40 0301 	orr.w	r3, r0, r1
 80040c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040f4:	f021 010c 	bic.w	r1, r1, #12
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004102:	430b      	orrs	r3, r1
 8004104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	6999      	ldr	r1, [r3, #24]
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	ea40 0301 	orr.w	r3, r0, r1
 8004122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8f      	ldr	r3, [pc, #572]	@ (8004368 <UART_SetConfig+0x2cc>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d005      	beq.n	800413c <UART_SetConfig+0xa0>
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8d      	ldr	r3, [pc, #564]	@ (800436c <UART_SetConfig+0x2d0>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d104      	bne.n	8004146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7fe fd7e 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 8004140:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004144:	e003      	b.n	800414e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7fe fd65 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 800414a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004158:	f040 810c 	bne.w	8004374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800415c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004166:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800416a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800416e:	4622      	mov	r2, r4
 8004170:	462b      	mov	r3, r5
 8004172:	1891      	adds	r1, r2, r2
 8004174:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004176:	415b      	adcs	r3, r3
 8004178:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800417a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800417e:	4621      	mov	r1, r4
 8004180:	eb12 0801 	adds.w	r8, r2, r1
 8004184:	4629      	mov	r1, r5
 8004186:	eb43 0901 	adc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041ac:	462b      	mov	r3, r5
 80041ae:	eb49 0303 	adc.w	r3, r9, r3
 80041b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041ca:	460b      	mov	r3, r1
 80041cc:	18db      	adds	r3, r3, r3
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d0:	4613      	mov	r3, r2
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80041d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041e0:	f7fc f856 	bl	8000290 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b61      	ldr	r3, [pc, #388]	@ (8004370 <UART_SetConfig+0x2d4>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011c      	lsls	r4, r3, #4
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800420c:	415b      	adcs	r3, r3
 800420e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004214:	4641      	mov	r1, r8
 8004216:	eb12 0a01 	adds.w	sl, r2, r1
 800421a:	4649      	mov	r1, r9
 800421c:	eb43 0b01 	adc.w	fp, r3, r1
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800422c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004234:	4692      	mov	sl, r2
 8004236:	469b      	mov	fp, r3
 8004238:	4643      	mov	r3, r8
 800423a:	eb1a 0303 	adds.w	r3, sl, r3
 800423e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004242:	464b      	mov	r3, r9
 8004244:	eb4b 0303 	adc.w	r3, fp, r3
 8004248:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004258:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800425c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004260:	460b      	mov	r3, r1
 8004262:	18db      	adds	r3, r3, r3
 8004264:	643b      	str	r3, [r7, #64]	@ 0x40
 8004266:	4613      	mov	r3, r2
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	647b      	str	r3, [r7, #68]	@ 0x44
 800426e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004276:	f7fc f80b 	bl	8000290 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4611      	mov	r1, r2
 8004280:	4b3b      	ldr	r3, [pc, #236]	@ (8004370 <UART_SetConfig+0x2d4>)
 8004282:	fba3 2301 	umull	r2, r3, r3, r1
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2264      	movs	r2, #100	@ 0x64
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	1acb      	subs	r3, r1, r3
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004296:	4b36      	ldr	r3, [pc, #216]	@ (8004370 <UART_SetConfig+0x2d4>)
 8004298:	fba3 2302 	umull	r2, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042a4:	441c      	add	r4, r3
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042c0:	415b      	adcs	r3, r3
 80042c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042fc:	464b      	mov	r3, r9
 80042fe:	460a      	mov	r2, r1
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004314:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800431c:	460b      	mov	r3, r1
 800431e:	18db      	adds	r3, r3, r3
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004322:	4613      	mov	r3, r2
 8004324:	eb42 0303 	adc.w	r3, r2, r3
 8004328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800432a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800432e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004332:	f7fb ffad 	bl	8000290 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <UART_SetConfig+0x2d4>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	@ 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	3332      	adds	r3, #50	@ 0x32
 800434e:	4a08      	ldr	r2, [pc, #32]	@ (8004370 <UART_SetConfig+0x2d4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 0207 	and.w	r2, r3, #7
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4422      	add	r2, r4
 8004362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004364:	e106      	b.n	8004574 <UART_SetConfig+0x4d8>
 8004366:	bf00      	nop
 8004368:	40011000 	.word	0x40011000
 800436c:	40011400 	.word	0x40011400
 8004370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800437e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004386:	4642      	mov	r2, r8
 8004388:	464b      	mov	r3, r9
 800438a:	1891      	adds	r1, r2, r2
 800438c:	6239      	str	r1, [r7, #32]
 800438e:	415b      	adcs	r3, r3
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
 8004392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004396:	4641      	mov	r1, r8
 8004398:	1854      	adds	r4, r2, r1
 800439a:	4649      	mov	r1, r9
 800439c:	eb43 0501 	adc.w	r5, r3, r1
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	00eb      	lsls	r3, r5, #3
 80043aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ae:	00e2      	lsls	r2, r4, #3
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	4643      	mov	r3, r8
 80043b6:	18e3      	adds	r3, r4, r3
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043bc:	464b      	mov	r3, r9
 80043be:	eb45 0303 	adc.w	r3, r5, r3
 80043c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043e2:	4629      	mov	r1, r5
 80043e4:	008b      	lsls	r3, r1, #2
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ec:	4621      	mov	r1, r4
 80043ee:	008a      	lsls	r2, r1, #2
 80043f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043f4:	f7fb ff4c 	bl	8000290 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b60      	ldr	r3, [pc, #384]	@ (8004580 <UART_SetConfig+0x4e4>)
 80043fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	011c      	lsls	r4, r3, #4
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004410:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	61b9      	str	r1, [r7, #24]
 8004420:	415b      	adcs	r3, r3
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004428:	4641      	mov	r1, r8
 800442a:	1851      	adds	r1, r2, r1
 800442c:	6139      	str	r1, [r7, #16]
 800442e:	4649      	mov	r1, r9
 8004430:	414b      	adcs	r3, r1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004440:	4659      	mov	r1, fp
 8004442:	00cb      	lsls	r3, r1, #3
 8004444:	4651      	mov	r1, sl
 8004446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444a:	4651      	mov	r1, sl
 800444c:	00ca      	lsls	r2, r1, #3
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	4603      	mov	r3, r0
 8004454:	4642      	mov	r2, r8
 8004456:	189b      	adds	r3, r3, r2
 8004458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800445c:	464b      	mov	r3, r9
 800445e:	460a      	mov	r2, r1
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004472:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004480:	4649      	mov	r1, r9
 8004482:	008b      	lsls	r3, r1, #2
 8004484:	4641      	mov	r1, r8
 8004486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448a:	4641      	mov	r1, r8
 800448c:	008a      	lsls	r2, r1, #2
 800448e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004492:	f7fb fefd 	bl	8000290 <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4611      	mov	r1, r2
 800449c:	4b38      	ldr	r3, [pc, #224]	@ (8004580 <UART_SetConfig+0x4e4>)
 800449e:	fba3 2301 	umull	r2, r3, r3, r1
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2264      	movs	r2, #100	@ 0x64
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	1acb      	subs	r3, r1, r3
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	3332      	adds	r3, #50	@ 0x32
 80044b0:	4a33      	ldr	r2, [pc, #204]	@ (8004580 <UART_SetConfig+0x4e4>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044bc:	441c      	add	r4, r3
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80044c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80044c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044cc:	4642      	mov	r2, r8
 80044ce:	464b      	mov	r3, r9
 80044d0:	1891      	adds	r1, r2, r2
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	415b      	adcs	r3, r3
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044dc:	4641      	mov	r1, r8
 80044de:	1851      	adds	r1, r2, r1
 80044e0:	6039      	str	r1, [r7, #0]
 80044e2:	4649      	mov	r1, r9
 80044e4:	414b      	adcs	r3, r1
 80044e6:	607b      	str	r3, [r7, #4]
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044f4:	4659      	mov	r1, fp
 80044f6:	00cb      	lsls	r3, r1, #3
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fe:	4651      	mov	r1, sl
 8004500:	00ca      	lsls	r2, r1, #3
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	4603      	mov	r3, r0
 8004508:	4642      	mov	r2, r8
 800450a:	189b      	adds	r3, r3, r2
 800450c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800450e:	464b      	mov	r3, r9
 8004510:	460a      	mov	r2, r1
 8004512:	eb42 0303 	adc.w	r3, r2, r3
 8004516:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	663b      	str	r3, [r7, #96]	@ 0x60
 8004522:	667a      	str	r2, [r7, #100]	@ 0x64
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004530:	4649      	mov	r1, r9
 8004532:	008b      	lsls	r3, r1, #2
 8004534:	4641      	mov	r1, r8
 8004536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453a:	4641      	mov	r1, r8
 800453c:	008a      	lsls	r2, r1, #2
 800453e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004542:	f7fb fea5 	bl	8000290 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <UART_SetConfig+0x4e4>)
 800454c:	fba3 1302 	umull	r1, r3, r3, r2
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2164      	movs	r1, #100	@ 0x64
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	3332      	adds	r3, #50	@ 0x32
 800455e:	4a08      	ldr	r2, [pc, #32]	@ (8004580 <UART_SetConfig+0x4e4>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4422      	add	r2, r4
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	bf00      	nop
 8004576:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004580:	51eb851f 	.word	0x51eb851f

08004584 <sniprintf>:
 8004584:	b40c      	push	{r2, r3}
 8004586:	b530      	push	{r4, r5, lr}
 8004588:	4b18      	ldr	r3, [pc, #96]	@ (80045ec <sniprintf+0x68>)
 800458a:	1e0c      	subs	r4, r1, #0
 800458c:	681d      	ldr	r5, [r3, #0]
 800458e:	b09d      	sub	sp, #116	@ 0x74
 8004590:	da08      	bge.n	80045a4 <sniprintf+0x20>
 8004592:	238b      	movs	r3, #139	@ 0x8b
 8004594:	602b      	str	r3, [r5, #0]
 8004596:	f04f 30ff 	mov.w	r0, #4294967295
 800459a:	b01d      	add	sp, #116	@ 0x74
 800459c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045a0:	b002      	add	sp, #8
 80045a2:	4770      	bx	lr
 80045a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80045a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80045b2:	bf14      	ite	ne
 80045b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80045b8:	4623      	moveq	r3, r4
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	9307      	str	r3, [sp, #28]
 80045be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045c2:	9002      	str	r0, [sp, #8]
 80045c4:	9006      	str	r0, [sp, #24]
 80045c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80045cc:	ab21      	add	r3, sp, #132	@ 0x84
 80045ce:	a902      	add	r1, sp, #8
 80045d0:	4628      	mov	r0, r5
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	f000 f994 	bl	8004900 <_svfiprintf_r>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	bfbc      	itt	lt
 80045dc:	238b      	movlt	r3, #139	@ 0x8b
 80045de:	602b      	strlt	r3, [r5, #0]
 80045e0:	2c00      	cmp	r4, #0
 80045e2:	d0da      	beq.n	800459a <sniprintf+0x16>
 80045e4:	9b02      	ldr	r3, [sp, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e7d6      	b.n	800459a <sniprintf+0x16>
 80045ec:	20000014 	.word	0x20000014

080045f0 <memset>:
 80045f0:	4402      	add	r2, r0
 80045f2:	4603      	mov	r3, r0
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d100      	bne.n	80045fa <memset+0xa>
 80045f8:	4770      	bx	lr
 80045fa:	f803 1b01 	strb.w	r1, [r3], #1
 80045fe:	e7f9      	b.n	80045f4 <memset+0x4>

08004600 <__errno>:
 8004600:	4b01      	ldr	r3, [pc, #4]	@ (8004608 <__errno+0x8>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000014 	.word	0x20000014

0800460c <__libc_init_array>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	4d0d      	ldr	r5, [pc, #52]	@ (8004644 <__libc_init_array+0x38>)
 8004610:	4c0d      	ldr	r4, [pc, #52]	@ (8004648 <__libc_init_array+0x3c>)
 8004612:	1b64      	subs	r4, r4, r5
 8004614:	10a4      	asrs	r4, r4, #2
 8004616:	2600      	movs	r6, #0
 8004618:	42a6      	cmp	r6, r4
 800461a:	d109      	bne.n	8004630 <__libc_init_array+0x24>
 800461c:	4d0b      	ldr	r5, [pc, #44]	@ (800464c <__libc_init_array+0x40>)
 800461e:	4c0c      	ldr	r4, [pc, #48]	@ (8004650 <__libc_init_array+0x44>)
 8004620:	f000 fcc6 	bl	8004fb0 <_init>
 8004624:	1b64      	subs	r4, r4, r5
 8004626:	10a4      	asrs	r4, r4, #2
 8004628:	2600      	movs	r6, #0
 800462a:	42a6      	cmp	r6, r4
 800462c:	d105      	bne.n	800463a <__libc_init_array+0x2e>
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	f855 3b04 	ldr.w	r3, [r5], #4
 8004634:	4798      	blx	r3
 8004636:	3601      	adds	r6, #1
 8004638:	e7ee      	b.n	8004618 <__libc_init_array+0xc>
 800463a:	f855 3b04 	ldr.w	r3, [r5], #4
 800463e:	4798      	blx	r3
 8004640:	3601      	adds	r6, #1
 8004642:	e7f2      	b.n	800462a <__libc_init_array+0x1e>
 8004644:	08005074 	.word	0x08005074
 8004648:	08005074 	.word	0x08005074
 800464c:	08005074 	.word	0x08005074
 8004650:	08005078 	.word	0x08005078

08004654 <__retarget_lock_acquire_recursive>:
 8004654:	4770      	bx	lr

08004656 <__retarget_lock_release_recursive>:
 8004656:	4770      	bx	lr

08004658 <_free_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4605      	mov	r5, r0
 800465c:	2900      	cmp	r1, #0
 800465e:	d041      	beq.n	80046e4 <_free_r+0x8c>
 8004660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004664:	1f0c      	subs	r4, r1, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	bfb8      	it	lt
 800466a:	18e4      	addlt	r4, r4, r3
 800466c:	f000 f8e0 	bl	8004830 <__malloc_lock>
 8004670:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <_free_r+0x90>)
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	b933      	cbnz	r3, 8004684 <_free_r+0x2c>
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	6014      	str	r4, [r2, #0]
 800467a:	4628      	mov	r0, r5
 800467c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004680:	f000 b8dc 	b.w	800483c <__malloc_unlock>
 8004684:	42a3      	cmp	r3, r4
 8004686:	d908      	bls.n	800469a <_free_r+0x42>
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	1821      	adds	r1, r4, r0
 800468c:	428b      	cmp	r3, r1
 800468e:	bf01      	itttt	eq
 8004690:	6819      	ldreq	r1, [r3, #0]
 8004692:	685b      	ldreq	r3, [r3, #4]
 8004694:	1809      	addeq	r1, r1, r0
 8004696:	6021      	streq	r1, [r4, #0]
 8004698:	e7ed      	b.n	8004676 <_free_r+0x1e>
 800469a:	461a      	mov	r2, r3
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b10b      	cbz	r3, 80046a4 <_free_r+0x4c>
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	d9fa      	bls.n	800469a <_free_r+0x42>
 80046a4:	6811      	ldr	r1, [r2, #0]
 80046a6:	1850      	adds	r0, r2, r1
 80046a8:	42a0      	cmp	r0, r4
 80046aa:	d10b      	bne.n	80046c4 <_free_r+0x6c>
 80046ac:	6820      	ldr	r0, [r4, #0]
 80046ae:	4401      	add	r1, r0
 80046b0:	1850      	adds	r0, r2, r1
 80046b2:	4283      	cmp	r3, r0
 80046b4:	6011      	str	r1, [r2, #0]
 80046b6:	d1e0      	bne.n	800467a <_free_r+0x22>
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	6053      	str	r3, [r2, #4]
 80046be:	4408      	add	r0, r1
 80046c0:	6010      	str	r0, [r2, #0]
 80046c2:	e7da      	b.n	800467a <_free_r+0x22>
 80046c4:	d902      	bls.n	80046cc <_free_r+0x74>
 80046c6:	230c      	movs	r3, #12
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	e7d6      	b.n	800467a <_free_r+0x22>
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	1821      	adds	r1, r4, r0
 80046d0:	428b      	cmp	r3, r1
 80046d2:	bf04      	itt	eq
 80046d4:	6819      	ldreq	r1, [r3, #0]
 80046d6:	685b      	ldreq	r3, [r3, #4]
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	bf04      	itt	eq
 80046dc:	1809      	addeq	r1, r1, r0
 80046de:	6021      	streq	r1, [r4, #0]
 80046e0:	6054      	str	r4, [r2, #4]
 80046e2:	e7ca      	b.n	800467a <_free_r+0x22>
 80046e4:	bd38      	pop	{r3, r4, r5, pc}
 80046e6:	bf00      	nop
 80046e8:	200003d0 	.word	0x200003d0

080046ec <sbrk_aligned>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4e0f      	ldr	r6, [pc, #60]	@ (800472c <sbrk_aligned+0x40>)
 80046f0:	460c      	mov	r4, r1
 80046f2:	6831      	ldr	r1, [r6, #0]
 80046f4:	4605      	mov	r5, r0
 80046f6:	b911      	cbnz	r1, 80046fe <sbrk_aligned+0x12>
 80046f8:	f000 fba4 	bl	8004e44 <_sbrk_r>
 80046fc:	6030      	str	r0, [r6, #0]
 80046fe:	4621      	mov	r1, r4
 8004700:	4628      	mov	r0, r5
 8004702:	f000 fb9f 	bl	8004e44 <_sbrk_r>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	d103      	bne.n	8004712 <sbrk_aligned+0x26>
 800470a:	f04f 34ff 	mov.w	r4, #4294967295
 800470e:	4620      	mov	r0, r4
 8004710:	bd70      	pop	{r4, r5, r6, pc}
 8004712:	1cc4      	adds	r4, r0, #3
 8004714:	f024 0403 	bic.w	r4, r4, #3
 8004718:	42a0      	cmp	r0, r4
 800471a:	d0f8      	beq.n	800470e <sbrk_aligned+0x22>
 800471c:	1a21      	subs	r1, r4, r0
 800471e:	4628      	mov	r0, r5
 8004720:	f000 fb90 	bl	8004e44 <_sbrk_r>
 8004724:	3001      	adds	r0, #1
 8004726:	d1f2      	bne.n	800470e <sbrk_aligned+0x22>
 8004728:	e7ef      	b.n	800470a <sbrk_aligned+0x1e>
 800472a:	bf00      	nop
 800472c:	200003cc 	.word	0x200003cc

08004730 <_malloc_r>:
 8004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004734:	1ccd      	adds	r5, r1, #3
 8004736:	f025 0503 	bic.w	r5, r5, #3
 800473a:	3508      	adds	r5, #8
 800473c:	2d0c      	cmp	r5, #12
 800473e:	bf38      	it	cc
 8004740:	250c      	movcc	r5, #12
 8004742:	2d00      	cmp	r5, #0
 8004744:	4606      	mov	r6, r0
 8004746:	db01      	blt.n	800474c <_malloc_r+0x1c>
 8004748:	42a9      	cmp	r1, r5
 800474a:	d904      	bls.n	8004756 <_malloc_r+0x26>
 800474c:	230c      	movs	r3, #12
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	2000      	movs	r0, #0
 8004752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800482c <_malloc_r+0xfc>
 800475a:	f000 f869 	bl	8004830 <__malloc_lock>
 800475e:	f8d8 3000 	ldr.w	r3, [r8]
 8004762:	461c      	mov	r4, r3
 8004764:	bb44      	cbnz	r4, 80047b8 <_malloc_r+0x88>
 8004766:	4629      	mov	r1, r5
 8004768:	4630      	mov	r0, r6
 800476a:	f7ff ffbf 	bl	80046ec <sbrk_aligned>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	4604      	mov	r4, r0
 8004772:	d158      	bne.n	8004826 <_malloc_r+0xf6>
 8004774:	f8d8 4000 	ldr.w	r4, [r8]
 8004778:	4627      	mov	r7, r4
 800477a:	2f00      	cmp	r7, #0
 800477c:	d143      	bne.n	8004806 <_malloc_r+0xd6>
 800477e:	2c00      	cmp	r4, #0
 8004780:	d04b      	beq.n	800481a <_malloc_r+0xea>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4639      	mov	r1, r7
 8004786:	4630      	mov	r0, r6
 8004788:	eb04 0903 	add.w	r9, r4, r3
 800478c:	f000 fb5a 	bl	8004e44 <_sbrk_r>
 8004790:	4581      	cmp	r9, r0
 8004792:	d142      	bne.n	800481a <_malloc_r+0xea>
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	1a6d      	subs	r5, r5, r1
 8004798:	4629      	mov	r1, r5
 800479a:	4630      	mov	r0, r6
 800479c:	f7ff ffa6 	bl	80046ec <sbrk_aligned>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d03a      	beq.n	800481a <_malloc_r+0xea>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	442b      	add	r3, r5
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	f8d8 3000 	ldr.w	r3, [r8]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	bb62      	cbnz	r2, 800480c <_malloc_r+0xdc>
 80047b2:	f8c8 7000 	str.w	r7, [r8]
 80047b6:	e00f      	b.n	80047d8 <_malloc_r+0xa8>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	1b52      	subs	r2, r2, r5
 80047bc:	d420      	bmi.n	8004800 <_malloc_r+0xd0>
 80047be:	2a0b      	cmp	r2, #11
 80047c0:	d917      	bls.n	80047f2 <_malloc_r+0xc2>
 80047c2:	1961      	adds	r1, r4, r5
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	6025      	str	r5, [r4, #0]
 80047c8:	bf18      	it	ne
 80047ca:	6059      	strne	r1, [r3, #4]
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	bf08      	it	eq
 80047d0:	f8c8 1000 	streq.w	r1, [r8]
 80047d4:	5162      	str	r2, [r4, r5]
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	4630      	mov	r0, r6
 80047da:	f000 f82f 	bl	800483c <__malloc_unlock>
 80047de:	f104 000b 	add.w	r0, r4, #11
 80047e2:	1d23      	adds	r3, r4, #4
 80047e4:	f020 0007 	bic.w	r0, r0, #7
 80047e8:	1ac2      	subs	r2, r0, r3
 80047ea:	bf1c      	itt	ne
 80047ec:	1a1b      	subne	r3, r3, r0
 80047ee:	50a3      	strne	r3, [r4, r2]
 80047f0:	e7af      	b.n	8004752 <_malloc_r+0x22>
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	bf0c      	ite	eq
 80047f8:	f8c8 2000 	streq.w	r2, [r8]
 80047fc:	605a      	strne	r2, [r3, #4]
 80047fe:	e7eb      	b.n	80047d8 <_malloc_r+0xa8>
 8004800:	4623      	mov	r3, r4
 8004802:	6864      	ldr	r4, [r4, #4]
 8004804:	e7ae      	b.n	8004764 <_malloc_r+0x34>
 8004806:	463c      	mov	r4, r7
 8004808:	687f      	ldr	r7, [r7, #4]
 800480a:	e7b6      	b.n	800477a <_malloc_r+0x4a>
 800480c:	461a      	mov	r2, r3
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	42a3      	cmp	r3, r4
 8004812:	d1fb      	bne.n	800480c <_malloc_r+0xdc>
 8004814:	2300      	movs	r3, #0
 8004816:	6053      	str	r3, [r2, #4]
 8004818:	e7de      	b.n	80047d8 <_malloc_r+0xa8>
 800481a:	230c      	movs	r3, #12
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f80c 	bl	800483c <__malloc_unlock>
 8004824:	e794      	b.n	8004750 <_malloc_r+0x20>
 8004826:	6005      	str	r5, [r0, #0]
 8004828:	e7d6      	b.n	80047d8 <_malloc_r+0xa8>
 800482a:	bf00      	nop
 800482c:	200003d0 	.word	0x200003d0

08004830 <__malloc_lock>:
 8004830:	4801      	ldr	r0, [pc, #4]	@ (8004838 <__malloc_lock+0x8>)
 8004832:	f7ff bf0f 	b.w	8004654 <__retarget_lock_acquire_recursive>
 8004836:	bf00      	nop
 8004838:	200003c8 	.word	0x200003c8

0800483c <__malloc_unlock>:
 800483c:	4801      	ldr	r0, [pc, #4]	@ (8004844 <__malloc_unlock+0x8>)
 800483e:	f7ff bf0a 	b.w	8004656 <__retarget_lock_release_recursive>
 8004842:	bf00      	nop
 8004844:	200003c8 	.word	0x200003c8

08004848 <__ssputs_r>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	688e      	ldr	r6, [r1, #8]
 800484e:	461f      	mov	r7, r3
 8004850:	42be      	cmp	r6, r7
 8004852:	680b      	ldr	r3, [r1, #0]
 8004854:	4682      	mov	sl, r0
 8004856:	460c      	mov	r4, r1
 8004858:	4690      	mov	r8, r2
 800485a:	d82d      	bhi.n	80048b8 <__ssputs_r+0x70>
 800485c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004860:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004864:	d026      	beq.n	80048b4 <__ssputs_r+0x6c>
 8004866:	6965      	ldr	r5, [r4, #20]
 8004868:	6909      	ldr	r1, [r1, #16]
 800486a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800486e:	eba3 0901 	sub.w	r9, r3, r1
 8004872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004876:	1c7b      	adds	r3, r7, #1
 8004878:	444b      	add	r3, r9
 800487a:	106d      	asrs	r5, r5, #1
 800487c:	429d      	cmp	r5, r3
 800487e:	bf38      	it	cc
 8004880:	461d      	movcc	r5, r3
 8004882:	0553      	lsls	r3, r2, #21
 8004884:	d527      	bpl.n	80048d6 <__ssputs_r+0x8e>
 8004886:	4629      	mov	r1, r5
 8004888:	f7ff ff52 	bl	8004730 <_malloc_r>
 800488c:	4606      	mov	r6, r0
 800488e:	b360      	cbz	r0, 80048ea <__ssputs_r+0xa2>
 8004890:	6921      	ldr	r1, [r4, #16]
 8004892:	464a      	mov	r2, r9
 8004894:	f000 fae6 	bl	8004e64 <memcpy>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800489e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	6126      	str	r6, [r4, #16]
 80048a6:	6165      	str	r5, [r4, #20]
 80048a8:	444e      	add	r6, r9
 80048aa:	eba5 0509 	sub.w	r5, r5, r9
 80048ae:	6026      	str	r6, [r4, #0]
 80048b0:	60a5      	str	r5, [r4, #8]
 80048b2:	463e      	mov	r6, r7
 80048b4:	42be      	cmp	r6, r7
 80048b6:	d900      	bls.n	80048ba <__ssputs_r+0x72>
 80048b8:	463e      	mov	r6, r7
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	4632      	mov	r2, r6
 80048be:	4641      	mov	r1, r8
 80048c0:	f000 faa6 	bl	8004e10 <memmove>
 80048c4:	68a3      	ldr	r3, [r4, #8]
 80048c6:	1b9b      	subs	r3, r3, r6
 80048c8:	60a3      	str	r3, [r4, #8]
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	4433      	add	r3, r6
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	2000      	movs	r0, #0
 80048d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d6:	462a      	mov	r2, r5
 80048d8:	f000 fad2 	bl	8004e80 <_realloc_r>
 80048dc:	4606      	mov	r6, r0
 80048de:	2800      	cmp	r0, #0
 80048e0:	d1e0      	bne.n	80048a4 <__ssputs_r+0x5c>
 80048e2:	6921      	ldr	r1, [r4, #16]
 80048e4:	4650      	mov	r0, sl
 80048e6:	f7ff feb7 	bl	8004658 <_free_r>
 80048ea:	230c      	movs	r3, #12
 80048ec:	f8ca 3000 	str.w	r3, [sl]
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f6:	81a3      	strh	r3, [r4, #12]
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295
 80048fc:	e7e9      	b.n	80048d2 <__ssputs_r+0x8a>
	...

08004900 <_svfiprintf_r>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	4698      	mov	r8, r3
 8004906:	898b      	ldrh	r3, [r1, #12]
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	b09d      	sub	sp, #116	@ 0x74
 800490c:	4607      	mov	r7, r0
 800490e:	460d      	mov	r5, r1
 8004910:	4614      	mov	r4, r2
 8004912:	d510      	bpl.n	8004936 <_svfiprintf_r+0x36>
 8004914:	690b      	ldr	r3, [r1, #16]
 8004916:	b973      	cbnz	r3, 8004936 <_svfiprintf_r+0x36>
 8004918:	2140      	movs	r1, #64	@ 0x40
 800491a:	f7ff ff09 	bl	8004730 <_malloc_r>
 800491e:	6028      	str	r0, [r5, #0]
 8004920:	6128      	str	r0, [r5, #16]
 8004922:	b930      	cbnz	r0, 8004932 <_svfiprintf_r+0x32>
 8004924:	230c      	movs	r3, #12
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	b01d      	add	sp, #116	@ 0x74
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004932:	2340      	movs	r3, #64	@ 0x40
 8004934:	616b      	str	r3, [r5, #20]
 8004936:	2300      	movs	r3, #0
 8004938:	9309      	str	r3, [sp, #36]	@ 0x24
 800493a:	2320      	movs	r3, #32
 800493c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004940:	f8cd 800c 	str.w	r8, [sp, #12]
 8004944:	2330      	movs	r3, #48	@ 0x30
 8004946:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ae4 <_svfiprintf_r+0x1e4>
 800494a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800494e:	f04f 0901 	mov.w	r9, #1
 8004952:	4623      	mov	r3, r4
 8004954:	469a      	mov	sl, r3
 8004956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495a:	b10a      	cbz	r2, 8004960 <_svfiprintf_r+0x60>
 800495c:	2a25      	cmp	r2, #37	@ 0x25
 800495e:	d1f9      	bne.n	8004954 <_svfiprintf_r+0x54>
 8004960:	ebba 0b04 	subs.w	fp, sl, r4
 8004964:	d00b      	beq.n	800497e <_svfiprintf_r+0x7e>
 8004966:	465b      	mov	r3, fp
 8004968:	4622      	mov	r2, r4
 800496a:	4629      	mov	r1, r5
 800496c:	4638      	mov	r0, r7
 800496e:	f7ff ff6b 	bl	8004848 <__ssputs_r>
 8004972:	3001      	adds	r0, #1
 8004974:	f000 80a7 	beq.w	8004ac6 <_svfiprintf_r+0x1c6>
 8004978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800497a:	445a      	add	r2, fp
 800497c:	9209      	str	r2, [sp, #36]	@ 0x24
 800497e:	f89a 3000 	ldrb.w	r3, [sl]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 809f 	beq.w	8004ac6 <_svfiprintf_r+0x1c6>
 8004988:	2300      	movs	r3, #0
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004992:	f10a 0a01 	add.w	sl, sl, #1
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	9307      	str	r3, [sp, #28]
 800499a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800499e:	931a      	str	r3, [sp, #104]	@ 0x68
 80049a0:	4654      	mov	r4, sl
 80049a2:	2205      	movs	r2, #5
 80049a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a8:	484e      	ldr	r0, [pc, #312]	@ (8004ae4 <_svfiprintf_r+0x1e4>)
 80049aa:	f7fb fc21 	bl	80001f0 <memchr>
 80049ae:	9a04      	ldr	r2, [sp, #16]
 80049b0:	b9d8      	cbnz	r0, 80049ea <_svfiprintf_r+0xea>
 80049b2:	06d0      	lsls	r0, r2, #27
 80049b4:	bf44      	itt	mi
 80049b6:	2320      	movmi	r3, #32
 80049b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049bc:	0711      	lsls	r1, r2, #28
 80049be:	bf44      	itt	mi
 80049c0:	232b      	movmi	r3, #43	@ 0x2b
 80049c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049c6:	f89a 3000 	ldrb.w	r3, [sl]
 80049ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80049cc:	d015      	beq.n	80049fa <_svfiprintf_r+0xfa>
 80049ce:	9a07      	ldr	r2, [sp, #28]
 80049d0:	4654      	mov	r4, sl
 80049d2:	2000      	movs	r0, #0
 80049d4:	f04f 0c0a 	mov.w	ip, #10
 80049d8:	4621      	mov	r1, r4
 80049da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049de:	3b30      	subs	r3, #48	@ 0x30
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d94b      	bls.n	8004a7c <_svfiprintf_r+0x17c>
 80049e4:	b1b0      	cbz	r0, 8004a14 <_svfiprintf_r+0x114>
 80049e6:	9207      	str	r2, [sp, #28]
 80049e8:	e014      	b.n	8004a14 <_svfiprintf_r+0x114>
 80049ea:	eba0 0308 	sub.w	r3, r0, r8
 80049ee:	fa09 f303 	lsl.w	r3, r9, r3
 80049f2:	4313      	orrs	r3, r2
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	46a2      	mov	sl, r4
 80049f8:	e7d2      	b.n	80049a0 <_svfiprintf_r+0xa0>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	9103      	str	r1, [sp, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bfbb      	ittet	lt
 8004a06:	425b      	neglt	r3, r3
 8004a08:	f042 0202 	orrlt.w	r2, r2, #2
 8004a0c:	9307      	strge	r3, [sp, #28]
 8004a0e:	9307      	strlt	r3, [sp, #28]
 8004a10:	bfb8      	it	lt
 8004a12:	9204      	strlt	r2, [sp, #16]
 8004a14:	7823      	ldrb	r3, [r4, #0]
 8004a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a18:	d10a      	bne.n	8004a30 <_svfiprintf_r+0x130>
 8004a1a:	7863      	ldrb	r3, [r4, #1]
 8004a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a1e:	d132      	bne.n	8004a86 <_svfiprintf_r+0x186>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	1d1a      	adds	r2, r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	9203      	str	r2, [sp, #12]
 8004a28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a2c:	3402      	adds	r4, #2
 8004a2e:	9305      	str	r3, [sp, #20]
 8004a30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004af4 <_svfiprintf_r+0x1f4>
 8004a34:	7821      	ldrb	r1, [r4, #0]
 8004a36:	2203      	movs	r2, #3
 8004a38:	4650      	mov	r0, sl
 8004a3a:	f7fb fbd9 	bl	80001f0 <memchr>
 8004a3e:	b138      	cbz	r0, 8004a50 <_svfiprintf_r+0x150>
 8004a40:	9b04      	ldr	r3, [sp, #16]
 8004a42:	eba0 000a 	sub.w	r0, r0, sl
 8004a46:	2240      	movs	r2, #64	@ 0x40
 8004a48:	4082      	lsls	r2, r0
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	3401      	adds	r4, #1
 8004a4e:	9304      	str	r3, [sp, #16]
 8004a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a54:	4824      	ldr	r0, [pc, #144]	@ (8004ae8 <_svfiprintf_r+0x1e8>)
 8004a56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a5a:	2206      	movs	r2, #6
 8004a5c:	f7fb fbc8 	bl	80001f0 <memchr>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d036      	beq.n	8004ad2 <_svfiprintf_r+0x1d2>
 8004a64:	4b21      	ldr	r3, [pc, #132]	@ (8004aec <_svfiprintf_r+0x1ec>)
 8004a66:	bb1b      	cbnz	r3, 8004ab0 <_svfiprintf_r+0x1b0>
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	3307      	adds	r3, #7
 8004a6c:	f023 0307 	bic.w	r3, r3, #7
 8004a70:	3308      	adds	r3, #8
 8004a72:	9303      	str	r3, [sp, #12]
 8004a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a76:	4433      	add	r3, r6
 8004a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a7a:	e76a      	b.n	8004952 <_svfiprintf_r+0x52>
 8004a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a80:	460c      	mov	r4, r1
 8004a82:	2001      	movs	r0, #1
 8004a84:	e7a8      	b.n	80049d8 <_svfiprintf_r+0xd8>
 8004a86:	2300      	movs	r3, #0
 8004a88:	3401      	adds	r4, #1
 8004a8a:	9305      	str	r3, [sp, #20]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f04f 0c0a 	mov.w	ip, #10
 8004a92:	4620      	mov	r0, r4
 8004a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a98:	3a30      	subs	r2, #48	@ 0x30
 8004a9a:	2a09      	cmp	r2, #9
 8004a9c:	d903      	bls.n	8004aa6 <_svfiprintf_r+0x1a6>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0c6      	beq.n	8004a30 <_svfiprintf_r+0x130>
 8004aa2:	9105      	str	r1, [sp, #20]
 8004aa4:	e7c4      	b.n	8004a30 <_svfiprintf_r+0x130>
 8004aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aaa:	4604      	mov	r4, r0
 8004aac:	2301      	movs	r3, #1
 8004aae:	e7f0      	b.n	8004a92 <_svfiprintf_r+0x192>
 8004ab0:	ab03      	add	r3, sp, #12
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <_svfiprintf_r+0x1f0>)
 8004ab8:	a904      	add	r1, sp, #16
 8004aba:	4638      	mov	r0, r7
 8004abc:	f3af 8000 	nop.w
 8004ac0:	1c42      	adds	r2, r0, #1
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	d1d6      	bne.n	8004a74 <_svfiprintf_r+0x174>
 8004ac6:	89ab      	ldrh	r3, [r5, #12]
 8004ac8:	065b      	lsls	r3, r3, #25
 8004aca:	f53f af2d 	bmi.w	8004928 <_svfiprintf_r+0x28>
 8004ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ad0:	e72c      	b.n	800492c <_svfiprintf_r+0x2c>
 8004ad2:	ab03      	add	r3, sp, #12
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	462a      	mov	r2, r5
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <_svfiprintf_r+0x1f0>)
 8004ada:	a904      	add	r1, sp, #16
 8004adc:	4638      	mov	r0, r7
 8004ade:	f000 f879 	bl	8004bd4 <_printf_i>
 8004ae2:	e7ed      	b.n	8004ac0 <_svfiprintf_r+0x1c0>
 8004ae4:	08005030 	.word	0x08005030
 8004ae8:	0800503a 	.word	0x0800503a
 8004aec:	00000000 	.word	0x00000000
 8004af0:	08004849 	.word	0x08004849
 8004af4:	08005036 	.word	0x08005036

08004af8 <_printf_common>:
 8004af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	4616      	mov	r6, r2
 8004afe:	4698      	mov	r8, r3
 8004b00:	688a      	ldr	r2, [r1, #8]
 8004b02:	690b      	ldr	r3, [r1, #16]
 8004b04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bfb8      	it	lt
 8004b0c:	4613      	movlt	r3, r2
 8004b0e:	6033      	str	r3, [r6, #0]
 8004b10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b14:	4607      	mov	r7, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	b10a      	cbz	r2, 8004b1e <_printf_common+0x26>
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	6033      	str	r3, [r6, #0]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	0699      	lsls	r1, r3, #26
 8004b22:	bf42      	ittt	mi
 8004b24:	6833      	ldrmi	r3, [r6, #0]
 8004b26:	3302      	addmi	r3, #2
 8004b28:	6033      	strmi	r3, [r6, #0]
 8004b2a:	6825      	ldr	r5, [r4, #0]
 8004b2c:	f015 0506 	ands.w	r5, r5, #6
 8004b30:	d106      	bne.n	8004b40 <_printf_common+0x48>
 8004b32:	f104 0a19 	add.w	sl, r4, #25
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	6832      	ldr	r2, [r6, #0]
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	42ab      	cmp	r3, r5
 8004b3e:	dc26      	bgt.n	8004b8e <_printf_common+0x96>
 8004b40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	3b00      	subs	r3, #0
 8004b48:	bf18      	it	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	0692      	lsls	r2, r2, #26
 8004b4e:	d42b      	bmi.n	8004ba8 <_printf_common+0xb0>
 8004b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b54:	4641      	mov	r1, r8
 8004b56:	4638      	mov	r0, r7
 8004b58:	47c8      	blx	r9
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d01e      	beq.n	8004b9c <_printf_common+0xa4>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	6922      	ldr	r2, [r4, #16]
 8004b62:	f003 0306 	and.w	r3, r3, #6
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	bf02      	ittt	eq
 8004b6a:	68e5      	ldreq	r5, [r4, #12]
 8004b6c:	6833      	ldreq	r3, [r6, #0]
 8004b6e:	1aed      	subeq	r5, r5, r3
 8004b70:	68a3      	ldr	r3, [r4, #8]
 8004b72:	bf0c      	ite	eq
 8004b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b78:	2500      	movne	r5, #0
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	bfc4      	itt	gt
 8004b7e:	1a9b      	subgt	r3, r3, r2
 8004b80:	18ed      	addgt	r5, r5, r3
 8004b82:	2600      	movs	r6, #0
 8004b84:	341a      	adds	r4, #26
 8004b86:	42b5      	cmp	r5, r6
 8004b88:	d11a      	bne.n	8004bc0 <_printf_common+0xc8>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e008      	b.n	8004ba0 <_printf_common+0xa8>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4652      	mov	r2, sl
 8004b92:	4641      	mov	r1, r8
 8004b94:	4638      	mov	r0, r7
 8004b96:	47c8      	blx	r9
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d103      	bne.n	8004ba4 <_printf_common+0xac>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	e7c6      	b.n	8004b36 <_printf_common+0x3e>
 8004ba8:	18e1      	adds	r1, r4, r3
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	2030      	movs	r0, #48	@ 0x30
 8004bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bb2:	4422      	add	r2, r4
 8004bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	e7c7      	b.n	8004b50 <_printf_common+0x58>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	47c8      	blx	r9
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d0e6      	beq.n	8004b9c <_printf_common+0xa4>
 8004bce:	3601      	adds	r6, #1
 8004bd0:	e7d9      	b.n	8004b86 <_printf_common+0x8e>
	...

08004bd4 <_printf_i>:
 8004bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	7e0f      	ldrb	r7, [r1, #24]
 8004bda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bdc:	2f78      	cmp	r7, #120	@ 0x78
 8004bde:	4691      	mov	r9, r2
 8004be0:	4680      	mov	r8, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	469a      	mov	sl, r3
 8004be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bea:	d807      	bhi.n	8004bfc <_printf_i+0x28>
 8004bec:	2f62      	cmp	r7, #98	@ 0x62
 8004bee:	d80a      	bhi.n	8004c06 <_printf_i+0x32>
 8004bf0:	2f00      	cmp	r7, #0
 8004bf2:	f000 80d1 	beq.w	8004d98 <_printf_i+0x1c4>
 8004bf6:	2f58      	cmp	r7, #88	@ 0x58
 8004bf8:	f000 80b8 	beq.w	8004d6c <_printf_i+0x198>
 8004bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c04:	e03a      	b.n	8004c7c <_printf_i+0xa8>
 8004c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c0a:	2b15      	cmp	r3, #21
 8004c0c:	d8f6      	bhi.n	8004bfc <_printf_i+0x28>
 8004c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c14 <_printf_i+0x40>)
 8004c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c14:	08004c6d 	.word	0x08004c6d
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004bfd 	.word	0x08004bfd
 8004c20:	08004bfd 	.word	0x08004bfd
 8004c24:	08004bfd 	.word	0x08004bfd
 8004c28:	08004bfd 	.word	0x08004bfd
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004bfd 	.word	0x08004bfd
 8004c34:	08004bfd 	.word	0x08004bfd
 8004c38:	08004bfd 	.word	0x08004bfd
 8004c3c:	08004bfd 	.word	0x08004bfd
 8004c40:	08004d7f 	.word	0x08004d7f
 8004c44:	08004cab 	.word	0x08004cab
 8004c48:	08004d39 	.word	0x08004d39
 8004c4c:	08004bfd 	.word	0x08004bfd
 8004c50:	08004bfd 	.word	0x08004bfd
 8004c54:	08004da1 	.word	0x08004da1
 8004c58:	08004bfd 	.word	0x08004bfd
 8004c5c:	08004cab 	.word	0x08004cab
 8004c60:	08004bfd 	.word	0x08004bfd
 8004c64:	08004bfd 	.word	0x08004bfd
 8004c68:	08004d41 	.word	0x08004d41
 8004c6c:	6833      	ldr	r3, [r6, #0]
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6032      	str	r2, [r6, #0]
 8004c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e09c      	b.n	8004dba <_printf_i+0x1e6>
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	6031      	str	r1, [r6, #0]
 8004c88:	0606      	lsls	r6, r0, #24
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0xbc>
 8004c8c:	681d      	ldr	r5, [r3, #0]
 8004c8e:	e003      	b.n	8004c98 <_printf_i+0xc4>
 8004c90:	0645      	lsls	r5, r0, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0xb8>
 8004c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c98:	2d00      	cmp	r5, #0
 8004c9a:	da03      	bge.n	8004ca4 <_printf_i+0xd0>
 8004c9c:	232d      	movs	r3, #45	@ 0x2d
 8004c9e:	426d      	negs	r5, r5
 8004ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca4:	4858      	ldr	r0, [pc, #352]	@ (8004e08 <_printf_i+0x234>)
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	e011      	b.n	8004cce <_printf_i+0xfa>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	0608      	lsls	r0, r1, #24
 8004cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb4:	d402      	bmi.n	8004cbc <_printf_i+0xe8>
 8004cb6:	0649      	lsls	r1, r1, #25
 8004cb8:	bf48      	it	mi
 8004cba:	b2ad      	uxthmi	r5, r5
 8004cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cbe:	4852      	ldr	r0, [pc, #328]	@ (8004e08 <_printf_i+0x234>)
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	bf14      	ite	ne
 8004cc4:	230a      	movne	r3, #10
 8004cc6:	2308      	moveq	r3, #8
 8004cc8:	2100      	movs	r1, #0
 8004cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cce:	6866      	ldr	r6, [r4, #4]
 8004cd0:	60a6      	str	r6, [r4, #8]
 8004cd2:	2e00      	cmp	r6, #0
 8004cd4:	db05      	blt.n	8004ce2 <_printf_i+0x10e>
 8004cd6:	6821      	ldr	r1, [r4, #0]
 8004cd8:	432e      	orrs	r6, r5
 8004cda:	f021 0104 	bic.w	r1, r1, #4
 8004cde:	6021      	str	r1, [r4, #0]
 8004ce0:	d04b      	beq.n	8004d7a <_printf_i+0x1a6>
 8004ce2:	4616      	mov	r6, r2
 8004ce4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ce8:	fb03 5711 	mls	r7, r3, r1, r5
 8004cec:	5dc7      	ldrb	r7, [r0, r7]
 8004cee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf2:	462f      	mov	r7, r5
 8004cf4:	42bb      	cmp	r3, r7
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	d9f4      	bls.n	8004ce4 <_printf_i+0x110>
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d10b      	bne.n	8004d16 <_printf_i+0x142>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	07df      	lsls	r7, r3, #31
 8004d02:	d508      	bpl.n	8004d16 <_printf_i+0x142>
 8004d04:	6923      	ldr	r3, [r4, #16]
 8004d06:	6861      	ldr	r1, [r4, #4]
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	bfde      	ittt	le
 8004d0c:	2330      	movle	r3, #48	@ 0x30
 8004d0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d16:	1b92      	subs	r2, r2, r6
 8004d18:	6122      	str	r2, [r4, #16]
 8004d1a:	f8cd a000 	str.w	sl, [sp]
 8004d1e:	464b      	mov	r3, r9
 8004d20:	aa03      	add	r2, sp, #12
 8004d22:	4621      	mov	r1, r4
 8004d24:	4640      	mov	r0, r8
 8004d26:	f7ff fee7 	bl	8004af8 <_printf_common>
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d14a      	bne.n	8004dc4 <_printf_i+0x1f0>
 8004d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d32:	b004      	add	sp, #16
 8004d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	f043 0320 	orr.w	r3, r3, #32
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	4832      	ldr	r0, [pc, #200]	@ (8004e0c <_printf_i+0x238>)
 8004d42:	2778      	movs	r7, #120	@ 0x78
 8004d44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	6831      	ldr	r1, [r6, #0]
 8004d4c:	061f      	lsls	r7, r3, #24
 8004d4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d52:	d402      	bmi.n	8004d5a <_printf_i+0x186>
 8004d54:	065f      	lsls	r7, r3, #25
 8004d56:	bf48      	it	mi
 8004d58:	b2ad      	uxthmi	r5, r5
 8004d5a:	6031      	str	r1, [r6, #0]
 8004d5c:	07d9      	lsls	r1, r3, #31
 8004d5e:	bf44      	itt	mi
 8004d60:	f043 0320 	orrmi.w	r3, r3, #32
 8004d64:	6023      	strmi	r3, [r4, #0]
 8004d66:	b11d      	cbz	r5, 8004d70 <_printf_i+0x19c>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	e7ad      	b.n	8004cc8 <_printf_i+0xf4>
 8004d6c:	4826      	ldr	r0, [pc, #152]	@ (8004e08 <_printf_i+0x234>)
 8004d6e:	e7e9      	b.n	8004d44 <_printf_i+0x170>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	f023 0320 	bic.w	r3, r3, #32
 8004d76:	6023      	str	r3, [r4, #0]
 8004d78:	e7f6      	b.n	8004d68 <_printf_i+0x194>
 8004d7a:	4616      	mov	r6, r2
 8004d7c:	e7bd      	b.n	8004cfa <_printf_i+0x126>
 8004d7e:	6833      	ldr	r3, [r6, #0]
 8004d80:	6825      	ldr	r5, [r4, #0]
 8004d82:	6961      	ldr	r1, [r4, #20]
 8004d84:	1d18      	adds	r0, r3, #4
 8004d86:	6030      	str	r0, [r6, #0]
 8004d88:	062e      	lsls	r6, r5, #24
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	d501      	bpl.n	8004d92 <_printf_i+0x1be>
 8004d8e:	6019      	str	r1, [r3, #0]
 8004d90:	e002      	b.n	8004d98 <_printf_i+0x1c4>
 8004d92:	0668      	lsls	r0, r5, #25
 8004d94:	d5fb      	bpl.n	8004d8e <_printf_i+0x1ba>
 8004d96:	8019      	strh	r1, [r3, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	e7bc      	b.n	8004d1a <_printf_i+0x146>
 8004da0:	6833      	ldr	r3, [r6, #0]
 8004da2:	1d1a      	adds	r2, r3, #4
 8004da4:	6032      	str	r2, [r6, #0]
 8004da6:	681e      	ldr	r6, [r3, #0]
 8004da8:	6862      	ldr	r2, [r4, #4]
 8004daa:	2100      	movs	r1, #0
 8004dac:	4630      	mov	r0, r6
 8004dae:	f7fb fa1f 	bl	80001f0 <memchr>
 8004db2:	b108      	cbz	r0, 8004db8 <_printf_i+0x1e4>
 8004db4:	1b80      	subs	r0, r0, r6
 8004db6:	6060      	str	r0, [r4, #4]
 8004db8:	6863      	ldr	r3, [r4, #4]
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc2:	e7aa      	b.n	8004d1a <_printf_i+0x146>
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4640      	mov	r0, r8
 8004dcc:	47d0      	blx	sl
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d0ad      	beq.n	8004d2e <_printf_i+0x15a>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	079b      	lsls	r3, r3, #30
 8004dd6:	d413      	bmi.n	8004e00 <_printf_i+0x22c>
 8004dd8:	68e0      	ldr	r0, [r4, #12]
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	4298      	cmp	r0, r3
 8004dde:	bfb8      	it	lt
 8004de0:	4618      	movlt	r0, r3
 8004de2:	e7a6      	b.n	8004d32 <_printf_i+0x15e>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4632      	mov	r2, r6
 8004de8:	4649      	mov	r1, r9
 8004dea:	4640      	mov	r0, r8
 8004dec:	47d0      	blx	sl
 8004dee:	3001      	adds	r0, #1
 8004df0:	d09d      	beq.n	8004d2e <_printf_i+0x15a>
 8004df2:	3501      	adds	r5, #1
 8004df4:	68e3      	ldr	r3, [r4, #12]
 8004df6:	9903      	ldr	r1, [sp, #12]
 8004df8:	1a5b      	subs	r3, r3, r1
 8004dfa:	42ab      	cmp	r3, r5
 8004dfc:	dcf2      	bgt.n	8004de4 <_printf_i+0x210>
 8004dfe:	e7eb      	b.n	8004dd8 <_printf_i+0x204>
 8004e00:	2500      	movs	r5, #0
 8004e02:	f104 0619 	add.w	r6, r4, #25
 8004e06:	e7f5      	b.n	8004df4 <_printf_i+0x220>
 8004e08:	08005041 	.word	0x08005041
 8004e0c:	08005052 	.word	0x08005052

08004e10 <memmove>:
 8004e10:	4288      	cmp	r0, r1
 8004e12:	b510      	push	{r4, lr}
 8004e14:	eb01 0402 	add.w	r4, r1, r2
 8004e18:	d902      	bls.n	8004e20 <memmove+0x10>
 8004e1a:	4284      	cmp	r4, r0
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	d807      	bhi.n	8004e30 <memmove+0x20>
 8004e20:	1e43      	subs	r3, r0, #1
 8004e22:	42a1      	cmp	r1, r4
 8004e24:	d008      	beq.n	8004e38 <memmove+0x28>
 8004e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e2e:	e7f8      	b.n	8004e22 <memmove+0x12>
 8004e30:	4402      	add	r2, r0
 8004e32:	4601      	mov	r1, r0
 8004e34:	428a      	cmp	r2, r1
 8004e36:	d100      	bne.n	8004e3a <memmove+0x2a>
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e42:	e7f7      	b.n	8004e34 <memmove+0x24>

08004e44 <_sbrk_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d06      	ldr	r5, [pc, #24]	@ (8004e60 <_sbrk_r+0x1c>)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	f7fc fe1a 	bl	8001a88 <_sbrk>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_sbrk_r+0x1a>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_sbrk_r+0x1a>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	200003c4 	.word	0x200003c4

08004e64 <memcpy>:
 8004e64:	440a      	add	r2, r1
 8004e66:	4291      	cmp	r1, r2
 8004e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e6c:	d100      	bne.n	8004e70 <memcpy+0xc>
 8004e6e:	4770      	bx	lr
 8004e70:	b510      	push	{r4, lr}
 8004e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	d1f9      	bne.n	8004e72 <memcpy+0xe>
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <_realloc_r>:
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	4607      	mov	r7, r0
 8004e86:	4614      	mov	r4, r2
 8004e88:	460d      	mov	r5, r1
 8004e8a:	b921      	cbnz	r1, 8004e96 <_realloc_r+0x16>
 8004e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e90:	4611      	mov	r1, r2
 8004e92:	f7ff bc4d 	b.w	8004730 <_malloc_r>
 8004e96:	b92a      	cbnz	r2, 8004ea4 <_realloc_r+0x24>
 8004e98:	f7ff fbde 	bl	8004658 <_free_r>
 8004e9c:	4625      	mov	r5, r4
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea4:	f000 f81a 	bl	8004edc <_malloc_usable_size_r>
 8004ea8:	4284      	cmp	r4, r0
 8004eaa:	4606      	mov	r6, r0
 8004eac:	d802      	bhi.n	8004eb4 <_realloc_r+0x34>
 8004eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eb2:	d8f4      	bhi.n	8004e9e <_realloc_r+0x1e>
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f7ff fc3a 	bl	8004730 <_malloc_r>
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	b908      	cbnz	r0, 8004ec4 <_realloc_r+0x44>
 8004ec0:	4645      	mov	r5, r8
 8004ec2:	e7ec      	b.n	8004e9e <_realloc_r+0x1e>
 8004ec4:	42b4      	cmp	r4, r6
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	bf28      	it	cs
 8004ecc:	4632      	movcs	r2, r6
 8004ece:	f7ff ffc9 	bl	8004e64 <memcpy>
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	f7ff fbbf 	bl	8004658 <_free_r>
 8004eda:	e7f1      	b.n	8004ec0 <_realloc_r+0x40>

08004edc <_malloc_usable_size_r>:
 8004edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee0:	1f18      	subs	r0, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bfbc      	itt	lt
 8004ee6:	580b      	ldrlt	r3, [r1, r0]
 8004ee8:	18c0      	addlt	r0, r0, r3
 8004eea:	4770      	bx	lr

08004eec <sqrtf>:
 8004eec:	b508      	push	{r3, lr}
 8004eee:	ed2d 8b02 	vpush	{d8}
 8004ef2:	eeb0 8a40 	vmov.f32	s16, s0
 8004ef6:	f000 f857 	bl	8004fa8 <__ieee754_sqrtf>
 8004efa:	eeb4 8a48 	vcmp.f32	s16, s16
 8004efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f02:	d60c      	bvs.n	8004f1e <sqrtf+0x32>
 8004f04:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004f24 <sqrtf+0x38>
 8004f08:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f10:	d505      	bpl.n	8004f1e <sqrtf+0x32>
 8004f12:	f7ff fb75 	bl	8004600 <__errno>
 8004f16:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004f1a:	2321      	movs	r3, #33	@ 0x21
 8004f1c:	6003      	str	r3, [r0, #0]
 8004f1e:	ecbd 8b02 	vpop	{d8}
 8004f22:	bd08      	pop	{r3, pc}
 8004f24:	00000000 	.word	0x00000000

08004f28 <lrintf>:
 8004f28:	ee10 3a10 	vmov	r3, s0
 8004f2c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004f30:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8004f34:	281e      	cmp	r0, #30
 8004f36:	b082      	sub	sp, #8
 8004f38:	dc2c      	bgt.n	8004f94 <lrintf+0x6c>
 8004f3a:	2816      	cmp	r0, #22
 8004f3c:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8004f40:	dd09      	ble.n	8004f56 <lrintf+0x2e>
 8004f42:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004f46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f4a:	3a96      	subs	r2, #150	@ 0x96
 8004f4c:	fa03 f002 	lsl.w	r0, r3, r2
 8004f50:	b321      	cbz	r1, 8004f9c <lrintf+0x74>
 8004f52:	4240      	negs	r0, r0
 8004f54:	e022      	b.n	8004f9c <lrintf+0x74>
 8004f56:	4b13      	ldr	r3, [pc, #76]	@ (8004fa4 <lrintf+0x7c>)
 8004f58:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004f5c:	ed93 7a00 	vldr	s14, [r3]
 8004f60:	ee37 0a00 	vadd.f32	s0, s14, s0
 8004f64:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004f68:	eddd 7a01 	vldr	s15, [sp, #4]
 8004f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f70:	ee17 3a90 	vmov	r3, s15
 8004f74:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8004f78:	d010      	beq.n	8004f9c <lrintf+0x74>
 8004f7a:	f3c3 50c7 	ubfx	r0, r3, #23, #8
 8004f7e:	387f      	subs	r0, #127	@ 0x7f
 8004f80:	d40e      	bmi.n	8004fa0 <lrintf+0x78>
 8004f82:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004f86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f8a:	f1c0 0017 	rsb	r0, r0, #23
 8004f8e:	fa23 f000 	lsr.w	r0, r3, r0
 8004f92:	e7dd      	b.n	8004f50 <lrintf+0x28>
 8004f94:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004f98:	ee17 0a90 	vmov	r0, s15
 8004f9c:	b002      	add	sp, #8
 8004f9e:	4770      	bx	lr
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e7d5      	b.n	8004f50 <lrintf+0x28>
 8004fa4:	08005064 	.word	0x08005064

08004fa8 <__ieee754_sqrtf>:
 8004fa8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004fac:	4770      	bx	lr
	...

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
